Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CTE_BOOL
    EXPRESSION
    NOT
    OR
    SIZE
    ST_CTE
    TERM

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON program1 DAVINCI block
Rule 2     program1 -> program1 funcs
Rule 3     program1 -> program1 vars global_vars
Rule 4     program1 -> empty
Rule 5     global_vars -> <empty>
Rule 6     block -> LBRACE b1 RBRACE
Rule 7     b1 -> vars local_vars b2
Rule 8     b1 -> b2
Rule 9     local_vars -> <empty>
Rule 10    b2 -> b2 statute
Rule 11    b2 -> empty
Rule 12    vars -> VAR vars2
Rule 13    vars2 -> vars2 type save_type vars3 SEMICOLON
Rule 14    vars2 -> empty
Rule 15    vars3 -> ID ASSIGN expression vars4
Rule 16    vars3 -> ID list vars4
Rule 17    vars3 -> ID vars4
Rule 18    vars4 -> vars4 COMMA ID
Rule 19    vars4 -> empty
Rule 20    save_type -> <empty>
Rule 21    list -> LIST
Rule 22    statute -> assignment
Rule 23    statute -> call
Rule 24    statute -> condition
Rule 25    statute -> triangle
Rule 26    statute -> rectangle
Rule 27    statute -> square
Rule 28    statute -> circle
Rule 29    statute -> poligon
Rule 30    statute -> color
Rule 31    statute -> pensize
Rule 32    statute -> penforward
Rule 33    statute -> penback
Rule 34    statute -> rotate
Rule 35    statute -> while
Rule 36    statute -> return
Rule 37    statute -> penon
Rule 38    statute -> penoff
Rule 39    while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
Rule 40    while_return -> <empty>
Rule 41    end_while -> <empty>
Rule 42    assignment -> ID cte_id ASSIGN expression SEMICOLON
Rule 43    assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
Rule 44    cte_id -> <empty>
Rule 45    color_cte -> RED
Rule 46    color_cte -> BLUE
Rule 47    color_cte -> YELLOW
Rule 48    color_cte -> GREEN
Rule 49    color_cte -> PINK
Rule 50    color_cte -> PURPLE
Rule 51    st_cte -> STRING
Rule 52    st_cte -> cte_bool
Rule 53    funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
Rule 54    funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
Rule 55    funcs1 -> funcs1 COMMA type ID
Rule 56    funcs1 -> empty
Rule 57    funcs2 -> funcs2 vars
Rule 58    funcs2 -> funcs2 statute
Rule 59    funcs2 -> empty
Rule 60    funcs3 -> funcs
Rule 61    funcs3 -> empty
Rule 62    color -> COLOR LPAREN color_cte RPAREN SEMICOLON
Rule 63    circle -> CIRCLE LPAREN exp RPAREN SEMICOLON
Rule 64    square -> SQUARE LPAREN exp RPAREN SEMICOLON
Rule 65    triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 66    rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 67    poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 68    rotate -> ROTATE LPAREN exp RPAREN SEMICOLON
Rule 69    rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
Rule 70    pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON
Rule 71    penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON
Rule 72    penback -> PENBACK LPAREN exp RPAREN SEMICOLON
Rule 73    penon -> PENON LPAREN RPAREN SEMICOLON
Rule 74    penoff -> PENOFF LPAREN RPAREN SEMICOLON
Rule 75    type -> INT
Rule 76    type -> FLOAT
Rule 77    type -> STRING
Rule 78    type -> BOOL
Rule 79    var_cte -> ID
Rule 80    var_cte -> CTE_INT
Rule 81    var_cte -> CTE_FLOAT
Rule 82    var_cte -> cte_bool
Rule 83    var_cte -> ID list
Rule 84    var_cte -> call
Rule 85    cte_bool -> TRUE
Rule 86    cte_bool -> FALSE
Rule 87    condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
Rule 88    condition1 -> gotoElse ELSE LBRACE b2 RBRACE
Rule 89    condition1 -> empty
Rule 90    type_check -> <empty>
Rule 91    gotoElse -> <empty>
Rule 92    end_if -> <empty>
Rule 93    expression -> exp expression1
Rule 94    expression1 -> LESSER relop exp top_relop
Rule 95    expression1 -> GREATER relop exp top_relop
Rule 96    expression1 -> EQUAL relop exp top_relop
Rule 97    expression1 -> NOTEQUAL relop exp top_relop
Rule 98    expression1 -> GREATEROREQUAL relop exp top_relop
Rule 99    expression1 -> LESSEROREQUAL relop exp top_relop
Rule 100   expression1 -> empty
Rule 101   relop -> <empty>
Rule 102   top_relop -> <empty>
Rule 103   exp -> term top_exp exp1
Rule 104   exp1 -> MINUS push_sign exp
Rule 105   exp1 -> PLUS push_sign exp
Rule 106   exp1 -> empty
Rule 107   top_exp -> <empty>
Rule 108   push_sign -> <empty>
Rule 109   top_factor -> <empty>
Rule 110   factor -> LPAREN false_bottom expression RPAREN end_par
Rule 111   factor -> var_cte
Rule 112   factor -> ID push_id
Rule 113   false_bottom -> <empty>
Rule 114   end_par -> <empty>
Rule 115   push_id -> <empty>
Rule 116   term -> factor top_factor term1
Rule 117   term1 -> DIVIDE push_sign term
Rule 118   term1 -> TIMES push_sign term
Rule 119   term1 -> empty
Rule 120   call -> ID LPAREN call1 RPAREN SEMICOLON
Rule 121   call1 -> ID COMMA call1
Rule 122   call1 -> exp
Rule 123   call1 -> st_cte
Rule 124   return -> RETURN var_cte SEMICOLON
Rule 125   return -> RETURN st_cte SEMICOLON
Rule 126   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 15 42 43
BLUE                 : 46
BOOL                 : 78
CIRCLE               : 63
COLOR                : 62
COMMA                : 18 55 65 66 67 121
CTE_BOOL             : 
CTE_FLOAT            : 81
CTE_INT              : 80
CTE_STRING           : 69
DAVINCI              : 1
DIVIDE               : 117
ELSE                 : 88
EQUAL                : 96
EXPRESSION           : 
FALSE                : 86
FLOAT                : 76
FUNC                 : 53 54
GREATER              : 95
GREATEROREQUAL       : 98
GREEN                : 48
ID                   : 1 15 16 17 18 42 43 53 53 54 54 55 79 83 112 120 121
IF                   : 87
INT                  : 75
LBRACE               : 6 39 53 54 87 88
LBRACKET             : 43
LESSER               : 94
LESSEROREQUAL        : 99
LIST                 : 21
LPAREN               : 39 53 54 62 63 64 65 66 67 68 69 70 71 72 73 74 87 110 120
MINUS                : 104
NOT                  : 
NOTEQUAL             : 97
OR                   : 
PENBACK              : 72
PENFORWARD           : 71
PENOFF               : 74
PENON                : 73
PENSIZE              : 70
PINK                 : 49
PLUS                 : 105
POLIGON              : 67
PROGRAM              : 1
PURPLE               : 50
RBRACE               : 6 39 53 54 87 88
RBRACKET             : 43
RECTANGLE            : 66
RED                  : 45
RETURN               : 124 125
ROTATE               : 68 69
RPAREN               : 39 53 54 62 63 64 65 66 67 68 69 70 71 72 73 74 87 110 120
SEMICOLON            : 1 13 42 43 62 63 64 65 66 67 68 69 70 71 72 73 74 120 124 125
SIZE                 : 
SQUARE               : 64
STRING               : 51 77
ST_CTE               : 
TERM                 : 
TIMES                : 118
TRIANGLE             : 65
TRUE                 : 85
VAR                  : 12
VOID                 : 54
WHILE                : 39
YELLOW               : 47
error                : 

Nonterminals, with rules where they appear

assignment           : 22
b1                   : 6
b2                   : 7 8 10 39 87 88
block                : 1
call                 : 23 84
call1                : 120 121
circle               : 28
color                : 30
color_cte            : 62
condition            : 24
condition1           : 87
cte_bool             : 52 82
cte_id               : 42 43
empty                : 4 11 14 19 56 59 61 89 100 106 119
end_if               : 87
end_par              : 110
end_while            : 39
exp                  : 43 63 64 65 65 66 66 67 67 68 70 71 72 93 94 95 96 97 98 99 104 105 122
exp1                 : 103
expression           : 15 39 42 43 87 110
expression1          : 93
factor               : 116
false_bottom         : 110
funcs                : 2 60
funcs1               : 53 54 55
funcs2               : 53 54 57 58
funcs3               : 53 54
global_vars          : 3
gotoElse             : 88
list                 : 16 83
local_vars           : 7
penback              : 33
penforward           : 32
penoff               : 38
penon                : 37
pensize              : 31
poligon              : 29
program              : 0
program1             : 1 2 3
push_id              : 112
push_sign            : 104 105 117 118
rectangle            : 26
relop                : 94 95 96 97 98 99
return               : 36
rotate               : 34
save_type            : 13
square               : 27
st_cte               : 123 125
statute              : 10 58
term                 : 103 117 118
term1                : 116
top_exp              : 103
top_factor           : 116
top_relop            : 94 95 96 97 98 99
triangle             : 25
type                 : 13 53 53 54 55
type_check           : 39 87
var_cte              : 111 124
vars                 : 3 7 57
vars2                : 12 13
vars3                : 13
vars4                : 15 16 17 18
while                : 35
while_return         : 39

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON program1 DAVINCI block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON program1 DAVINCI block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON program1 DAVINCI block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . program1 DAVINCI block
    (2) program1 -> . program1 funcs
    (3) program1 -> . program1 vars global_vars
    (4) program1 -> . empty
    (126) empty -> .

    DAVINCI         reduce using rule 126 (empty -> .)
    FUNC            reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)

    program1                       shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON program1 . DAVINCI block
    (2) program1 -> program1 . funcs
    (3) program1 -> program1 . vars global_vars
    (53) funcs -> . FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (54) funcs -> . FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (12) vars -> . VAR vars2

    DAVINCI         shift and go to state 7
    FUNC            shift and go to state 10
    VAR             shift and go to state 11

    funcs                          shift and go to state 8
    vars                           shift and go to state 9

state 6

    (4) program1 -> empty .

    DAVINCI         reduce using rule 4 (program1 -> empty .)
    FUNC            reduce using rule 4 (program1 -> empty .)
    VAR             reduce using rule 4 (program1 -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON program1 DAVINCI . block
    (6) block -> . LBRACE b1 RBRACE

    LBRACE          shift and go to state 13

    block                          shift and go to state 12

state 8

    (2) program1 -> program1 funcs .

    DAVINCI         reduce using rule 2 (program1 -> program1 funcs .)
    FUNC            reduce using rule 2 (program1 -> program1 funcs .)
    VAR             reduce using rule 2 (program1 -> program1 funcs .)


state 9

    (3) program1 -> program1 vars . global_vars
    (5) global_vars -> .

    DAVINCI         reduce using rule 5 (global_vars -> .)
    FUNC            reduce using rule 5 (global_vars -> .)
    VAR             reduce using rule 5 (global_vars -> .)

    global_vars                    shift and go to state 14

state 10

    (53) funcs -> FUNC . type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (54) funcs -> FUNC . VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (75) type -> . INT
    (76) type -> . FLOAT
    (77) type -> . STRING
    (78) type -> . BOOL

    VOID            shift and go to state 16
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 15

state 11

    (12) vars -> VAR . vars2
    (13) vars2 -> . vars2 type save_type vars3 SEMICOLON
    (14) vars2 -> . empty
    (126) empty -> .

    INT             reduce using rule 126 (empty -> .)
    FLOAT           reduce using rule 126 (empty -> .)
    STRING          reduce using rule 126 (empty -> .)
    BOOL            reduce using rule 126 (empty -> .)
    DAVINCI         reduce using rule 126 (empty -> .)
    FUNC            reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    vars2                          shift and go to state 21
    empty                          shift and go to state 22

state 12

    (1) program -> PROGRAM ID SEMICOLON program1 DAVINCI block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON program1 DAVINCI block .)


state 13

    (6) block -> LBRACE . b1 RBRACE
    (7) b1 -> . vars local_vars b2
    (8) b1 -> . b2
    (12) vars -> . VAR vars2
    (10) b2 -> . b2 statute
    (11) b2 -> . empty
    (126) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    b1                             shift and go to state 23
    vars                           shift and go to state 24
    b2                             shift and go to state 25
    empty                          shift and go to state 26

state 14

    (3) program1 -> program1 vars global_vars .

    DAVINCI         reduce using rule 3 (program1 -> program1 vars global_vars .)
    FUNC            reduce using rule 3 (program1 -> program1 vars global_vars .)
    VAR             reduce using rule 3 (program1 -> program1 vars global_vars .)


state 15

    (53) funcs -> FUNC type . ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 27


state 16

    (54) funcs -> FUNC VOID . ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 28


state 17

    (75) type -> INT .

    ID              reduce using rule 75 (type -> INT .)


state 18

    (76) type -> FLOAT .

    ID              reduce using rule 76 (type -> FLOAT .)


state 19

    (77) type -> STRING .

    ID              reduce using rule 77 (type -> STRING .)


state 20

    (78) type -> BOOL .

    ID              reduce using rule 78 (type -> BOOL .)


state 21

    (12) vars -> VAR vars2 .
    (13) vars2 -> vars2 . type save_type vars3 SEMICOLON
    (75) type -> . INT
    (76) type -> . FLOAT
    (77) type -> . STRING
    (78) type -> . BOOL

    DAVINCI         reduce using rule 12 (vars -> VAR vars2 .)
    FUNC            reduce using rule 12 (vars -> VAR vars2 .)
    VAR             reduce using rule 12 (vars -> VAR vars2 .)
    ID              reduce using rule 12 (vars -> VAR vars2 .)
    IF              reduce using rule 12 (vars -> VAR vars2 .)
    TRIANGLE        reduce using rule 12 (vars -> VAR vars2 .)
    RECTANGLE       reduce using rule 12 (vars -> VAR vars2 .)
    SQUARE          reduce using rule 12 (vars -> VAR vars2 .)
    CIRCLE          reduce using rule 12 (vars -> VAR vars2 .)
    POLIGON         reduce using rule 12 (vars -> VAR vars2 .)
    COLOR           reduce using rule 12 (vars -> VAR vars2 .)
    PENSIZE         reduce using rule 12 (vars -> VAR vars2 .)
    PENFORWARD      reduce using rule 12 (vars -> VAR vars2 .)
    PENBACK         reduce using rule 12 (vars -> VAR vars2 .)
    ROTATE          reduce using rule 12 (vars -> VAR vars2 .)
    WHILE           reduce using rule 12 (vars -> VAR vars2 .)
    RETURN          reduce using rule 12 (vars -> VAR vars2 .)
    PENON           reduce using rule 12 (vars -> VAR vars2 .)
    PENOFF          reduce using rule 12 (vars -> VAR vars2 .)
    RBRACE          reduce using rule 12 (vars -> VAR vars2 .)
    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 29

state 22

    (14) vars2 -> empty .

    INT             reduce using rule 14 (vars2 -> empty .)
    FLOAT           reduce using rule 14 (vars2 -> empty .)
    STRING          reduce using rule 14 (vars2 -> empty .)
    BOOL            reduce using rule 14 (vars2 -> empty .)
    DAVINCI         reduce using rule 14 (vars2 -> empty .)
    FUNC            reduce using rule 14 (vars2 -> empty .)
    VAR             reduce using rule 14 (vars2 -> empty .)
    ID              reduce using rule 14 (vars2 -> empty .)
    IF              reduce using rule 14 (vars2 -> empty .)
    TRIANGLE        reduce using rule 14 (vars2 -> empty .)
    RECTANGLE       reduce using rule 14 (vars2 -> empty .)
    SQUARE          reduce using rule 14 (vars2 -> empty .)
    CIRCLE          reduce using rule 14 (vars2 -> empty .)
    POLIGON         reduce using rule 14 (vars2 -> empty .)
    COLOR           reduce using rule 14 (vars2 -> empty .)
    PENSIZE         reduce using rule 14 (vars2 -> empty .)
    PENFORWARD      reduce using rule 14 (vars2 -> empty .)
    PENBACK         reduce using rule 14 (vars2 -> empty .)
    ROTATE          reduce using rule 14 (vars2 -> empty .)
    WHILE           reduce using rule 14 (vars2 -> empty .)
    RETURN          reduce using rule 14 (vars2 -> empty .)
    PENON           reduce using rule 14 (vars2 -> empty .)
    PENOFF          reduce using rule 14 (vars2 -> empty .)
    RBRACE          reduce using rule 14 (vars2 -> empty .)


state 23

    (6) block -> LBRACE b1 . RBRACE

    RBRACE          shift and go to state 30


state 24

    (7) b1 -> vars . local_vars b2
    (9) local_vars -> .

    ID              reduce using rule 9 (local_vars -> .)
    IF              reduce using rule 9 (local_vars -> .)
    TRIANGLE        reduce using rule 9 (local_vars -> .)
    RECTANGLE       reduce using rule 9 (local_vars -> .)
    SQUARE          reduce using rule 9 (local_vars -> .)
    CIRCLE          reduce using rule 9 (local_vars -> .)
    POLIGON         reduce using rule 9 (local_vars -> .)
    COLOR           reduce using rule 9 (local_vars -> .)
    PENSIZE         reduce using rule 9 (local_vars -> .)
    PENFORWARD      reduce using rule 9 (local_vars -> .)
    PENBACK         reduce using rule 9 (local_vars -> .)
    ROTATE          reduce using rule 9 (local_vars -> .)
    WHILE           reduce using rule 9 (local_vars -> .)
    RETURN          reduce using rule 9 (local_vars -> .)
    PENON           reduce using rule 9 (local_vars -> .)
    PENOFF          reduce using rule 9 (local_vars -> .)
    RBRACE          reduce using rule 9 (local_vars -> .)

    local_vars                     shift and go to state 31

state 25

    (8) b1 -> b2 .
    (10) b2 -> b2 . statute
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          reduce using rule 8 (b1 -> b2 .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    statute                        shift and go to state 32
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 26

    (11) b2 -> empty .

    ID              reduce using rule 11 (b2 -> empty .)
    IF              reduce using rule 11 (b2 -> empty .)
    TRIANGLE        reduce using rule 11 (b2 -> empty .)
    RECTANGLE       reduce using rule 11 (b2 -> empty .)
    SQUARE          reduce using rule 11 (b2 -> empty .)
    CIRCLE          reduce using rule 11 (b2 -> empty .)
    POLIGON         reduce using rule 11 (b2 -> empty .)
    COLOR           reduce using rule 11 (b2 -> empty .)
    PENSIZE         reduce using rule 11 (b2 -> empty .)
    PENFORWARD      reduce using rule 11 (b2 -> empty .)
    PENBACK         reduce using rule 11 (b2 -> empty .)
    ROTATE          reduce using rule 11 (b2 -> empty .)
    WHILE           reduce using rule 11 (b2 -> empty .)
    RETURN          reduce using rule 11 (b2 -> empty .)
    PENON           reduce using rule 11 (b2 -> empty .)
    PENOFF          reduce using rule 11 (b2 -> empty .)
    RBRACE          reduce using rule 11 (b2 -> empty .)


state 27

    (53) funcs -> FUNC type ID . LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    LPAREN          shift and go to state 66


state 28

    (54) funcs -> FUNC VOID ID . LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    LPAREN          shift and go to state 67


state 29

    (13) vars2 -> vars2 type . save_type vars3 SEMICOLON
    (20) save_type -> .

    ID              reduce using rule 20 (save_type -> .)

    save_type                      shift and go to state 68

state 30

    (6) block -> LBRACE b1 RBRACE .

    $end            reduce using rule 6 (block -> LBRACE b1 RBRACE .)


state 31

    (7) b1 -> vars local_vars . b2
    (10) b2 -> . b2 statute
    (11) b2 -> . empty
    (126) empty -> .

    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)

    b2                             shift and go to state 69
    empty                          shift and go to state 26

state 32

    (10) b2 -> b2 statute .

    ID              reduce using rule 10 (b2 -> b2 statute .)
    IF              reduce using rule 10 (b2 -> b2 statute .)
    TRIANGLE        reduce using rule 10 (b2 -> b2 statute .)
    RECTANGLE       reduce using rule 10 (b2 -> b2 statute .)
    SQUARE          reduce using rule 10 (b2 -> b2 statute .)
    CIRCLE          reduce using rule 10 (b2 -> b2 statute .)
    POLIGON         reduce using rule 10 (b2 -> b2 statute .)
    COLOR           reduce using rule 10 (b2 -> b2 statute .)
    PENSIZE         reduce using rule 10 (b2 -> b2 statute .)
    PENFORWARD      reduce using rule 10 (b2 -> b2 statute .)
    PENBACK         reduce using rule 10 (b2 -> b2 statute .)
    ROTATE          reduce using rule 10 (b2 -> b2 statute .)
    WHILE           reduce using rule 10 (b2 -> b2 statute .)
    RETURN          reduce using rule 10 (b2 -> b2 statute .)
    PENON           reduce using rule 10 (b2 -> b2 statute .)
    PENOFF          reduce using rule 10 (b2 -> b2 statute .)
    RBRACE          reduce using rule 10 (b2 -> b2 statute .)


state 33

    (22) statute -> assignment .

    ID              reduce using rule 22 (statute -> assignment .)
    IF              reduce using rule 22 (statute -> assignment .)
    TRIANGLE        reduce using rule 22 (statute -> assignment .)
    RECTANGLE       reduce using rule 22 (statute -> assignment .)
    SQUARE          reduce using rule 22 (statute -> assignment .)
    CIRCLE          reduce using rule 22 (statute -> assignment .)
    POLIGON         reduce using rule 22 (statute -> assignment .)
    COLOR           reduce using rule 22 (statute -> assignment .)
    PENSIZE         reduce using rule 22 (statute -> assignment .)
    PENFORWARD      reduce using rule 22 (statute -> assignment .)
    PENBACK         reduce using rule 22 (statute -> assignment .)
    ROTATE          reduce using rule 22 (statute -> assignment .)
    WHILE           reduce using rule 22 (statute -> assignment .)
    RETURN          reduce using rule 22 (statute -> assignment .)
    PENON           reduce using rule 22 (statute -> assignment .)
    PENOFF          reduce using rule 22 (statute -> assignment .)
    RBRACE          reduce using rule 22 (statute -> assignment .)
    VAR             reduce using rule 22 (statute -> assignment .)


state 34

    (23) statute -> call .

    ID              reduce using rule 23 (statute -> call .)
    IF              reduce using rule 23 (statute -> call .)
    TRIANGLE        reduce using rule 23 (statute -> call .)
    RECTANGLE       reduce using rule 23 (statute -> call .)
    SQUARE          reduce using rule 23 (statute -> call .)
    CIRCLE          reduce using rule 23 (statute -> call .)
    POLIGON         reduce using rule 23 (statute -> call .)
    COLOR           reduce using rule 23 (statute -> call .)
    PENSIZE         reduce using rule 23 (statute -> call .)
    PENFORWARD      reduce using rule 23 (statute -> call .)
    PENBACK         reduce using rule 23 (statute -> call .)
    ROTATE          reduce using rule 23 (statute -> call .)
    WHILE           reduce using rule 23 (statute -> call .)
    RETURN          reduce using rule 23 (statute -> call .)
    PENON           reduce using rule 23 (statute -> call .)
    PENOFF          reduce using rule 23 (statute -> call .)
    RBRACE          reduce using rule 23 (statute -> call .)
    VAR             reduce using rule 23 (statute -> call .)


state 35

    (24) statute -> condition .

    ID              reduce using rule 24 (statute -> condition .)
    IF              reduce using rule 24 (statute -> condition .)
    TRIANGLE        reduce using rule 24 (statute -> condition .)
    RECTANGLE       reduce using rule 24 (statute -> condition .)
    SQUARE          reduce using rule 24 (statute -> condition .)
    CIRCLE          reduce using rule 24 (statute -> condition .)
    POLIGON         reduce using rule 24 (statute -> condition .)
    COLOR           reduce using rule 24 (statute -> condition .)
    PENSIZE         reduce using rule 24 (statute -> condition .)
    PENFORWARD      reduce using rule 24 (statute -> condition .)
    PENBACK         reduce using rule 24 (statute -> condition .)
    ROTATE          reduce using rule 24 (statute -> condition .)
    WHILE           reduce using rule 24 (statute -> condition .)
    RETURN          reduce using rule 24 (statute -> condition .)
    PENON           reduce using rule 24 (statute -> condition .)
    PENOFF          reduce using rule 24 (statute -> condition .)
    RBRACE          reduce using rule 24 (statute -> condition .)
    VAR             reduce using rule 24 (statute -> condition .)


state 36

    (25) statute -> triangle .

    ID              reduce using rule 25 (statute -> triangle .)
    IF              reduce using rule 25 (statute -> triangle .)
    TRIANGLE        reduce using rule 25 (statute -> triangle .)
    RECTANGLE       reduce using rule 25 (statute -> triangle .)
    SQUARE          reduce using rule 25 (statute -> triangle .)
    CIRCLE          reduce using rule 25 (statute -> triangle .)
    POLIGON         reduce using rule 25 (statute -> triangle .)
    COLOR           reduce using rule 25 (statute -> triangle .)
    PENSIZE         reduce using rule 25 (statute -> triangle .)
    PENFORWARD      reduce using rule 25 (statute -> triangle .)
    PENBACK         reduce using rule 25 (statute -> triangle .)
    ROTATE          reduce using rule 25 (statute -> triangle .)
    WHILE           reduce using rule 25 (statute -> triangle .)
    RETURN          reduce using rule 25 (statute -> triangle .)
    PENON           reduce using rule 25 (statute -> triangle .)
    PENOFF          reduce using rule 25 (statute -> triangle .)
    RBRACE          reduce using rule 25 (statute -> triangle .)
    VAR             reduce using rule 25 (statute -> triangle .)


state 37

    (26) statute -> rectangle .

    ID              reduce using rule 26 (statute -> rectangle .)
    IF              reduce using rule 26 (statute -> rectangle .)
    TRIANGLE        reduce using rule 26 (statute -> rectangle .)
    RECTANGLE       reduce using rule 26 (statute -> rectangle .)
    SQUARE          reduce using rule 26 (statute -> rectangle .)
    CIRCLE          reduce using rule 26 (statute -> rectangle .)
    POLIGON         reduce using rule 26 (statute -> rectangle .)
    COLOR           reduce using rule 26 (statute -> rectangle .)
    PENSIZE         reduce using rule 26 (statute -> rectangle .)
    PENFORWARD      reduce using rule 26 (statute -> rectangle .)
    PENBACK         reduce using rule 26 (statute -> rectangle .)
    ROTATE          reduce using rule 26 (statute -> rectangle .)
    WHILE           reduce using rule 26 (statute -> rectangle .)
    RETURN          reduce using rule 26 (statute -> rectangle .)
    PENON           reduce using rule 26 (statute -> rectangle .)
    PENOFF          reduce using rule 26 (statute -> rectangle .)
    RBRACE          reduce using rule 26 (statute -> rectangle .)
    VAR             reduce using rule 26 (statute -> rectangle .)


state 38

    (27) statute -> square .

    ID              reduce using rule 27 (statute -> square .)
    IF              reduce using rule 27 (statute -> square .)
    TRIANGLE        reduce using rule 27 (statute -> square .)
    RECTANGLE       reduce using rule 27 (statute -> square .)
    SQUARE          reduce using rule 27 (statute -> square .)
    CIRCLE          reduce using rule 27 (statute -> square .)
    POLIGON         reduce using rule 27 (statute -> square .)
    COLOR           reduce using rule 27 (statute -> square .)
    PENSIZE         reduce using rule 27 (statute -> square .)
    PENFORWARD      reduce using rule 27 (statute -> square .)
    PENBACK         reduce using rule 27 (statute -> square .)
    ROTATE          reduce using rule 27 (statute -> square .)
    WHILE           reduce using rule 27 (statute -> square .)
    RETURN          reduce using rule 27 (statute -> square .)
    PENON           reduce using rule 27 (statute -> square .)
    PENOFF          reduce using rule 27 (statute -> square .)
    RBRACE          reduce using rule 27 (statute -> square .)
    VAR             reduce using rule 27 (statute -> square .)


state 39

    (28) statute -> circle .

    ID              reduce using rule 28 (statute -> circle .)
    IF              reduce using rule 28 (statute -> circle .)
    TRIANGLE        reduce using rule 28 (statute -> circle .)
    RECTANGLE       reduce using rule 28 (statute -> circle .)
    SQUARE          reduce using rule 28 (statute -> circle .)
    CIRCLE          reduce using rule 28 (statute -> circle .)
    POLIGON         reduce using rule 28 (statute -> circle .)
    COLOR           reduce using rule 28 (statute -> circle .)
    PENSIZE         reduce using rule 28 (statute -> circle .)
    PENFORWARD      reduce using rule 28 (statute -> circle .)
    PENBACK         reduce using rule 28 (statute -> circle .)
    ROTATE          reduce using rule 28 (statute -> circle .)
    WHILE           reduce using rule 28 (statute -> circle .)
    RETURN          reduce using rule 28 (statute -> circle .)
    PENON           reduce using rule 28 (statute -> circle .)
    PENOFF          reduce using rule 28 (statute -> circle .)
    RBRACE          reduce using rule 28 (statute -> circle .)
    VAR             reduce using rule 28 (statute -> circle .)


state 40

    (29) statute -> poligon .

    ID              reduce using rule 29 (statute -> poligon .)
    IF              reduce using rule 29 (statute -> poligon .)
    TRIANGLE        reduce using rule 29 (statute -> poligon .)
    RECTANGLE       reduce using rule 29 (statute -> poligon .)
    SQUARE          reduce using rule 29 (statute -> poligon .)
    CIRCLE          reduce using rule 29 (statute -> poligon .)
    POLIGON         reduce using rule 29 (statute -> poligon .)
    COLOR           reduce using rule 29 (statute -> poligon .)
    PENSIZE         reduce using rule 29 (statute -> poligon .)
    PENFORWARD      reduce using rule 29 (statute -> poligon .)
    PENBACK         reduce using rule 29 (statute -> poligon .)
    ROTATE          reduce using rule 29 (statute -> poligon .)
    WHILE           reduce using rule 29 (statute -> poligon .)
    RETURN          reduce using rule 29 (statute -> poligon .)
    PENON           reduce using rule 29 (statute -> poligon .)
    PENOFF          reduce using rule 29 (statute -> poligon .)
    RBRACE          reduce using rule 29 (statute -> poligon .)
    VAR             reduce using rule 29 (statute -> poligon .)


state 41

    (30) statute -> color .

    ID              reduce using rule 30 (statute -> color .)
    IF              reduce using rule 30 (statute -> color .)
    TRIANGLE        reduce using rule 30 (statute -> color .)
    RECTANGLE       reduce using rule 30 (statute -> color .)
    SQUARE          reduce using rule 30 (statute -> color .)
    CIRCLE          reduce using rule 30 (statute -> color .)
    POLIGON         reduce using rule 30 (statute -> color .)
    COLOR           reduce using rule 30 (statute -> color .)
    PENSIZE         reduce using rule 30 (statute -> color .)
    PENFORWARD      reduce using rule 30 (statute -> color .)
    PENBACK         reduce using rule 30 (statute -> color .)
    ROTATE          reduce using rule 30 (statute -> color .)
    WHILE           reduce using rule 30 (statute -> color .)
    RETURN          reduce using rule 30 (statute -> color .)
    PENON           reduce using rule 30 (statute -> color .)
    PENOFF          reduce using rule 30 (statute -> color .)
    RBRACE          reduce using rule 30 (statute -> color .)
    VAR             reduce using rule 30 (statute -> color .)


state 42

    (31) statute -> pensize .

    ID              reduce using rule 31 (statute -> pensize .)
    IF              reduce using rule 31 (statute -> pensize .)
    TRIANGLE        reduce using rule 31 (statute -> pensize .)
    RECTANGLE       reduce using rule 31 (statute -> pensize .)
    SQUARE          reduce using rule 31 (statute -> pensize .)
    CIRCLE          reduce using rule 31 (statute -> pensize .)
    POLIGON         reduce using rule 31 (statute -> pensize .)
    COLOR           reduce using rule 31 (statute -> pensize .)
    PENSIZE         reduce using rule 31 (statute -> pensize .)
    PENFORWARD      reduce using rule 31 (statute -> pensize .)
    PENBACK         reduce using rule 31 (statute -> pensize .)
    ROTATE          reduce using rule 31 (statute -> pensize .)
    WHILE           reduce using rule 31 (statute -> pensize .)
    RETURN          reduce using rule 31 (statute -> pensize .)
    PENON           reduce using rule 31 (statute -> pensize .)
    PENOFF          reduce using rule 31 (statute -> pensize .)
    RBRACE          reduce using rule 31 (statute -> pensize .)
    VAR             reduce using rule 31 (statute -> pensize .)


state 43

    (32) statute -> penforward .

    ID              reduce using rule 32 (statute -> penforward .)
    IF              reduce using rule 32 (statute -> penforward .)
    TRIANGLE        reduce using rule 32 (statute -> penforward .)
    RECTANGLE       reduce using rule 32 (statute -> penforward .)
    SQUARE          reduce using rule 32 (statute -> penforward .)
    CIRCLE          reduce using rule 32 (statute -> penforward .)
    POLIGON         reduce using rule 32 (statute -> penforward .)
    COLOR           reduce using rule 32 (statute -> penforward .)
    PENSIZE         reduce using rule 32 (statute -> penforward .)
    PENFORWARD      reduce using rule 32 (statute -> penforward .)
    PENBACK         reduce using rule 32 (statute -> penforward .)
    ROTATE          reduce using rule 32 (statute -> penforward .)
    WHILE           reduce using rule 32 (statute -> penforward .)
    RETURN          reduce using rule 32 (statute -> penforward .)
    PENON           reduce using rule 32 (statute -> penforward .)
    PENOFF          reduce using rule 32 (statute -> penforward .)
    RBRACE          reduce using rule 32 (statute -> penforward .)
    VAR             reduce using rule 32 (statute -> penforward .)


state 44

    (33) statute -> penback .

    ID              reduce using rule 33 (statute -> penback .)
    IF              reduce using rule 33 (statute -> penback .)
    TRIANGLE        reduce using rule 33 (statute -> penback .)
    RECTANGLE       reduce using rule 33 (statute -> penback .)
    SQUARE          reduce using rule 33 (statute -> penback .)
    CIRCLE          reduce using rule 33 (statute -> penback .)
    POLIGON         reduce using rule 33 (statute -> penback .)
    COLOR           reduce using rule 33 (statute -> penback .)
    PENSIZE         reduce using rule 33 (statute -> penback .)
    PENFORWARD      reduce using rule 33 (statute -> penback .)
    PENBACK         reduce using rule 33 (statute -> penback .)
    ROTATE          reduce using rule 33 (statute -> penback .)
    WHILE           reduce using rule 33 (statute -> penback .)
    RETURN          reduce using rule 33 (statute -> penback .)
    PENON           reduce using rule 33 (statute -> penback .)
    PENOFF          reduce using rule 33 (statute -> penback .)
    RBRACE          reduce using rule 33 (statute -> penback .)
    VAR             reduce using rule 33 (statute -> penback .)


state 45

    (34) statute -> rotate .

    ID              reduce using rule 34 (statute -> rotate .)
    IF              reduce using rule 34 (statute -> rotate .)
    TRIANGLE        reduce using rule 34 (statute -> rotate .)
    RECTANGLE       reduce using rule 34 (statute -> rotate .)
    SQUARE          reduce using rule 34 (statute -> rotate .)
    CIRCLE          reduce using rule 34 (statute -> rotate .)
    POLIGON         reduce using rule 34 (statute -> rotate .)
    COLOR           reduce using rule 34 (statute -> rotate .)
    PENSIZE         reduce using rule 34 (statute -> rotate .)
    PENFORWARD      reduce using rule 34 (statute -> rotate .)
    PENBACK         reduce using rule 34 (statute -> rotate .)
    ROTATE          reduce using rule 34 (statute -> rotate .)
    WHILE           reduce using rule 34 (statute -> rotate .)
    RETURN          reduce using rule 34 (statute -> rotate .)
    PENON           reduce using rule 34 (statute -> rotate .)
    PENOFF          reduce using rule 34 (statute -> rotate .)
    RBRACE          reduce using rule 34 (statute -> rotate .)
    VAR             reduce using rule 34 (statute -> rotate .)


state 46

    (35) statute -> while .

    ID              reduce using rule 35 (statute -> while .)
    IF              reduce using rule 35 (statute -> while .)
    TRIANGLE        reduce using rule 35 (statute -> while .)
    RECTANGLE       reduce using rule 35 (statute -> while .)
    SQUARE          reduce using rule 35 (statute -> while .)
    CIRCLE          reduce using rule 35 (statute -> while .)
    POLIGON         reduce using rule 35 (statute -> while .)
    COLOR           reduce using rule 35 (statute -> while .)
    PENSIZE         reduce using rule 35 (statute -> while .)
    PENFORWARD      reduce using rule 35 (statute -> while .)
    PENBACK         reduce using rule 35 (statute -> while .)
    ROTATE          reduce using rule 35 (statute -> while .)
    WHILE           reduce using rule 35 (statute -> while .)
    RETURN          reduce using rule 35 (statute -> while .)
    PENON           reduce using rule 35 (statute -> while .)
    PENOFF          reduce using rule 35 (statute -> while .)
    RBRACE          reduce using rule 35 (statute -> while .)
    VAR             reduce using rule 35 (statute -> while .)


state 47

    (36) statute -> return .

    ID              reduce using rule 36 (statute -> return .)
    IF              reduce using rule 36 (statute -> return .)
    TRIANGLE        reduce using rule 36 (statute -> return .)
    RECTANGLE       reduce using rule 36 (statute -> return .)
    SQUARE          reduce using rule 36 (statute -> return .)
    CIRCLE          reduce using rule 36 (statute -> return .)
    POLIGON         reduce using rule 36 (statute -> return .)
    COLOR           reduce using rule 36 (statute -> return .)
    PENSIZE         reduce using rule 36 (statute -> return .)
    PENFORWARD      reduce using rule 36 (statute -> return .)
    PENBACK         reduce using rule 36 (statute -> return .)
    ROTATE          reduce using rule 36 (statute -> return .)
    WHILE           reduce using rule 36 (statute -> return .)
    RETURN          reduce using rule 36 (statute -> return .)
    PENON           reduce using rule 36 (statute -> return .)
    PENOFF          reduce using rule 36 (statute -> return .)
    RBRACE          reduce using rule 36 (statute -> return .)
    VAR             reduce using rule 36 (statute -> return .)


state 48

    (37) statute -> penon .

    ID              reduce using rule 37 (statute -> penon .)
    IF              reduce using rule 37 (statute -> penon .)
    TRIANGLE        reduce using rule 37 (statute -> penon .)
    RECTANGLE       reduce using rule 37 (statute -> penon .)
    SQUARE          reduce using rule 37 (statute -> penon .)
    CIRCLE          reduce using rule 37 (statute -> penon .)
    POLIGON         reduce using rule 37 (statute -> penon .)
    COLOR           reduce using rule 37 (statute -> penon .)
    PENSIZE         reduce using rule 37 (statute -> penon .)
    PENFORWARD      reduce using rule 37 (statute -> penon .)
    PENBACK         reduce using rule 37 (statute -> penon .)
    ROTATE          reduce using rule 37 (statute -> penon .)
    WHILE           reduce using rule 37 (statute -> penon .)
    RETURN          reduce using rule 37 (statute -> penon .)
    PENON           reduce using rule 37 (statute -> penon .)
    PENOFF          reduce using rule 37 (statute -> penon .)
    RBRACE          reduce using rule 37 (statute -> penon .)
    VAR             reduce using rule 37 (statute -> penon .)


state 49

    (38) statute -> penoff .

    ID              reduce using rule 38 (statute -> penoff .)
    IF              reduce using rule 38 (statute -> penoff .)
    TRIANGLE        reduce using rule 38 (statute -> penoff .)
    RECTANGLE       reduce using rule 38 (statute -> penoff .)
    SQUARE          reduce using rule 38 (statute -> penoff .)
    CIRCLE          reduce using rule 38 (statute -> penoff .)
    POLIGON         reduce using rule 38 (statute -> penoff .)
    COLOR           reduce using rule 38 (statute -> penoff .)
    PENSIZE         reduce using rule 38 (statute -> penoff .)
    PENFORWARD      reduce using rule 38 (statute -> penoff .)
    PENBACK         reduce using rule 38 (statute -> penoff .)
    ROTATE          reduce using rule 38 (statute -> penoff .)
    WHILE           reduce using rule 38 (statute -> penoff .)
    RETURN          reduce using rule 38 (statute -> penoff .)
    PENON           reduce using rule 38 (statute -> penoff .)
    PENOFF          reduce using rule 38 (statute -> penoff .)
    RBRACE          reduce using rule 38 (statute -> penoff .)
    VAR             reduce using rule 38 (statute -> penoff .)


state 50

    (42) assignment -> ID . cte_id ASSIGN expression SEMICOLON
    (43) assignment -> ID . cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> ID . LPAREN call1 RPAREN SEMICOLON
    (44) cte_id -> .

    LPAREN          shift and go to state 71
    ASSIGN          reduce using rule 44 (cte_id -> .)
    LBRACKET        reduce using rule 44 (cte_id -> .)

    cte_id                         shift and go to state 70

state 51

    (87) condition -> IF . LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if

    LPAREN          shift and go to state 72


state 52

    (65) triangle -> TRIANGLE . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 73


state 53

    (66) rectangle -> RECTANGLE . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 74


state 54

    (64) square -> SQUARE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 75


state 55

    (63) circle -> CIRCLE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 76


state 56

    (67) poligon -> POLIGON . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 77


state 57

    (62) color -> COLOR . LPAREN color_cte RPAREN SEMICOLON

    LPAREN          shift and go to state 78


state 58

    (70) pensize -> PENSIZE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 79


state 59

    (71) penforward -> PENFORWARD . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 80


state 60

    (72) penback -> PENBACK . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 81


state 61

    (68) rotate -> ROTATE . LPAREN exp RPAREN SEMICOLON
    (69) rotate -> ROTATE . LPAREN CTE_STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 82


state 62

    (39) while -> WHILE . while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (40) while_return -> .

    LPAREN          reduce using rule 40 (while_return -> .)

    while_return                   shift and go to state 83

state 63

    (124) return -> RETURN . var_cte SEMICOLON
    (125) return -> RETURN . st_cte SEMICOLON
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (51) st_cte -> . STRING
    (52) st_cte -> . cte_bool
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 86
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    STRING          shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    var_cte                        shift and go to state 84
    st_cte                         shift and go to state 85
    cte_bool                       shift and go to state 89
    call                           shift and go to state 90

state 64

    (73) penon -> PENON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 94


state 65

    (74) penoff -> PENOFF . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 95


state 66

    (53) funcs -> FUNC type ID LPAREN . type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (75) type -> . INT
    (76) type -> . FLOAT
    (77) type -> . STRING
    (78) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 96

state 67

    (54) funcs -> FUNC VOID ID LPAREN . type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (75) type -> . INT
    (76) type -> . FLOAT
    (77) type -> . STRING
    (78) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 97

state 68

    (13) vars2 -> vars2 type save_type . vars3 SEMICOLON
    (15) vars3 -> . ID ASSIGN expression vars4
    (16) vars3 -> . ID list vars4
    (17) vars3 -> . ID vars4

    ID              shift and go to state 99

    vars3                          shift and go to state 98

state 69

    (7) b1 -> vars local_vars b2 .
    (10) b2 -> b2 . statute
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          reduce using rule 7 (b1 -> vars local_vars b2 .)
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    statute                        shift and go to state 32
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 70

    (42) assignment -> ID cte_id . ASSIGN expression SEMICOLON
    (43) assignment -> ID cte_id . LBRACKET exp RBRACKET ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 100
    LBRACKET        shift and go to state 101


state 71

    (120) call -> ID LPAREN . call1 RPAREN SEMICOLON
    (121) call1 -> . ID COMMA call1
    (122) call1 -> . exp
    (123) call1 -> . st_cte
    (103) exp -> . term top_exp exp1
    (51) st_cte -> . STRING
    (52) st_cte -> . cte_bool
    (116) term -> . factor top_factor term1
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 102
    STRING          shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    LPAREN          shift and go to state 103
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88

    call1                          shift and go to state 104
    exp                            shift and go to state 105
    st_cte                         shift and go to state 106
    term                           shift and go to state 107
    cte_bool                       shift and go to state 108
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    call                           shift and go to state 90

state 72

    (87) condition -> IF LPAREN . expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (93) expression -> . exp expression1
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    expression                     shift and go to state 111
    exp                            shift and go to state 112
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 73

    (65) triangle -> TRIANGLE LPAREN . exp COMMA exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 115
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 74

    (66) rectangle -> RECTANGLE LPAREN . exp COMMA exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 116
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 75

    (64) square -> SQUARE LPAREN . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 117
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 76

    (63) circle -> CIRCLE LPAREN . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 118
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 77

    (67) poligon -> POLIGON LPAREN . exp COMMA exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 119
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 78

    (62) color -> COLOR LPAREN . color_cte RPAREN SEMICOLON
    (45) color_cte -> . RED
    (46) color_cte -> . BLUE
    (47) color_cte -> . YELLOW
    (48) color_cte -> . GREEN
    (49) color_cte -> . PINK
    (50) color_cte -> . PURPLE

    RED             shift and go to state 121
    BLUE            shift and go to state 122
    YELLOW          shift and go to state 123
    GREEN           shift and go to state 124
    PINK            shift and go to state 125
    PURPLE          shift and go to state 126

    color_cte                      shift and go to state 120

state 79

    (70) pensize -> PENSIZE LPAREN . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 127
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 80

    (71) penforward -> PENFORWARD LPAREN . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 128
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 81

    (72) penback -> PENBACK LPAREN . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 129
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 82

    (68) rotate -> ROTATE LPAREN . exp RPAREN SEMICOLON
    (69) rotate -> ROTATE LPAREN . CTE_STRING RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    CTE_STRING      shift and go to state 131
    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 130
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 83

    (39) while -> WHILE while_return . LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while

    LPAREN          shift and go to state 132


state 84

    (124) return -> RETURN var_cte . SEMICOLON

    SEMICOLON       shift and go to state 133


state 85

    (125) return -> RETURN st_cte . SEMICOLON

    SEMICOLON       shift and go to state 134


state 86

    (79) var_cte -> ID .
    (83) var_cte -> ID . list
    (120) call -> ID . LPAREN call1 RPAREN SEMICOLON
    (21) list -> . LIST

    SEMICOLON       reduce using rule 79 (var_cte -> ID .)
    LPAREN          shift and go to state 71
    LIST            shift and go to state 136

    list                           shift and go to state 135

state 87

    (80) var_cte -> CTE_INT .

    SEMICOLON       reduce using rule 80 (var_cte -> CTE_INT .)
    DIVIDE          reduce using rule 80 (var_cte -> CTE_INT .)
    TIMES           reduce using rule 80 (var_cte -> CTE_INT .)
    MINUS           reduce using rule 80 (var_cte -> CTE_INT .)
    PLUS            reduce using rule 80 (var_cte -> CTE_INT .)
    RPAREN          reduce using rule 80 (var_cte -> CTE_INT .)
    LESSER          reduce using rule 80 (var_cte -> CTE_INT .)
    GREATER         reduce using rule 80 (var_cte -> CTE_INT .)
    EQUAL           reduce using rule 80 (var_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 80 (var_cte -> CTE_INT .)
    GREATEROREQUAL  reduce using rule 80 (var_cte -> CTE_INT .)
    LESSEROREQUAL   reduce using rule 80 (var_cte -> CTE_INT .)
    COMMA           reduce using rule 80 (var_cte -> CTE_INT .)
    RBRACKET        reduce using rule 80 (var_cte -> CTE_INT .)


state 88

    (81) var_cte -> CTE_FLOAT .

    SEMICOLON       reduce using rule 81 (var_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 81 (var_cte -> CTE_FLOAT .)
    TIMES           reduce using rule 81 (var_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 81 (var_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 81 (var_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 81 (var_cte -> CTE_FLOAT .)
    LESSER          reduce using rule 81 (var_cte -> CTE_FLOAT .)
    GREATER         reduce using rule 81 (var_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 81 (var_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 81 (var_cte -> CTE_FLOAT .)
    GREATEROREQUAL  reduce using rule 81 (var_cte -> CTE_FLOAT .)
    LESSEROREQUAL   reduce using rule 81 (var_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 81 (var_cte -> CTE_FLOAT .)
    RBRACKET        reduce using rule 81 (var_cte -> CTE_FLOAT .)


state 89

    (82) var_cte -> cte_bool .
    (52) st_cte -> cte_bool .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 52 (st_cte -> cte_bool .)
    SEMICOLON       reduce using rule 52 (st_cte -> cte_bool .)

  ! SEMICOLON       [ reduce using rule 82 (var_cte -> cte_bool .) ]


state 90

    (84) var_cte -> call .

    SEMICOLON       reduce using rule 84 (var_cte -> call .)
    DIVIDE          reduce using rule 84 (var_cte -> call .)
    TIMES           reduce using rule 84 (var_cte -> call .)
    MINUS           reduce using rule 84 (var_cte -> call .)
    PLUS            reduce using rule 84 (var_cte -> call .)
    RPAREN          reduce using rule 84 (var_cte -> call .)
    LESSER          reduce using rule 84 (var_cte -> call .)
    GREATER         reduce using rule 84 (var_cte -> call .)
    EQUAL           reduce using rule 84 (var_cte -> call .)
    NOTEQUAL        reduce using rule 84 (var_cte -> call .)
    GREATEROREQUAL  reduce using rule 84 (var_cte -> call .)
    LESSEROREQUAL   reduce using rule 84 (var_cte -> call .)
    COMMA           reduce using rule 84 (var_cte -> call .)
    RBRACKET        reduce using rule 84 (var_cte -> call .)


state 91

    (51) st_cte -> STRING .

    SEMICOLON       reduce using rule 51 (st_cte -> STRING .)
    RPAREN          reduce using rule 51 (st_cte -> STRING .)


state 92

    (85) cte_bool -> TRUE .

    SEMICOLON       reduce using rule 85 (cte_bool -> TRUE .)
    RPAREN          reduce using rule 85 (cte_bool -> TRUE .)
    DIVIDE          reduce using rule 85 (cte_bool -> TRUE .)
    TIMES           reduce using rule 85 (cte_bool -> TRUE .)
    MINUS           reduce using rule 85 (cte_bool -> TRUE .)
    PLUS            reduce using rule 85 (cte_bool -> TRUE .)
    LESSER          reduce using rule 85 (cte_bool -> TRUE .)
    GREATER         reduce using rule 85 (cte_bool -> TRUE .)
    EQUAL           reduce using rule 85 (cte_bool -> TRUE .)
    NOTEQUAL        reduce using rule 85 (cte_bool -> TRUE .)
    GREATEROREQUAL  reduce using rule 85 (cte_bool -> TRUE .)
    LESSEROREQUAL   reduce using rule 85 (cte_bool -> TRUE .)
    COMMA           reduce using rule 85 (cte_bool -> TRUE .)
    RBRACKET        reduce using rule 85 (cte_bool -> TRUE .)


state 93

    (86) cte_bool -> FALSE .

    SEMICOLON       reduce using rule 86 (cte_bool -> FALSE .)
    RPAREN          reduce using rule 86 (cte_bool -> FALSE .)
    DIVIDE          reduce using rule 86 (cte_bool -> FALSE .)
    TIMES           reduce using rule 86 (cte_bool -> FALSE .)
    MINUS           reduce using rule 86 (cte_bool -> FALSE .)
    PLUS            reduce using rule 86 (cte_bool -> FALSE .)
    LESSER          reduce using rule 86 (cte_bool -> FALSE .)
    GREATER         reduce using rule 86 (cte_bool -> FALSE .)
    EQUAL           reduce using rule 86 (cte_bool -> FALSE .)
    NOTEQUAL        reduce using rule 86 (cte_bool -> FALSE .)
    GREATEROREQUAL  reduce using rule 86 (cte_bool -> FALSE .)
    LESSEROREQUAL   reduce using rule 86 (cte_bool -> FALSE .)
    COMMA           reduce using rule 86 (cte_bool -> FALSE .)
    RBRACKET        reduce using rule 86 (cte_bool -> FALSE .)


state 94

    (73) penon -> PENON LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 137


state 95

    (74) penoff -> PENOFF LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 138


state 96

    (53) funcs -> FUNC type ID LPAREN type . ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 139


state 97

    (54) funcs -> FUNC VOID ID LPAREN type . ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 140


state 98

    (13) vars2 -> vars2 type save_type vars3 . SEMICOLON

    SEMICOLON       shift and go to state 141


state 99

    (15) vars3 -> ID . ASSIGN expression vars4
    (16) vars3 -> ID . list vars4
    (17) vars3 -> ID . vars4
    (21) list -> . LIST
    (18) vars4 -> . vars4 COMMA ID
    (19) vars4 -> . empty
    (126) empty -> .

    ASSIGN          shift and go to state 142
    LIST            shift and go to state 136
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)

    vars4                          shift and go to state 143
    list                           shift and go to state 144
    empty                          shift and go to state 145

state 100

    (42) assignment -> ID cte_id ASSIGN . expression SEMICOLON
    (93) expression -> . exp expression1
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    expression                     shift and go to state 146
    exp                            shift and go to state 112
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 101

    (43) assignment -> ID cte_id LBRACKET . exp RBRACKET ASSIGN expression SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 147
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 102

    (121) call1 -> ID . COMMA call1
    (112) factor -> ID . push_id
    (79) var_cte -> ID .
    (83) var_cte -> ID . list
    (120) call -> ID . LPAREN call1 RPAREN SEMICOLON
    (115) push_id -> .
    (21) list -> . LIST

  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (var_cte -> ID .)
    COMMA           shift and go to state 148
    DIVIDE          reduce using rule 79 (var_cte -> ID .)
    TIMES           reduce using rule 79 (var_cte -> ID .)
    MINUS           reduce using rule 79 (var_cte -> ID .)
    PLUS            reduce using rule 79 (var_cte -> ID .)
    RPAREN          reduce using rule 79 (var_cte -> ID .)
    LPAREN          shift and go to state 71
    LIST            shift and go to state 136

  ! DIVIDE          [ reduce using rule 115 (push_id -> .) ]
  ! TIMES           [ reduce using rule 115 (push_id -> .) ]
  ! MINUS           [ reduce using rule 115 (push_id -> .) ]
  ! PLUS            [ reduce using rule 115 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 115 (push_id -> .) ]

    push_id                        shift and go to state 149
    list                           shift and go to state 135

state 103

    (110) factor -> LPAREN . false_bottom expression RPAREN end_par
    (113) false_bottom -> .

    LPAREN          reduce using rule 113 (false_bottom -> .)
    ID              reduce using rule 113 (false_bottom -> .)
    CTE_INT         reduce using rule 113 (false_bottom -> .)
    CTE_FLOAT       reduce using rule 113 (false_bottom -> .)
    TRUE            reduce using rule 113 (false_bottom -> .)
    FALSE           reduce using rule 113 (false_bottom -> .)

    false_bottom                   shift and go to state 150

state 104

    (120) call -> ID LPAREN call1 . RPAREN SEMICOLON

    RPAREN          shift and go to state 151


state 105

    (122) call1 -> exp .

    RPAREN          reduce using rule 122 (call1 -> exp .)


state 106

    (123) call1 -> st_cte .

    RPAREN          reduce using rule 123 (call1 -> st_cte .)


state 107

    (103) exp -> term . top_exp exp1
    (107) top_exp -> .

    MINUS           reduce using rule 107 (top_exp -> .)
    PLUS            reduce using rule 107 (top_exp -> .)
    RPAREN          reduce using rule 107 (top_exp -> .)
    LESSER          reduce using rule 107 (top_exp -> .)
    GREATER         reduce using rule 107 (top_exp -> .)
    EQUAL           reduce using rule 107 (top_exp -> .)
    NOTEQUAL        reduce using rule 107 (top_exp -> .)
    GREATEROREQUAL  reduce using rule 107 (top_exp -> .)
    LESSEROREQUAL   reduce using rule 107 (top_exp -> .)
    COMMA           reduce using rule 107 (top_exp -> .)
    SEMICOLON       reduce using rule 107 (top_exp -> .)
    RBRACKET        reduce using rule 107 (top_exp -> .)

    top_exp                        shift and go to state 152

state 108

    (52) st_cte -> cte_bool .
    (82) var_cte -> cte_bool .

  ! reduce/reduce conflict for RPAREN resolved using rule 52 (st_cte -> cte_bool .)
    RPAREN          reduce using rule 52 (st_cte -> cte_bool .)
    DIVIDE          reduce using rule 82 (var_cte -> cte_bool .)
    TIMES           reduce using rule 82 (var_cte -> cte_bool .)
    MINUS           reduce using rule 82 (var_cte -> cte_bool .)
    PLUS            reduce using rule 82 (var_cte -> cte_bool .)

  ! RPAREN          [ reduce using rule 82 (var_cte -> cte_bool .) ]


state 109

    (116) term -> factor . top_factor term1
    (109) top_factor -> .

    DIVIDE          reduce using rule 109 (top_factor -> .)
    TIMES           reduce using rule 109 (top_factor -> .)
    MINUS           reduce using rule 109 (top_factor -> .)
    PLUS            reduce using rule 109 (top_factor -> .)
    RPAREN          reduce using rule 109 (top_factor -> .)
    LESSER          reduce using rule 109 (top_factor -> .)
    GREATER         reduce using rule 109 (top_factor -> .)
    EQUAL           reduce using rule 109 (top_factor -> .)
    NOTEQUAL        reduce using rule 109 (top_factor -> .)
    GREATEROREQUAL  reduce using rule 109 (top_factor -> .)
    LESSEROREQUAL   reduce using rule 109 (top_factor -> .)
    COMMA           reduce using rule 109 (top_factor -> .)
    SEMICOLON       reduce using rule 109 (top_factor -> .)
    RBRACKET        reduce using rule 109 (top_factor -> .)

    top_factor                     shift and go to state 153

state 110

    (111) factor -> var_cte .

    DIVIDE          reduce using rule 111 (factor -> var_cte .)
    TIMES           reduce using rule 111 (factor -> var_cte .)
    MINUS           reduce using rule 111 (factor -> var_cte .)
    PLUS            reduce using rule 111 (factor -> var_cte .)
    RPAREN          reduce using rule 111 (factor -> var_cte .)
    LESSER          reduce using rule 111 (factor -> var_cte .)
    GREATER         reduce using rule 111 (factor -> var_cte .)
    EQUAL           reduce using rule 111 (factor -> var_cte .)
    NOTEQUAL        reduce using rule 111 (factor -> var_cte .)
    GREATEROREQUAL  reduce using rule 111 (factor -> var_cte .)
    LESSEROREQUAL   reduce using rule 111 (factor -> var_cte .)
    COMMA           reduce using rule 111 (factor -> var_cte .)
    SEMICOLON       reduce using rule 111 (factor -> var_cte .)
    RBRACKET        reduce using rule 111 (factor -> var_cte .)


state 111

    (87) condition -> IF LPAREN expression . RPAREN type_check LBRACE b2 RBRACE condition1 end_if

    RPAREN          shift and go to state 154


state 112

    (93) expression -> exp . expression1
    (94) expression1 -> . LESSER relop exp top_relop
    (95) expression1 -> . GREATER relop exp top_relop
    (96) expression1 -> . EQUAL relop exp top_relop
    (97) expression1 -> . NOTEQUAL relop exp top_relop
    (98) expression1 -> . GREATEROREQUAL relop exp top_relop
    (99) expression1 -> . LESSEROREQUAL relop exp top_relop
    (100) expression1 -> . empty
    (126) empty -> .

    LESSER          shift and go to state 156
    GREATER         shift and go to state 157
    EQUAL           shift and go to state 158
    NOTEQUAL        shift and go to state 159
    GREATEROREQUAL  shift and go to state 160
    LESSEROREQUAL   shift and go to state 161
    RPAREN          reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    expression1                    shift and go to state 155
    empty                          shift and go to state 162

state 113

    (112) factor -> ID . push_id
    (79) var_cte -> ID .
    (83) var_cte -> ID . list
    (120) call -> ID . LPAREN call1 RPAREN SEMICOLON
    (115) push_id -> .
    (21) list -> . LIST

  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for LESSER resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for EQUAL resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for GREATEROREQUAL resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for LESSEROREQUAL resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 79 (var_cte -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 79 (var_cte -> ID .)
    DIVIDE          reduce using rule 79 (var_cte -> ID .)
    TIMES           reduce using rule 79 (var_cte -> ID .)
    MINUS           reduce using rule 79 (var_cte -> ID .)
    PLUS            reduce using rule 79 (var_cte -> ID .)
    LESSER          reduce using rule 79 (var_cte -> ID .)
    GREATER         reduce using rule 79 (var_cte -> ID .)
    EQUAL           reduce using rule 79 (var_cte -> ID .)
    NOTEQUAL        reduce using rule 79 (var_cte -> ID .)
    GREATEROREQUAL  reduce using rule 79 (var_cte -> ID .)
    LESSEROREQUAL   reduce using rule 79 (var_cte -> ID .)
    RPAREN          reduce using rule 79 (var_cte -> ID .)
    COMMA           reduce using rule 79 (var_cte -> ID .)
    SEMICOLON       reduce using rule 79 (var_cte -> ID .)
    RBRACKET        reduce using rule 79 (var_cte -> ID .)
    LPAREN          shift and go to state 71
    LIST            shift and go to state 136

  ! DIVIDE          [ reduce using rule 115 (push_id -> .) ]
  ! TIMES           [ reduce using rule 115 (push_id -> .) ]
  ! MINUS           [ reduce using rule 115 (push_id -> .) ]
  ! PLUS            [ reduce using rule 115 (push_id -> .) ]
  ! LESSER          [ reduce using rule 115 (push_id -> .) ]
  ! GREATER         [ reduce using rule 115 (push_id -> .) ]
  ! EQUAL           [ reduce using rule 115 (push_id -> .) ]
  ! NOTEQUAL        [ reduce using rule 115 (push_id -> .) ]
  ! GREATEROREQUAL  [ reduce using rule 115 (push_id -> .) ]
  ! LESSEROREQUAL   [ reduce using rule 115 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 115 (push_id -> .) ]
  ! COMMA           [ reduce using rule 115 (push_id -> .) ]
  ! SEMICOLON       [ reduce using rule 115 (push_id -> .) ]
  ! RBRACKET        [ reduce using rule 115 (push_id -> .) ]

    push_id                        shift and go to state 149
    list                           shift and go to state 135

state 114

    (82) var_cte -> cte_bool .

    DIVIDE          reduce using rule 82 (var_cte -> cte_bool .)
    TIMES           reduce using rule 82 (var_cte -> cte_bool .)
    MINUS           reduce using rule 82 (var_cte -> cte_bool .)
    PLUS            reduce using rule 82 (var_cte -> cte_bool .)
    LESSER          reduce using rule 82 (var_cte -> cte_bool .)
    GREATER         reduce using rule 82 (var_cte -> cte_bool .)
    EQUAL           reduce using rule 82 (var_cte -> cte_bool .)
    NOTEQUAL        reduce using rule 82 (var_cte -> cte_bool .)
    GREATEROREQUAL  reduce using rule 82 (var_cte -> cte_bool .)
    LESSEROREQUAL   reduce using rule 82 (var_cte -> cte_bool .)
    RPAREN          reduce using rule 82 (var_cte -> cte_bool .)
    COMMA           reduce using rule 82 (var_cte -> cte_bool .)
    SEMICOLON       reduce using rule 82 (var_cte -> cte_bool .)
    RBRACKET        reduce using rule 82 (var_cte -> cte_bool .)


state 115

    (65) triangle -> TRIANGLE LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 163


state 116

    (66) rectangle -> RECTANGLE LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 164


state 117

    (64) square -> SQUARE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 165


state 118

    (63) circle -> CIRCLE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 166


state 119

    (67) poligon -> POLIGON LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 167


state 120

    (62) color -> COLOR LPAREN color_cte . RPAREN SEMICOLON

    RPAREN          shift and go to state 168


state 121

    (45) color_cte -> RED .

    RPAREN          reduce using rule 45 (color_cte -> RED .)


state 122

    (46) color_cte -> BLUE .

    RPAREN          reduce using rule 46 (color_cte -> BLUE .)


state 123

    (47) color_cte -> YELLOW .

    RPAREN          reduce using rule 47 (color_cte -> YELLOW .)


state 124

    (48) color_cte -> GREEN .

    RPAREN          reduce using rule 48 (color_cte -> GREEN .)


state 125

    (49) color_cte -> PINK .

    RPAREN          reduce using rule 49 (color_cte -> PINK .)


state 126

    (50) color_cte -> PURPLE .

    RPAREN          reduce using rule 50 (color_cte -> PURPLE .)


state 127

    (70) pensize -> PENSIZE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 169


state 128

    (71) penforward -> PENFORWARD LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 170


state 129

    (72) penback -> PENBACK LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 171


state 130

    (68) rotate -> ROTATE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 172


state 131

    (69) rotate -> ROTATE LPAREN CTE_STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 173


state 132

    (39) while -> WHILE while_return LPAREN . type_check expression RPAREN LBRACE b2 RBRACE end_while
    (90) type_check -> .

    LPAREN          reduce using rule 90 (type_check -> .)
    ID              reduce using rule 90 (type_check -> .)
    CTE_INT         reduce using rule 90 (type_check -> .)
    CTE_FLOAT       reduce using rule 90 (type_check -> .)
    TRUE            reduce using rule 90 (type_check -> .)
    FALSE           reduce using rule 90 (type_check -> .)

    type_check                     shift and go to state 174

state 133

    (124) return -> RETURN var_cte SEMICOLON .

    ID              reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    IF              reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    TRIANGLE        reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    RECTANGLE       reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    SQUARE          reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    CIRCLE          reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    POLIGON         reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    COLOR           reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    PENSIZE         reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    PENFORWARD      reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    PENBACK         reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    ROTATE          reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    WHILE           reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    RETURN          reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    PENON           reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    PENOFF          reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    RBRACE          reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)
    VAR             reduce using rule 124 (return -> RETURN var_cte SEMICOLON .)


state 134

    (125) return -> RETURN st_cte SEMICOLON .

    ID              reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    IF              reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    TRIANGLE        reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    RECTANGLE       reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    SQUARE          reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    CIRCLE          reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    POLIGON         reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    COLOR           reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    PENSIZE         reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    PENFORWARD      reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    PENBACK         reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    ROTATE          reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    WHILE           reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    RETURN          reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    PENON           reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    PENOFF          reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    RBRACE          reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)
    VAR             reduce using rule 125 (return -> RETURN st_cte SEMICOLON .)


state 135

    (83) var_cte -> ID list .

    SEMICOLON       reduce using rule 83 (var_cte -> ID list .)
    DIVIDE          reduce using rule 83 (var_cte -> ID list .)
    TIMES           reduce using rule 83 (var_cte -> ID list .)
    MINUS           reduce using rule 83 (var_cte -> ID list .)
    PLUS            reduce using rule 83 (var_cte -> ID list .)
    RPAREN          reduce using rule 83 (var_cte -> ID list .)
    LESSER          reduce using rule 83 (var_cte -> ID list .)
    GREATER         reduce using rule 83 (var_cte -> ID list .)
    EQUAL           reduce using rule 83 (var_cte -> ID list .)
    NOTEQUAL        reduce using rule 83 (var_cte -> ID list .)
    GREATEROREQUAL  reduce using rule 83 (var_cte -> ID list .)
    LESSEROREQUAL   reduce using rule 83 (var_cte -> ID list .)
    COMMA           reduce using rule 83 (var_cte -> ID list .)
    RBRACKET        reduce using rule 83 (var_cte -> ID list .)


state 136

    (21) list -> LIST .

    SEMICOLON       reduce using rule 21 (list -> LIST .)
    COMMA           reduce using rule 21 (list -> LIST .)
    DIVIDE          reduce using rule 21 (list -> LIST .)
    TIMES           reduce using rule 21 (list -> LIST .)
    MINUS           reduce using rule 21 (list -> LIST .)
    PLUS            reduce using rule 21 (list -> LIST .)
    RPAREN          reduce using rule 21 (list -> LIST .)
    LESSER          reduce using rule 21 (list -> LIST .)
    GREATER         reduce using rule 21 (list -> LIST .)
    EQUAL           reduce using rule 21 (list -> LIST .)
    NOTEQUAL        reduce using rule 21 (list -> LIST .)
    GREATEROREQUAL  reduce using rule 21 (list -> LIST .)
    LESSEROREQUAL   reduce using rule 21 (list -> LIST .)
    RBRACKET        reduce using rule 21 (list -> LIST .)


state 137

    (73) penon -> PENON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 175


state 138

    (74) penoff -> PENOFF LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 176


state 139

    (53) funcs -> FUNC type ID LPAREN type ID . funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs1 -> . funcs1 COMMA type ID
    (56) funcs1 -> . empty
    (126) empty -> .

    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    funcs1                         shift and go to state 177
    empty                          shift and go to state 178

state 140

    (54) funcs -> FUNC VOID ID LPAREN type ID . funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs1 -> . funcs1 COMMA type ID
    (56) funcs1 -> . empty
    (126) empty -> .

    RPAREN          reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)

    funcs1                         shift and go to state 179
    empty                          shift and go to state 178

state 141

    (13) vars2 -> vars2 type save_type vars3 SEMICOLON .

    INT             reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    FLOAT           reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    STRING          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    BOOL            reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    DAVINCI         reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    FUNC            reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    VAR             reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    ID              reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    IF              reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    TRIANGLE        reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    RECTANGLE       reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    SQUARE          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    CIRCLE          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    POLIGON         reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    COLOR           reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    PENSIZE         reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    PENFORWARD      reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    PENBACK         reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    ROTATE          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    WHILE           reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    RETURN          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    PENON           reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    PENOFF          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)
    RBRACE          reduce using rule 13 (vars2 -> vars2 type save_type vars3 SEMICOLON .)


state 142

    (15) vars3 -> ID ASSIGN . expression vars4
    (93) expression -> . exp expression1
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    expression                     shift and go to state 180
    exp                            shift and go to state 112
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 143

    (17) vars3 -> ID vars4 .
    (18) vars4 -> vars4 . COMMA ID

    SEMICOLON       reduce using rule 17 (vars3 -> ID vars4 .)
    COMMA           shift and go to state 181


state 144

    (16) vars3 -> ID list . vars4
    (18) vars4 -> . vars4 COMMA ID
    (19) vars4 -> . empty
    (126) empty -> .

    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)

    vars4                          shift and go to state 182
    empty                          shift and go to state 145

state 145

    (19) vars4 -> empty .

    COMMA           reduce using rule 19 (vars4 -> empty .)
    SEMICOLON       reduce using rule 19 (vars4 -> empty .)


state 146

    (42) assignment -> ID cte_id ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 183


state 147

    (43) assignment -> ID cte_id LBRACKET exp . RBRACKET ASSIGN expression SEMICOLON

    RBRACKET        shift and go to state 184


state 148

    (121) call1 -> ID COMMA . call1
    (121) call1 -> . ID COMMA call1
    (122) call1 -> . exp
    (123) call1 -> . st_cte
    (103) exp -> . term top_exp exp1
    (51) st_cte -> . STRING
    (52) st_cte -> . cte_bool
    (116) term -> . factor top_factor term1
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    ID              shift and go to state 102
    STRING          shift and go to state 91
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93
    LPAREN          shift and go to state 103
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88

    call1                          shift and go to state 185
    exp                            shift and go to state 105
    st_cte                         shift and go to state 106
    term                           shift and go to state 107
    cte_bool                       shift and go to state 108
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    call                           shift and go to state 90

state 149

    (112) factor -> ID push_id .

    DIVIDE          reduce using rule 112 (factor -> ID push_id .)
    TIMES           reduce using rule 112 (factor -> ID push_id .)
    MINUS           reduce using rule 112 (factor -> ID push_id .)
    PLUS            reduce using rule 112 (factor -> ID push_id .)
    RPAREN          reduce using rule 112 (factor -> ID push_id .)
    LESSER          reduce using rule 112 (factor -> ID push_id .)
    GREATER         reduce using rule 112 (factor -> ID push_id .)
    EQUAL           reduce using rule 112 (factor -> ID push_id .)
    NOTEQUAL        reduce using rule 112 (factor -> ID push_id .)
    GREATEROREQUAL  reduce using rule 112 (factor -> ID push_id .)
    LESSEROREQUAL   reduce using rule 112 (factor -> ID push_id .)
    COMMA           reduce using rule 112 (factor -> ID push_id .)
    SEMICOLON       reduce using rule 112 (factor -> ID push_id .)
    RBRACKET        reduce using rule 112 (factor -> ID push_id .)


state 150

    (110) factor -> LPAREN false_bottom . expression RPAREN end_par
    (93) expression -> . exp expression1
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    expression                     shift and go to state 186
    exp                            shift and go to state 112
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 151

    (120) call -> ID LPAREN call1 RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 187


state 152

    (103) exp -> term top_exp . exp1
    (104) exp1 -> . MINUS push_sign exp
    (105) exp1 -> . PLUS push_sign exp
    (106) exp1 -> . empty
    (126) empty -> .

    MINUS           shift and go to state 189
    PLUS            shift and go to state 190
    RPAREN          reduce using rule 126 (empty -> .)
    LESSER          reduce using rule 126 (empty -> .)
    GREATER         reduce using rule 126 (empty -> .)
    EQUAL           reduce using rule 126 (empty -> .)
    NOTEQUAL        reduce using rule 126 (empty -> .)
    GREATEROREQUAL  reduce using rule 126 (empty -> .)
    LESSEROREQUAL   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)

    exp1                           shift and go to state 188
    empty                          shift and go to state 191

state 153

    (116) term -> factor top_factor . term1
    (117) term1 -> . DIVIDE push_sign term
    (118) term1 -> . TIMES push_sign term
    (119) term1 -> . empty
    (126) empty -> .

    DIVIDE          shift and go to state 193
    TIMES           shift and go to state 194
    MINUS           reduce using rule 126 (empty -> .)
    PLUS            reduce using rule 126 (empty -> .)
    RPAREN          reduce using rule 126 (empty -> .)
    LESSER          reduce using rule 126 (empty -> .)
    GREATER         reduce using rule 126 (empty -> .)
    EQUAL           reduce using rule 126 (empty -> .)
    NOTEQUAL        reduce using rule 126 (empty -> .)
    GREATEROREQUAL  reduce using rule 126 (empty -> .)
    LESSEROREQUAL   reduce using rule 126 (empty -> .)
    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)
    RBRACKET        reduce using rule 126 (empty -> .)

    term1                          shift and go to state 192
    empty                          shift and go to state 195

state 154

    (87) condition -> IF LPAREN expression RPAREN . type_check LBRACE b2 RBRACE condition1 end_if
    (90) type_check -> .

    LBRACE          reduce using rule 90 (type_check -> .)

    type_check                     shift and go to state 196

state 155

    (93) expression -> exp expression1 .

    RPAREN          reduce using rule 93 (expression -> exp expression1 .)
    SEMICOLON       reduce using rule 93 (expression -> exp expression1 .)
    COMMA           reduce using rule 93 (expression -> exp expression1 .)


state 156

    (94) expression1 -> LESSER . relop exp top_relop
    (101) relop -> .

    LPAREN          reduce using rule 101 (relop -> .)
    ID              reduce using rule 101 (relop -> .)
    CTE_INT         reduce using rule 101 (relop -> .)
    CTE_FLOAT       reduce using rule 101 (relop -> .)
    TRUE            reduce using rule 101 (relop -> .)
    FALSE           reduce using rule 101 (relop -> .)

    relop                          shift and go to state 197

state 157

    (95) expression1 -> GREATER . relop exp top_relop
    (101) relop -> .

    LPAREN          reduce using rule 101 (relop -> .)
    ID              reduce using rule 101 (relop -> .)
    CTE_INT         reduce using rule 101 (relop -> .)
    CTE_FLOAT       reduce using rule 101 (relop -> .)
    TRUE            reduce using rule 101 (relop -> .)
    FALSE           reduce using rule 101 (relop -> .)

    relop                          shift and go to state 198

state 158

    (96) expression1 -> EQUAL . relop exp top_relop
    (101) relop -> .

    LPAREN          reduce using rule 101 (relop -> .)
    ID              reduce using rule 101 (relop -> .)
    CTE_INT         reduce using rule 101 (relop -> .)
    CTE_FLOAT       reduce using rule 101 (relop -> .)
    TRUE            reduce using rule 101 (relop -> .)
    FALSE           reduce using rule 101 (relop -> .)

    relop                          shift and go to state 199

state 159

    (97) expression1 -> NOTEQUAL . relop exp top_relop
    (101) relop -> .

    LPAREN          reduce using rule 101 (relop -> .)
    ID              reduce using rule 101 (relop -> .)
    CTE_INT         reduce using rule 101 (relop -> .)
    CTE_FLOAT       reduce using rule 101 (relop -> .)
    TRUE            reduce using rule 101 (relop -> .)
    FALSE           reduce using rule 101 (relop -> .)

    relop                          shift and go to state 200

state 160

    (98) expression1 -> GREATEROREQUAL . relop exp top_relop
    (101) relop -> .

    LPAREN          reduce using rule 101 (relop -> .)
    ID              reduce using rule 101 (relop -> .)
    CTE_INT         reduce using rule 101 (relop -> .)
    CTE_FLOAT       reduce using rule 101 (relop -> .)
    TRUE            reduce using rule 101 (relop -> .)
    FALSE           reduce using rule 101 (relop -> .)

    relop                          shift and go to state 201

state 161

    (99) expression1 -> LESSEROREQUAL . relop exp top_relop
    (101) relop -> .

    LPAREN          reduce using rule 101 (relop -> .)
    ID              reduce using rule 101 (relop -> .)
    CTE_INT         reduce using rule 101 (relop -> .)
    CTE_FLOAT       reduce using rule 101 (relop -> .)
    TRUE            reduce using rule 101 (relop -> .)
    FALSE           reduce using rule 101 (relop -> .)

    relop                          shift and go to state 202

state 162

    (100) expression1 -> empty .

    RPAREN          reduce using rule 100 (expression1 -> empty .)
    SEMICOLON       reduce using rule 100 (expression1 -> empty .)
    COMMA           reduce using rule 100 (expression1 -> empty .)


state 163

    (65) triangle -> TRIANGLE LPAREN exp COMMA . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 203
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 164

    (66) rectangle -> RECTANGLE LPAREN exp COMMA . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 204
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 165

    (64) square -> SQUARE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 205


state 166

    (63) circle -> CIRCLE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 206


state 167

    (67) poligon -> POLIGON LPAREN exp COMMA . exp RPAREN SEMICOLON
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 207
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 168

    (62) color -> COLOR LPAREN color_cte RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 208


state 169

    (70) pensize -> PENSIZE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 209


state 170

    (71) penforward -> PENFORWARD LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 171

    (72) penback -> PENBACK LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 211


state 172

    (68) rotate -> ROTATE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 212


state 173

    (69) rotate -> ROTATE LPAREN CTE_STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 174

    (39) while -> WHILE while_return LPAREN type_check . expression RPAREN LBRACE b2 RBRACE end_while
    (93) expression -> . exp expression1
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    expression                     shift and go to state 214
    exp                            shift and go to state 112
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 175

    (73) penon -> PENON LPAREN RPAREN SEMICOLON .

    ID              reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    SQUARE          reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    POLIGON         reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    COLOR           reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENBACK         reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    ROTATE          reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENON           reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENOFF          reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 73 (penon -> PENON LPAREN RPAREN SEMICOLON .)


state 176

    (74) penoff -> PENOFF LPAREN RPAREN SEMICOLON .

    ID              reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    SQUARE          reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    POLIGON         reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    COLOR           reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENBACK         reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    ROTATE          reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENON           reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENOFF          reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 74 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)


state 177

    (53) funcs -> FUNC type ID LPAREN type ID funcs1 . RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs1 -> funcs1 . COMMA type ID

    RPAREN          shift and go to state 215
    COMMA           shift and go to state 216


state 178

    (56) funcs1 -> empty .

    RPAREN          reduce using rule 56 (funcs1 -> empty .)
    COMMA           reduce using rule 56 (funcs1 -> empty .)


state 179

    (54) funcs -> FUNC VOID ID LPAREN type ID funcs1 . RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs1 -> funcs1 . COMMA type ID

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 216


state 180

    (15) vars3 -> ID ASSIGN expression . vars4
    (18) vars4 -> . vars4 COMMA ID
    (19) vars4 -> . empty
    (126) empty -> .

    COMMA           reduce using rule 126 (empty -> .)
    SEMICOLON       reduce using rule 126 (empty -> .)

    vars4                          shift and go to state 218
    empty                          shift and go to state 145

state 181

    (18) vars4 -> vars4 COMMA . ID

    ID              shift and go to state 219


state 182

    (16) vars3 -> ID list vars4 .
    (18) vars4 -> vars4 . COMMA ID

    SEMICOLON       reduce using rule 16 (vars3 -> ID list vars4 .)
    COMMA           shift and go to state 181


state 183

    (42) assignment -> ID cte_id ASSIGN expression SEMICOLON .

    ID              reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    IF              reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    TRIANGLE        reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    RECTANGLE       reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    SQUARE          reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    CIRCLE          reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    POLIGON         reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    COLOR           reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENSIZE         reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENFORWARD      reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENBACK         reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    ROTATE          reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENON           reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENOFF          reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 42 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)


state 184

    (43) assignment -> ID cte_id LBRACKET exp RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 220


state 185

    (121) call1 -> ID COMMA call1 .

    RPAREN          reduce using rule 121 (call1 -> ID COMMA call1 .)


state 186

    (110) factor -> LPAREN false_bottom expression . RPAREN end_par

    RPAREN          shift and go to state 221


state 187

    (120) call -> ID LPAREN call1 RPAREN SEMICOLON .

    ID              reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    IF              reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    SQUARE          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    POLIGON         reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    COLOR           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    PENBACK         reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    ROTATE          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    WHILE           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    RETURN          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    PENON           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    PENOFF          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    RBRACE          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    DIVIDE          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    TIMES           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    MINUS           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    PLUS            reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    RPAREN          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    LESSER          reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    GREATER         reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    EQUAL           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    NOTEQUAL        reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    GREATEROREQUAL  reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    LESSEROREQUAL   reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    COMMA           reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    RBRACKET        reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)
    VAR             reduce using rule 120 (call -> ID LPAREN call1 RPAREN SEMICOLON .)


state 188

    (103) exp -> term top_exp exp1 .

    RPAREN          reduce using rule 103 (exp -> term top_exp exp1 .)
    LESSER          reduce using rule 103 (exp -> term top_exp exp1 .)
    GREATER         reduce using rule 103 (exp -> term top_exp exp1 .)
    EQUAL           reduce using rule 103 (exp -> term top_exp exp1 .)
    NOTEQUAL        reduce using rule 103 (exp -> term top_exp exp1 .)
    GREATEROREQUAL  reduce using rule 103 (exp -> term top_exp exp1 .)
    LESSEROREQUAL   reduce using rule 103 (exp -> term top_exp exp1 .)
    COMMA           reduce using rule 103 (exp -> term top_exp exp1 .)
    SEMICOLON       reduce using rule 103 (exp -> term top_exp exp1 .)
    RBRACKET        reduce using rule 103 (exp -> term top_exp exp1 .)


state 189

    (104) exp1 -> MINUS . push_sign exp
    (108) push_sign -> .

    LPAREN          reduce using rule 108 (push_sign -> .)
    ID              reduce using rule 108 (push_sign -> .)
    CTE_INT         reduce using rule 108 (push_sign -> .)
    CTE_FLOAT       reduce using rule 108 (push_sign -> .)
    TRUE            reduce using rule 108 (push_sign -> .)
    FALSE           reduce using rule 108 (push_sign -> .)

    push_sign                      shift and go to state 222

state 190

    (105) exp1 -> PLUS . push_sign exp
    (108) push_sign -> .

    LPAREN          reduce using rule 108 (push_sign -> .)
    ID              reduce using rule 108 (push_sign -> .)
    CTE_INT         reduce using rule 108 (push_sign -> .)
    CTE_FLOAT       reduce using rule 108 (push_sign -> .)
    TRUE            reduce using rule 108 (push_sign -> .)
    FALSE           reduce using rule 108 (push_sign -> .)

    push_sign                      shift and go to state 223

state 191

    (106) exp1 -> empty .

    RPAREN          reduce using rule 106 (exp1 -> empty .)
    LESSER          reduce using rule 106 (exp1 -> empty .)
    GREATER         reduce using rule 106 (exp1 -> empty .)
    EQUAL           reduce using rule 106 (exp1 -> empty .)
    NOTEQUAL        reduce using rule 106 (exp1 -> empty .)
    GREATEROREQUAL  reduce using rule 106 (exp1 -> empty .)
    LESSEROREQUAL   reduce using rule 106 (exp1 -> empty .)
    COMMA           reduce using rule 106 (exp1 -> empty .)
    SEMICOLON       reduce using rule 106 (exp1 -> empty .)
    RBRACKET        reduce using rule 106 (exp1 -> empty .)


state 192

    (116) term -> factor top_factor term1 .

    MINUS           reduce using rule 116 (term -> factor top_factor term1 .)
    PLUS            reduce using rule 116 (term -> factor top_factor term1 .)
    RPAREN          reduce using rule 116 (term -> factor top_factor term1 .)
    LESSER          reduce using rule 116 (term -> factor top_factor term1 .)
    GREATER         reduce using rule 116 (term -> factor top_factor term1 .)
    EQUAL           reduce using rule 116 (term -> factor top_factor term1 .)
    NOTEQUAL        reduce using rule 116 (term -> factor top_factor term1 .)
    GREATEROREQUAL  reduce using rule 116 (term -> factor top_factor term1 .)
    LESSEROREQUAL   reduce using rule 116 (term -> factor top_factor term1 .)
    COMMA           reduce using rule 116 (term -> factor top_factor term1 .)
    SEMICOLON       reduce using rule 116 (term -> factor top_factor term1 .)
    RBRACKET        reduce using rule 116 (term -> factor top_factor term1 .)


state 193

    (117) term1 -> DIVIDE . push_sign term
    (108) push_sign -> .

    LPAREN          reduce using rule 108 (push_sign -> .)
    ID              reduce using rule 108 (push_sign -> .)
    CTE_INT         reduce using rule 108 (push_sign -> .)
    CTE_FLOAT       reduce using rule 108 (push_sign -> .)
    TRUE            reduce using rule 108 (push_sign -> .)
    FALSE           reduce using rule 108 (push_sign -> .)

    push_sign                      shift and go to state 224

state 194

    (118) term1 -> TIMES . push_sign term
    (108) push_sign -> .

    LPAREN          reduce using rule 108 (push_sign -> .)
    ID              reduce using rule 108 (push_sign -> .)
    CTE_INT         reduce using rule 108 (push_sign -> .)
    CTE_FLOAT       reduce using rule 108 (push_sign -> .)
    TRUE            reduce using rule 108 (push_sign -> .)
    FALSE           reduce using rule 108 (push_sign -> .)

    push_sign                      shift and go to state 225

state 195

    (119) term1 -> empty .

    MINUS           reduce using rule 119 (term1 -> empty .)
    PLUS            reduce using rule 119 (term1 -> empty .)
    RPAREN          reduce using rule 119 (term1 -> empty .)
    LESSER          reduce using rule 119 (term1 -> empty .)
    GREATER         reduce using rule 119 (term1 -> empty .)
    EQUAL           reduce using rule 119 (term1 -> empty .)
    NOTEQUAL        reduce using rule 119 (term1 -> empty .)
    GREATEROREQUAL  reduce using rule 119 (term1 -> empty .)
    LESSEROREQUAL   reduce using rule 119 (term1 -> empty .)
    COMMA           reduce using rule 119 (term1 -> empty .)
    SEMICOLON       reduce using rule 119 (term1 -> empty .)
    RBRACKET        reduce using rule 119 (term1 -> empty .)


state 196

    (87) condition -> IF LPAREN expression RPAREN type_check . LBRACE b2 RBRACE condition1 end_if

    LBRACE          shift and go to state 226


state 197

    (94) expression1 -> LESSER relop . exp top_relop
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 227
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 198

    (95) expression1 -> GREATER relop . exp top_relop
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 228
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 199

    (96) expression1 -> EQUAL relop . exp top_relop
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 229
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 200

    (97) expression1 -> NOTEQUAL relop . exp top_relop
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 230
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 201

    (98) expression1 -> GREATEROREQUAL relop . exp top_relop
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 231
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 202

    (99) expression1 -> LESSEROREQUAL relop . exp top_relop
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 232
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 203

    (65) triangle -> TRIANGLE LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 233


state 204

    (66) rectangle -> RECTANGLE LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 234


state 205

    (64) square -> SQUARE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 64 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)


state 206

    (63) circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 63 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)


state 207

    (67) poligon -> POLIGON LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 235


state 208

    (62) color -> COLOR LPAREN color_cte RPAREN SEMICOLON .

    ID              reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    IF              reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    SQUARE          reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    POLIGON         reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    COLOR           reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENBACK         reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    ROTATE          reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    WHILE           reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    RETURN          reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENON           reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENOFF          reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    RBRACE          reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    VAR             reduce using rule 62 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)


state 209

    (70) pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 70 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)


state 210

    (71) penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 71 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)


state 211

    (72) penback -> PENBACK LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 72 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)


state 212

    (68) rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 68 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)


state 213

    (69) rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .

    ID              reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    IF              reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    SQUARE          reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    POLIGON         reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    COLOR           reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENBACK         reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    ROTATE          reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENON           reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENOFF          reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    RBRACE          reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    VAR             reduce using rule 69 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)


state 214

    (39) while -> WHILE while_return LPAREN type_check expression . RPAREN LBRACE b2 RBRACE end_while

    RPAREN          shift and go to state 236


state 215

    (53) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN . LBRACE funcs2 RBRACE funcs3

    LBRACE          shift and go to state 237


state 216

    (55) funcs1 -> funcs1 COMMA . type ID
    (75) type -> . INT
    (76) type -> . FLOAT
    (77) type -> . STRING
    (78) type -> . BOOL

    INT             shift and go to state 17
    FLOAT           shift and go to state 18
    STRING          shift and go to state 19
    BOOL            shift and go to state 20

    type                           shift and go to state 238

state 217

    (54) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN . LBRACE funcs2 RBRACE funcs3

    LBRACE          shift and go to state 239


state 218

    (15) vars3 -> ID ASSIGN expression vars4 .
    (18) vars4 -> vars4 . COMMA ID

    SEMICOLON       reduce using rule 15 (vars3 -> ID ASSIGN expression vars4 .)
    COMMA           shift and go to state 181


state 219

    (18) vars4 -> vars4 COMMA ID .

    COMMA           reduce using rule 18 (vars4 -> vars4 COMMA ID .)
    SEMICOLON       reduce using rule 18 (vars4 -> vars4 COMMA ID .)


state 220

    (43) assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN . expression SEMICOLON
    (93) expression -> . exp expression1
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 112
    expression                     shift and go to state 240
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 221

    (110) factor -> LPAREN false_bottom expression RPAREN . end_par
    (114) end_par -> .

    DIVIDE          reduce using rule 114 (end_par -> .)
    TIMES           reduce using rule 114 (end_par -> .)
    MINUS           reduce using rule 114 (end_par -> .)
    PLUS            reduce using rule 114 (end_par -> .)
    RPAREN          reduce using rule 114 (end_par -> .)
    LESSER          reduce using rule 114 (end_par -> .)
    GREATER         reduce using rule 114 (end_par -> .)
    EQUAL           reduce using rule 114 (end_par -> .)
    NOTEQUAL        reduce using rule 114 (end_par -> .)
    GREATEROREQUAL  reduce using rule 114 (end_par -> .)
    LESSEROREQUAL   reduce using rule 114 (end_par -> .)
    COMMA           reduce using rule 114 (end_par -> .)
    SEMICOLON       reduce using rule 114 (end_par -> .)
    RBRACKET        reduce using rule 114 (end_par -> .)

    end_par                        shift and go to state 241

state 222

    (104) exp1 -> MINUS push_sign . exp
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 242
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 223

    (105) exp1 -> PLUS push_sign . exp
    (103) exp -> . term top_exp exp1
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    exp                            shift and go to state 243
    term                           shift and go to state 107
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 224

    (117) term1 -> DIVIDE push_sign . term
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    term                           shift and go to state 244
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 225

    (118) term1 -> TIMES push_sign . term
    (116) term -> . factor top_factor term1
    (110) factor -> . LPAREN false_bottom expression RPAREN end_par
    (111) factor -> . var_cte
    (112) factor -> . ID push_id
    (79) var_cte -> . ID
    (80) var_cte -> . CTE_INT
    (81) var_cte -> . CTE_FLOAT
    (82) var_cte -> . cte_bool
    (83) var_cte -> . ID list
    (84) var_cte -> . call
    (85) cte_bool -> . TRUE
    (86) cte_bool -> . FALSE
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON

    LPAREN          shift and go to state 103
    ID              shift and go to state 113
    CTE_INT         shift and go to state 87
    CTE_FLOAT       shift and go to state 88
    TRUE            shift and go to state 92
    FALSE           shift and go to state 93

    term                           shift and go to state 245
    factor                         shift and go to state 109
    var_cte                        shift and go to state 110
    cte_bool                       shift and go to state 114
    call                           shift and go to state 90

state 226

    (87) condition -> IF LPAREN expression RPAREN type_check LBRACE . b2 RBRACE condition1 end_if
    (10) b2 -> . b2 statute
    (11) b2 -> . empty
    (126) empty -> .

    RBRACE          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)

    b2                             shift and go to state 246
    empty                          shift and go to state 26

state 227

    (94) expression1 -> LESSER relop exp . top_relop
    (102) top_relop -> .

    RPAREN          reduce using rule 102 (top_relop -> .)
    SEMICOLON       reduce using rule 102 (top_relop -> .)
    COMMA           reduce using rule 102 (top_relop -> .)

    top_relop                      shift and go to state 247

state 228

    (95) expression1 -> GREATER relop exp . top_relop
    (102) top_relop -> .

    RPAREN          reduce using rule 102 (top_relop -> .)
    SEMICOLON       reduce using rule 102 (top_relop -> .)
    COMMA           reduce using rule 102 (top_relop -> .)

    top_relop                      shift and go to state 248

state 229

    (96) expression1 -> EQUAL relop exp . top_relop
    (102) top_relop -> .

    RPAREN          reduce using rule 102 (top_relop -> .)
    SEMICOLON       reduce using rule 102 (top_relop -> .)
    COMMA           reduce using rule 102 (top_relop -> .)

    top_relop                      shift and go to state 249

state 230

    (97) expression1 -> NOTEQUAL relop exp . top_relop
    (102) top_relop -> .

    RPAREN          reduce using rule 102 (top_relop -> .)
    SEMICOLON       reduce using rule 102 (top_relop -> .)
    COMMA           reduce using rule 102 (top_relop -> .)

    top_relop                      shift and go to state 250

state 231

    (98) expression1 -> GREATEROREQUAL relop exp . top_relop
    (102) top_relop -> .

    RPAREN          reduce using rule 102 (top_relop -> .)
    SEMICOLON       reduce using rule 102 (top_relop -> .)
    COMMA           reduce using rule 102 (top_relop -> .)

    top_relop                      shift and go to state 251

state 232

    (99) expression1 -> LESSEROREQUAL relop exp . top_relop
    (102) top_relop -> .

    RPAREN          reduce using rule 102 (top_relop -> .)
    SEMICOLON       reduce using rule 102 (top_relop -> .)
    COMMA           reduce using rule 102 (top_relop -> .)

    top_relop                      shift and go to state 252

state 233

    (65) triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 253


state 234

    (66) rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 254


state 235

    (67) poligon -> POLIGON LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 255


state 236

    (39) while -> WHILE while_return LPAREN type_check expression RPAREN . LBRACE b2 RBRACE end_while

    LBRACE          shift and go to state 256


state 237

    (53) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE . funcs2 RBRACE funcs3
    (57) funcs2 -> . funcs2 vars
    (58) funcs2 -> . funcs2 statute
    (59) funcs2 -> . empty
    (126) empty -> .

    RBRACE          reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)

    funcs2                         shift and go to state 257
    empty                          shift and go to state 258

state 238

    (55) funcs1 -> funcs1 COMMA type . ID

    ID              shift and go to state 259


state 239

    (54) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE . funcs2 RBRACE funcs3
    (57) funcs2 -> . funcs2 vars
    (58) funcs2 -> . funcs2 statute
    (59) funcs2 -> . empty
    (126) empty -> .

    RBRACE          reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)

    funcs2                         shift and go to state 260
    empty                          shift and go to state 258

state 240

    (43) assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 261


state 241

    (110) factor -> LPAREN false_bottom expression RPAREN end_par .

    DIVIDE          reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    TIMES           reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    MINUS           reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    PLUS            reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    RPAREN          reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    LESSER          reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    GREATER         reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    EQUAL           reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    NOTEQUAL        reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    GREATEROREQUAL  reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    LESSEROREQUAL   reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    COMMA           reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    SEMICOLON       reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    RBRACKET        reduce using rule 110 (factor -> LPAREN false_bottom expression RPAREN end_par .)


state 242

    (104) exp1 -> MINUS push_sign exp .

    RPAREN          reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    LESSER          reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    GREATER         reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    EQUAL           reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    NOTEQUAL        reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    GREATEROREQUAL  reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    LESSEROREQUAL   reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    COMMA           reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    SEMICOLON       reduce using rule 104 (exp1 -> MINUS push_sign exp .)
    RBRACKET        reduce using rule 104 (exp1 -> MINUS push_sign exp .)


state 243

    (105) exp1 -> PLUS push_sign exp .

    RPAREN          reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    LESSER          reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    GREATER         reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    EQUAL           reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    NOTEQUAL        reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    GREATEROREQUAL  reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    LESSEROREQUAL   reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    COMMA           reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    SEMICOLON       reduce using rule 105 (exp1 -> PLUS push_sign exp .)
    RBRACKET        reduce using rule 105 (exp1 -> PLUS push_sign exp .)


state 244

    (117) term1 -> DIVIDE push_sign term .

    MINUS           reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    PLUS            reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    RPAREN          reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    LESSER          reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    GREATER         reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    EQUAL           reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    NOTEQUAL        reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    GREATEROREQUAL  reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    LESSEROREQUAL   reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    COMMA           reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    SEMICOLON       reduce using rule 117 (term1 -> DIVIDE push_sign term .)
    RBRACKET        reduce using rule 117 (term1 -> DIVIDE push_sign term .)


state 245

    (118) term1 -> TIMES push_sign term .

    MINUS           reduce using rule 118 (term1 -> TIMES push_sign term .)
    PLUS            reduce using rule 118 (term1 -> TIMES push_sign term .)
    RPAREN          reduce using rule 118 (term1 -> TIMES push_sign term .)
    LESSER          reduce using rule 118 (term1 -> TIMES push_sign term .)
    GREATER         reduce using rule 118 (term1 -> TIMES push_sign term .)
    EQUAL           reduce using rule 118 (term1 -> TIMES push_sign term .)
    NOTEQUAL        reduce using rule 118 (term1 -> TIMES push_sign term .)
    GREATEROREQUAL  reduce using rule 118 (term1 -> TIMES push_sign term .)
    LESSEROREQUAL   reduce using rule 118 (term1 -> TIMES push_sign term .)
    COMMA           reduce using rule 118 (term1 -> TIMES push_sign term .)
    SEMICOLON       reduce using rule 118 (term1 -> TIMES push_sign term .)
    RBRACKET        reduce using rule 118 (term1 -> TIMES push_sign term .)


state 246

    (87) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 . RBRACE condition1 end_if
    (10) b2 -> b2 . statute
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 262
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    statute                        shift and go to state 32
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 247

    (94) expression1 -> LESSER relop exp top_relop .

    RPAREN          reduce using rule 94 (expression1 -> LESSER relop exp top_relop .)
    SEMICOLON       reduce using rule 94 (expression1 -> LESSER relop exp top_relop .)
    COMMA           reduce using rule 94 (expression1 -> LESSER relop exp top_relop .)


state 248

    (95) expression1 -> GREATER relop exp top_relop .

    RPAREN          reduce using rule 95 (expression1 -> GREATER relop exp top_relop .)
    SEMICOLON       reduce using rule 95 (expression1 -> GREATER relop exp top_relop .)
    COMMA           reduce using rule 95 (expression1 -> GREATER relop exp top_relop .)


state 249

    (96) expression1 -> EQUAL relop exp top_relop .

    RPAREN          reduce using rule 96 (expression1 -> EQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 96 (expression1 -> EQUAL relop exp top_relop .)
    COMMA           reduce using rule 96 (expression1 -> EQUAL relop exp top_relop .)


state 250

    (97) expression1 -> NOTEQUAL relop exp top_relop .

    RPAREN          reduce using rule 97 (expression1 -> NOTEQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 97 (expression1 -> NOTEQUAL relop exp top_relop .)
    COMMA           reduce using rule 97 (expression1 -> NOTEQUAL relop exp top_relop .)


state 251

    (98) expression1 -> GREATEROREQUAL relop exp top_relop .

    RPAREN          reduce using rule 98 (expression1 -> GREATEROREQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 98 (expression1 -> GREATEROREQUAL relop exp top_relop .)
    COMMA           reduce using rule 98 (expression1 -> GREATEROREQUAL relop exp top_relop .)


state 252

    (99) expression1 -> LESSEROREQUAL relop exp top_relop .

    RPAREN          reduce using rule 99 (expression1 -> LESSEROREQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 99 (expression1 -> LESSEROREQUAL relop exp top_relop .)
    COMMA           reduce using rule 99 (expression1 -> LESSEROREQUAL relop exp top_relop .)


state 253

    (65) triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .

    ID              reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENON           reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    VAR             reduce using rule 65 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 254

    (66) rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .

    ID              reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENON           reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    VAR             reduce using rule 66 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 255

    (67) poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .

    ID              reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENON           reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    VAR             reduce using rule 67 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 256

    (39) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE . b2 RBRACE end_while
    (10) b2 -> . b2 statute
    (11) b2 -> . empty
    (126) empty -> .

    RBRACE          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)

    b2                             shift and go to state 263
    empty                          shift and go to state 26

state 257

    (53) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 . RBRACE funcs3
    (57) funcs2 -> funcs2 . vars
    (58) funcs2 -> funcs2 . statute
    (12) vars -> . VAR vars2
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 264
    VAR             shift and go to state 11
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    vars                           shift and go to state 265
    statute                        shift and go to state 266
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 258

    (59) funcs2 -> empty .

    RBRACE          reduce using rule 59 (funcs2 -> empty .)
    VAR             reduce using rule 59 (funcs2 -> empty .)
    ID              reduce using rule 59 (funcs2 -> empty .)
    IF              reduce using rule 59 (funcs2 -> empty .)
    TRIANGLE        reduce using rule 59 (funcs2 -> empty .)
    RECTANGLE       reduce using rule 59 (funcs2 -> empty .)
    SQUARE          reduce using rule 59 (funcs2 -> empty .)
    CIRCLE          reduce using rule 59 (funcs2 -> empty .)
    POLIGON         reduce using rule 59 (funcs2 -> empty .)
    COLOR           reduce using rule 59 (funcs2 -> empty .)
    PENSIZE         reduce using rule 59 (funcs2 -> empty .)
    PENFORWARD      reduce using rule 59 (funcs2 -> empty .)
    PENBACK         reduce using rule 59 (funcs2 -> empty .)
    ROTATE          reduce using rule 59 (funcs2 -> empty .)
    WHILE           reduce using rule 59 (funcs2 -> empty .)
    RETURN          reduce using rule 59 (funcs2 -> empty .)
    PENON           reduce using rule 59 (funcs2 -> empty .)
    PENOFF          reduce using rule 59 (funcs2 -> empty .)


state 259

    (55) funcs1 -> funcs1 COMMA type ID .

    RPAREN          reduce using rule 55 (funcs1 -> funcs1 COMMA type ID .)
    COMMA           reduce using rule 55 (funcs1 -> funcs1 COMMA type ID .)


state 260

    (54) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 . RBRACE funcs3
    (57) funcs2 -> funcs2 . vars
    (58) funcs2 -> funcs2 . statute
    (12) vars -> . VAR vars2
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 267
    VAR             shift and go to state 11
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    vars                           shift and go to state 265
    statute                        shift and go to state 266
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 261

    (43) assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .

    ID              reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    TRIANGLE        reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    RECTANGLE       reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    SQUARE          reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    CIRCLE          reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    POLIGON         reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    COLOR           reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENSIZE         reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENFORWARD      reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENBACK         reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    ROTATE          reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENON           reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENOFF          reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 43 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)


state 262

    (87) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE . condition1 end_if
    (88) condition1 -> . gotoElse ELSE LBRACE b2 RBRACE
    (89) condition1 -> . empty
    (91) gotoElse -> .
    (126) empty -> .

    ELSE            reduce using rule 91 (gotoElse -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)
    RBRACE          reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)

    condition1                     shift and go to state 268
    gotoElse                       shift and go to state 269
    empty                          shift and go to state 270

state 263

    (39) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 . RBRACE end_while
    (10) b2 -> b2 . statute
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 271
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    statute                        shift and go to state 32
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 264

    (53) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE . funcs3
    (60) funcs3 -> . funcs
    (61) funcs3 -> . empty
    (53) funcs -> . FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (54) funcs -> . FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (126) empty -> .

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 10
    DAVINCI         reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)

  ! FUNC            [ reduce using rule 126 (empty -> .) ]

    funcs3                         shift and go to state 272
    funcs                          shift and go to state 273
    empty                          shift and go to state 274

state 265

    (57) funcs2 -> funcs2 vars .

    RBRACE          reduce using rule 57 (funcs2 -> funcs2 vars .)
    VAR             reduce using rule 57 (funcs2 -> funcs2 vars .)
    ID              reduce using rule 57 (funcs2 -> funcs2 vars .)
    IF              reduce using rule 57 (funcs2 -> funcs2 vars .)
    TRIANGLE        reduce using rule 57 (funcs2 -> funcs2 vars .)
    RECTANGLE       reduce using rule 57 (funcs2 -> funcs2 vars .)
    SQUARE          reduce using rule 57 (funcs2 -> funcs2 vars .)
    CIRCLE          reduce using rule 57 (funcs2 -> funcs2 vars .)
    POLIGON         reduce using rule 57 (funcs2 -> funcs2 vars .)
    COLOR           reduce using rule 57 (funcs2 -> funcs2 vars .)
    PENSIZE         reduce using rule 57 (funcs2 -> funcs2 vars .)
    PENFORWARD      reduce using rule 57 (funcs2 -> funcs2 vars .)
    PENBACK         reduce using rule 57 (funcs2 -> funcs2 vars .)
    ROTATE          reduce using rule 57 (funcs2 -> funcs2 vars .)
    WHILE           reduce using rule 57 (funcs2 -> funcs2 vars .)
    RETURN          reduce using rule 57 (funcs2 -> funcs2 vars .)
    PENON           reduce using rule 57 (funcs2 -> funcs2 vars .)
    PENOFF          reduce using rule 57 (funcs2 -> funcs2 vars .)


state 266

    (58) funcs2 -> funcs2 statute .

    RBRACE          reduce using rule 58 (funcs2 -> funcs2 statute .)
    VAR             reduce using rule 58 (funcs2 -> funcs2 statute .)
    ID              reduce using rule 58 (funcs2 -> funcs2 statute .)
    IF              reduce using rule 58 (funcs2 -> funcs2 statute .)
    TRIANGLE        reduce using rule 58 (funcs2 -> funcs2 statute .)
    RECTANGLE       reduce using rule 58 (funcs2 -> funcs2 statute .)
    SQUARE          reduce using rule 58 (funcs2 -> funcs2 statute .)
    CIRCLE          reduce using rule 58 (funcs2 -> funcs2 statute .)
    POLIGON         reduce using rule 58 (funcs2 -> funcs2 statute .)
    COLOR           reduce using rule 58 (funcs2 -> funcs2 statute .)
    PENSIZE         reduce using rule 58 (funcs2 -> funcs2 statute .)
    PENFORWARD      reduce using rule 58 (funcs2 -> funcs2 statute .)
    PENBACK         reduce using rule 58 (funcs2 -> funcs2 statute .)
    ROTATE          reduce using rule 58 (funcs2 -> funcs2 statute .)
    WHILE           reduce using rule 58 (funcs2 -> funcs2 statute .)
    RETURN          reduce using rule 58 (funcs2 -> funcs2 statute .)
    PENON           reduce using rule 58 (funcs2 -> funcs2 statute .)
    PENOFF          reduce using rule 58 (funcs2 -> funcs2 statute .)


state 267

    (54) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE . funcs3
    (60) funcs3 -> . funcs
    (61) funcs3 -> . empty
    (53) funcs -> . FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (54) funcs -> . FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (126) empty -> .

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 10
    DAVINCI         reduce using rule 126 (empty -> .)
    VAR             reduce using rule 126 (empty -> .)

  ! FUNC            [ reduce using rule 126 (empty -> .) ]

    funcs3                         shift and go to state 275
    funcs                          shift and go to state 273
    empty                          shift and go to state 274

state 268

    (87) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 . end_if
    (92) end_if -> .

    ID              reduce using rule 92 (end_if -> .)
    IF              reduce using rule 92 (end_if -> .)
    TRIANGLE        reduce using rule 92 (end_if -> .)
    RECTANGLE       reduce using rule 92 (end_if -> .)
    SQUARE          reduce using rule 92 (end_if -> .)
    CIRCLE          reduce using rule 92 (end_if -> .)
    POLIGON         reduce using rule 92 (end_if -> .)
    COLOR           reduce using rule 92 (end_if -> .)
    PENSIZE         reduce using rule 92 (end_if -> .)
    PENFORWARD      reduce using rule 92 (end_if -> .)
    PENBACK         reduce using rule 92 (end_if -> .)
    ROTATE          reduce using rule 92 (end_if -> .)
    WHILE           reduce using rule 92 (end_if -> .)
    RETURN          reduce using rule 92 (end_if -> .)
    PENON           reduce using rule 92 (end_if -> .)
    PENOFF          reduce using rule 92 (end_if -> .)
    RBRACE          reduce using rule 92 (end_if -> .)
    VAR             reduce using rule 92 (end_if -> .)

    end_if                         shift and go to state 276

state 269

    (88) condition1 -> gotoElse . ELSE LBRACE b2 RBRACE

    ELSE            shift and go to state 277


state 270

    (89) condition1 -> empty .

    ID              reduce using rule 89 (condition1 -> empty .)
    IF              reduce using rule 89 (condition1 -> empty .)
    TRIANGLE        reduce using rule 89 (condition1 -> empty .)
    RECTANGLE       reduce using rule 89 (condition1 -> empty .)
    SQUARE          reduce using rule 89 (condition1 -> empty .)
    CIRCLE          reduce using rule 89 (condition1 -> empty .)
    POLIGON         reduce using rule 89 (condition1 -> empty .)
    COLOR           reduce using rule 89 (condition1 -> empty .)
    PENSIZE         reduce using rule 89 (condition1 -> empty .)
    PENFORWARD      reduce using rule 89 (condition1 -> empty .)
    PENBACK         reduce using rule 89 (condition1 -> empty .)
    ROTATE          reduce using rule 89 (condition1 -> empty .)
    WHILE           reduce using rule 89 (condition1 -> empty .)
    RETURN          reduce using rule 89 (condition1 -> empty .)
    PENON           reduce using rule 89 (condition1 -> empty .)
    PENOFF          reduce using rule 89 (condition1 -> empty .)
    RBRACE          reduce using rule 89 (condition1 -> empty .)
    VAR             reduce using rule 89 (condition1 -> empty .)


state 271

    (39) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE . end_while
    (41) end_while -> .

    ID              reduce using rule 41 (end_while -> .)
    IF              reduce using rule 41 (end_while -> .)
    TRIANGLE        reduce using rule 41 (end_while -> .)
    RECTANGLE       reduce using rule 41 (end_while -> .)
    SQUARE          reduce using rule 41 (end_while -> .)
    CIRCLE          reduce using rule 41 (end_while -> .)
    POLIGON         reduce using rule 41 (end_while -> .)
    COLOR           reduce using rule 41 (end_while -> .)
    PENSIZE         reduce using rule 41 (end_while -> .)
    PENFORWARD      reduce using rule 41 (end_while -> .)
    PENBACK         reduce using rule 41 (end_while -> .)
    ROTATE          reduce using rule 41 (end_while -> .)
    WHILE           reduce using rule 41 (end_while -> .)
    RETURN          reduce using rule 41 (end_while -> .)
    PENON           reduce using rule 41 (end_while -> .)
    PENOFF          reduce using rule 41 (end_while -> .)
    RBRACE          reduce using rule 41 (end_while -> .)
    VAR             reduce using rule 41 (end_while -> .)

    end_while                      shift and go to state 278

state 272

    (53) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .

    DAVINCI         reduce using rule 53 (funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    FUNC            reduce using rule 53 (funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    VAR             reduce using rule 53 (funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)


state 273

    (60) funcs3 -> funcs .

    DAVINCI         reduce using rule 60 (funcs3 -> funcs .)
    FUNC            reduce using rule 60 (funcs3 -> funcs .)
    VAR             reduce using rule 60 (funcs3 -> funcs .)


state 274

    (61) funcs3 -> empty .

    DAVINCI         reduce using rule 61 (funcs3 -> empty .)
    FUNC            reduce using rule 61 (funcs3 -> empty .)
    VAR             reduce using rule 61 (funcs3 -> empty .)


state 275

    (54) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .

    DAVINCI         reduce using rule 54 (funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    FUNC            reduce using rule 54 (funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    VAR             reduce using rule 54 (funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)


state 276

    (87) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .

    ID              reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    IF              reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    TRIANGLE        reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    RECTANGLE       reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    SQUARE          reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    CIRCLE          reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    POLIGON         reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    COLOR           reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENSIZE         reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENFORWARD      reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENBACK         reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    ROTATE          reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    WHILE           reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    RETURN          reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENON           reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENOFF          reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    RBRACE          reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    VAR             reduce using rule 87 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)


state 277

    (88) condition1 -> gotoElse ELSE . LBRACE b2 RBRACE

    LBRACE          shift and go to state 279


state 278

    (39) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .

    ID              reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    IF              reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    TRIANGLE        reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    RECTANGLE       reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    SQUARE          reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    CIRCLE          reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    POLIGON         reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    COLOR           reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENSIZE         reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENFORWARD      reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENBACK         reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    ROTATE          reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    WHILE           reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    RETURN          reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENON           reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENOFF          reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    RBRACE          reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    VAR             reduce using rule 39 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)


state 279

    (88) condition1 -> gotoElse ELSE LBRACE . b2 RBRACE
    (10) b2 -> . b2 statute
    (11) b2 -> . empty
    (126) empty -> .

    RBRACE          reduce using rule 126 (empty -> .)
    ID              reduce using rule 126 (empty -> .)
    IF              reduce using rule 126 (empty -> .)
    TRIANGLE        reduce using rule 126 (empty -> .)
    RECTANGLE       reduce using rule 126 (empty -> .)
    SQUARE          reduce using rule 126 (empty -> .)
    CIRCLE          reduce using rule 126 (empty -> .)
    POLIGON         reduce using rule 126 (empty -> .)
    COLOR           reduce using rule 126 (empty -> .)
    PENSIZE         reduce using rule 126 (empty -> .)
    PENFORWARD      reduce using rule 126 (empty -> .)
    PENBACK         reduce using rule 126 (empty -> .)
    ROTATE          reduce using rule 126 (empty -> .)
    WHILE           reduce using rule 126 (empty -> .)
    RETURN          reduce using rule 126 (empty -> .)
    PENON           reduce using rule 126 (empty -> .)
    PENOFF          reduce using rule 126 (empty -> .)

    b2                             shift and go to state 280
    empty                          shift and go to state 26

state 280

    (88) condition1 -> gotoElse ELSE LBRACE b2 . RBRACE
    (10) b2 -> b2 . statute
    (22) statute -> . assignment
    (23) statute -> . call
    (24) statute -> . condition
    (25) statute -> . triangle
    (26) statute -> . rectangle
    (27) statute -> . square
    (28) statute -> . circle
    (29) statute -> . poligon
    (30) statute -> . color
    (31) statute -> . pensize
    (32) statute -> . penforward
    (33) statute -> . penback
    (34) statute -> . rotate
    (35) statute -> . while
    (36) statute -> . return
    (37) statute -> . penon
    (38) statute -> . penoff
    (42) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (43) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (120) call -> . ID LPAREN call1 RPAREN SEMICOLON
    (87) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (65) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (66) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (64) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (63) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (67) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (62) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (70) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (71) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (72) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (68) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (39) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (124) return -> . RETURN var_cte SEMICOLON
    (125) return -> . RETURN st_cte SEMICOLON
    (73) penon -> . PENON LPAREN RPAREN SEMICOLON
    (74) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 281
    ID              shift and go to state 50
    IF              shift and go to state 51
    TRIANGLE        shift and go to state 52
    RECTANGLE       shift and go to state 53
    SQUARE          shift and go to state 54
    CIRCLE          shift and go to state 55
    POLIGON         shift and go to state 56
    COLOR           shift and go to state 57
    PENSIZE         shift and go to state 58
    PENFORWARD      shift and go to state 59
    PENBACK         shift and go to state 60
    ROTATE          shift and go to state 61
    WHILE           shift and go to state 62
    RETURN          shift and go to state 63
    PENON           shift and go to state 64
    PENOFF          shift and go to state 65

    statute                        shift and go to state 32
    assignment                     shift and go to state 33
    call                           shift and go to state 34
    condition                      shift and go to state 35
    triangle                       shift and go to state 36
    rectangle                      shift and go to state 37
    square                         shift and go to state 38
    circle                         shift and go to state 39
    poligon                        shift and go to state 40
    color                          shift and go to state 41
    pensize                        shift and go to state 42
    penforward                     shift and go to state 43
    penback                        shift and go to state 44
    rotate                         shift and go to state 45
    while                          shift and go to state 46
    return                         shift and go to state 47
    penon                          shift and go to state 48
    penoff                         shift and go to state 49

state 281

    (88) condition1 -> gotoElse ELSE LBRACE b2 RBRACE .

    ID              reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    IF              reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    TRIANGLE        reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    RECTANGLE       reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    SQUARE          reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    CIRCLE          reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    POLIGON         reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    COLOR           reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENSIZE         reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENFORWARD      reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENBACK         reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    ROTATE          reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    WHILE           reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    RETURN          reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENON           reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENOFF          reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    RBRACE          reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    VAR             reduce using rule 88 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 264 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 267 resolved as shift
WARNING: reduce/reduce conflict in state 89 resolved using rule (st_cte -> cte_bool)
WARNING: rejected rule (var_cte -> cte_bool) in state 89
WARNING: reduce/reduce conflict in state 102 resolved using rule (var_cte -> ID)
WARNING: rejected rule (push_id -> <empty>) in state 102
WARNING: reduce/reduce conflict in state 108 resolved using rule (st_cte -> cte_bool)
WARNING: rejected rule (var_cte -> cte_bool) in state 108
WARNING: reduce/reduce conflict in state 113 resolved using rule (var_cte -> ID)
WARNING: rejected rule (push_id -> <empty>) in state 113
WARNING: Rule (push_id -> <empty>) is never reduced
