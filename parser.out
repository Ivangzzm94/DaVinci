Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    CTE_BOOL
    EXPRESSION
    NOT
    OR
    SIZE
    ST_CTE
    TERM

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM ID SEMICOLON gotomain program1 DAVINCI block
Rule 2     gotomain -> empty
Rule 3     program1 -> program1 funcs
Rule 4     program1 -> program1 vars global_vars
Rule 5     program1 -> empty
Rule 6     global_vars -> <empty>
Rule 7     block -> LBRACE b1 RBRACE
Rule 8     b1 -> vars local_vars b2
Rule 9     b1 -> b2
Rule 10    local_vars -> <empty>
Rule 11    b2 -> b2 statute
Rule 12    b2 -> empty
Rule 13    vars -> VAR vars2
Rule 14    vars2 -> type vars3 SEMICOLON vars2
Rule 15    vars2 -> empty
Rule 16    vars3 -> ID ASSIGN expression vars4
Rule 17    vars3 -> ID list vars4
Rule 18    vars3 -> ID vars4
Rule 19    vars4 -> COMMA vars3
Rule 20    vars4 -> empty
Rule 21    save_type -> <empty>
Rule 22    list -> LIST
Rule 23    statute -> assignment
Rule 24    statute -> call
Rule 25    statute -> condition
Rule 26    statute -> triangle
Rule 27    statute -> rectangle
Rule 28    statute -> square
Rule 29    statute -> circle
Rule 30    statute -> poligon
Rule 31    statute -> color
Rule 32    statute -> pensize
Rule 33    statute -> penforward
Rule 34    statute -> penback
Rule 35    statute -> rotate
Rule 36    statute -> while
Rule 37    statute -> return
Rule 38    statute -> penon
Rule 39    statute -> penoff
Rule 40    while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
Rule 41    while_return -> <empty>
Rule 42    end_while -> <empty>
Rule 43    assignment -> ID cte_id ASSIGN expression SEMICOLON
Rule 44    assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
Rule 45    cte_id -> <empty>
Rule 46    color_cte -> RED
Rule 47    color_cte -> BLUE
Rule 48    color_cte -> YELLOW
Rule 49    color_cte -> GREEN
Rule 50    color_cte -> PINK
Rule 51    color_cte -> PURPLE
Rule 52    st_cte -> STRING
Rule 53    st_cte -> cte_bool
Rule 54    funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
Rule 55    funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
Rule 56    funcs1 -> funcs1 COMMA type ID
Rule 57    funcs1 -> empty
Rule 58    funcs2 -> funcs2 vars
Rule 59    funcs2 -> funcs2 statute
Rule 60    funcs2 -> empty
Rule 61    funcs3 -> funcs
Rule 62    funcs3 -> empty
Rule 63    color -> COLOR LPAREN color_cte RPAREN SEMICOLON
Rule 64    circle -> CIRCLE LPAREN exp RPAREN SEMICOLON
Rule 65    square -> SQUARE LPAREN exp RPAREN SEMICOLON
Rule 66    triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 67    rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 68    poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
Rule 69    rotate -> ROTATE LPAREN exp RPAREN SEMICOLON
Rule 70    rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
Rule 71    pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON
Rule 72    penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON
Rule 73    penback -> PENBACK LPAREN exp RPAREN SEMICOLON
Rule 74    penon -> PENON LPAREN RPAREN SEMICOLON
Rule 75    penoff -> PENOFF LPAREN RPAREN SEMICOLON
Rule 76    type -> INT
Rule 77    type -> FLOAT
Rule 78    type -> STRING
Rule 79    type -> BOOL
Rule 80    var_cte -> ID
Rule 81    var_cte -> CTE_INT
Rule 82    var_cte -> CTE_FLOAT
Rule 83    var_cte -> cte_bool
Rule 84    var_cte -> ID list
Rule 85    var_cte -> call
Rule 86    cte_bool -> TRUE
Rule 87    cte_bool -> FALSE
Rule 88    condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
Rule 89    condition1 -> gotoElse ELSE LBRACE b2 RBRACE
Rule 90    condition1 -> empty
Rule 91    type_check -> <empty>
Rule 92    gotoElse -> <empty>
Rule 93    end_if -> <empty>
Rule 94    expression -> exp expression1
Rule 95    expression1 -> LESSER relop exp top_relop
Rule 96    expression1 -> GREATER relop exp top_relop
Rule 97    expression1 -> EQUAL relop exp top_relop
Rule 98    expression1 -> NOTEQUAL relop exp top_relop
Rule 99    expression1 -> GREATEROREQUAL relop exp top_relop
Rule 100   expression1 -> LESSEROREQUAL relop exp top_relop
Rule 101   expression1 -> empty
Rule 102   relop -> <empty>
Rule 103   top_relop -> <empty>
Rule 104   exp -> term top_exp exp1
Rule 105   exp1 -> MINUS push_sign exp
Rule 106   exp1 -> PLUS push_sign exp
Rule 107   exp1 -> empty
Rule 108   top_exp -> <empty>
Rule 109   push_sign -> <empty>
Rule 110   top_factor -> <empty>
Rule 111   factor -> LPAREN false_bottom expression RPAREN end_par
Rule 112   factor -> var_cte
Rule 113   factor -> ID push_id
Rule 114   false_bottom -> <empty>
Rule 115   end_par -> <empty>
Rule 116   push_id -> <empty>
Rule 117   term -> factor top_factor term1
Rule 118   term1 -> DIVIDE push_sign term
Rule 119   term1 -> TIMES push_sign term
Rule 120   term1 -> empty
Rule 121   call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
Rule 122   check_name -> <empty>
Rule 123   create_era -> <empty>
Rule 124   gosub -> <empty>
Rule 125   call1 -> ID COMMA call1
Rule 126   call1 -> exp
Rule 127   call1 -> st_cte
Rule 128   return -> RETURN var_cte SEMICOLON
Rule 129   return -> RETURN st_cte SEMICOLON
Rule 130   empty -> <empty>

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 16 43 44
BLUE                 : 47
BOOL                 : 79
CIRCLE               : 64
COLOR                : 63
COMMA                : 19 56 66 67 68 125
CTE_BOOL             : 
CTE_FLOAT            : 82
CTE_INT              : 81
CTE_STRING           : 70
DAVINCI              : 1
DIVIDE               : 118
ELSE                 : 89
EQUAL                : 97
EXPRESSION           : 
FALSE                : 87
FLOAT                : 77
FUNC                 : 54 55
GREATER              : 96
GREATEROREQUAL       : 99
GREEN                : 49
ID                   : 1 16 17 18 43 44 54 54 55 55 56 80 84 113 121 125
IF                   : 88
INT                  : 76
LBRACE               : 7 40 54 55 88 89
LBRACKET             : 44
LESSER               : 95
LESSEROREQUAL        : 100
LIST                 : 22
LPAREN               : 40 54 55 63 64 65 66 67 68 69 70 71 72 73 74 75 88 111 121
MINUS                : 105
NOT                  : 
NOTEQUAL             : 98
OR                   : 
PENBACK              : 73
PENFORWARD           : 72
PENOFF               : 75
PENON                : 74
PENSIZE              : 71
PINK                 : 50
PLUS                 : 106
POLIGON              : 68
PROGRAM              : 1
PURPLE               : 51
RBRACE               : 7 40 54 55 88 89
RBRACKET             : 44
RECTANGLE            : 67
RED                  : 46
RETURN               : 128 129
ROTATE               : 69 70
RPAREN               : 40 54 55 63 64 65 66 67 68 69 70 71 72 73 74 75 88 111 121
SEMICOLON            : 1 14 43 44 63 64 65 66 67 68 69 70 71 72 73 74 75 121 128 129
SIZE                 : 
SQUARE               : 65
STRING               : 52 78
ST_CTE               : 
TERM                 : 
TIMES                : 119
TRIANGLE             : 66
TRUE                 : 86
VAR                  : 13
VOID                 : 55
WHILE                : 40
YELLOW               : 48
error                : 

Nonterminals, with rules where they appear

assignment           : 23
b1                   : 7
b2                   : 8 9 11 40 88 89
block                : 1
call                 : 24 85
call1                : 121 125
check_name           : 121
circle               : 29
color                : 31
color_cte            : 63
condition            : 25
condition1           : 88
create_era           : 121
cte_bool             : 53 83
cte_id               : 43 44
empty                : 2 5 12 15 20 57 60 62 90 101 107 120
end_if               : 88
end_par              : 111
end_while            : 40
exp                  : 44 64 65 66 66 67 67 68 68 69 71 72 73 94 95 96 97 98 99 100 105 106 126
exp1                 : 104
expression           : 16 40 43 44 88 111
expression1          : 94
factor               : 117
false_bottom         : 111
funcs                : 3 61
funcs1               : 54 55 56
funcs2               : 54 55 58 59
funcs3               : 54 55
global_vars          : 4
gosub                : 121
gotoElse             : 89
gotomain             : 1
list                 : 17 84
local_vars           : 8
penback              : 34
penforward           : 33
penoff               : 39
penon                : 38
pensize              : 32
poligon              : 30
program              : 0
program1             : 1 3 4
push_id              : 113
push_sign            : 105 106 118 119
rectangle            : 27
relop                : 95 96 97 98 99 100
return               : 37
rotate               : 35
save_type            : 
square               : 28
st_cte               : 127 129
statute              : 11 59
term                 : 104 118 119
term1                : 117
top_exp              : 104
top_factor           : 117
top_relop            : 95 96 97 98 99 100
triangle             : 26
type                 : 14 54 54 55 56
type_check           : 40 88
var_cte              : 112 128
vars                 : 4 8 58
vars2                : 13 14
vars3                : 14 19
vars4                : 16 17 18
while                : 36
while_return         : 40

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM ID SEMICOLON gotomain program1 DAVINCI block

    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM . ID SEMICOLON gotomain program1 DAVINCI block

    ID              shift and go to state 3


state 3

    (1) program -> PROGRAM ID . SEMICOLON gotomain program1 DAVINCI block

    SEMICOLON       shift and go to state 4


state 4

    (1) program -> PROGRAM ID SEMICOLON . gotomain program1 DAVINCI block
    (2) gotomain -> . empty
    (130) empty -> .

    DAVINCI         reduce using rule 130 (empty -> .)
    FUNC            reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)

    gotomain                       shift and go to state 5
    empty                          shift and go to state 6

state 5

    (1) program -> PROGRAM ID SEMICOLON gotomain . program1 DAVINCI block
    (3) program1 -> . program1 funcs
    (4) program1 -> . program1 vars global_vars
    (5) program1 -> . empty
    (130) empty -> .

    DAVINCI         reduce using rule 130 (empty -> .)
    FUNC            reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)

    program1                       shift and go to state 7
    empty                          shift and go to state 8

state 6

    (2) gotomain -> empty .

    DAVINCI         reduce using rule 2 (gotomain -> empty .)
    FUNC            reduce using rule 2 (gotomain -> empty .)
    VAR             reduce using rule 2 (gotomain -> empty .)


state 7

    (1) program -> PROGRAM ID SEMICOLON gotomain program1 . DAVINCI block
    (3) program1 -> program1 . funcs
    (4) program1 -> program1 . vars global_vars
    (54) funcs -> . FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs -> . FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (13) vars -> . VAR vars2

    DAVINCI         shift and go to state 9
    FUNC            shift and go to state 12
    VAR             shift and go to state 13

    funcs                          shift and go to state 10
    vars                           shift and go to state 11

state 8

    (5) program1 -> empty .

    DAVINCI         reduce using rule 5 (program1 -> empty .)
    FUNC            reduce using rule 5 (program1 -> empty .)
    VAR             reduce using rule 5 (program1 -> empty .)


state 9

    (1) program -> PROGRAM ID SEMICOLON gotomain program1 DAVINCI . block
    (7) block -> . LBRACE b1 RBRACE

    LBRACE          shift and go to state 15

    block                          shift and go to state 14

state 10

    (3) program1 -> program1 funcs .

    DAVINCI         reduce using rule 3 (program1 -> program1 funcs .)
    FUNC            reduce using rule 3 (program1 -> program1 funcs .)
    VAR             reduce using rule 3 (program1 -> program1 funcs .)


state 11

    (4) program1 -> program1 vars . global_vars
    (6) global_vars -> .

    DAVINCI         reduce using rule 6 (global_vars -> .)
    FUNC            reduce using rule 6 (global_vars -> .)
    VAR             reduce using rule 6 (global_vars -> .)

    global_vars                    shift and go to state 16

state 12

    (54) funcs -> FUNC . type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs -> FUNC . VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (76) type -> . INT
    (77) type -> . FLOAT
    (78) type -> . STRING
    (79) type -> . BOOL

    VOID            shift and go to state 18
    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 17

state 13

    (13) vars -> VAR . vars2
    (14) vars2 -> . type vars3 SEMICOLON vars2
    (15) vars2 -> . empty
    (76) type -> . INT
    (77) type -> . FLOAT
    (78) type -> . STRING
    (79) type -> . BOOL
    (130) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    DAVINCI         reduce using rule 130 (empty -> .)
    FUNC            reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)
    RBRACE          reduce using rule 130 (empty -> .)

    vars2                          shift and go to state 23
    type                           shift and go to state 24
    empty                          shift and go to state 25

state 14

    (1) program -> PROGRAM ID SEMICOLON gotomain program1 DAVINCI block .

    $end            reduce using rule 1 (program -> PROGRAM ID SEMICOLON gotomain program1 DAVINCI block .)


state 15

    (7) block -> LBRACE . b1 RBRACE
    (8) b1 -> . vars local_vars b2
    (9) b1 -> . b2
    (13) vars -> . VAR vars2
    (11) b2 -> . b2 statute
    (12) b2 -> . empty
    (130) empty -> .

    VAR             shift and go to state 13
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)
    RBRACE          reduce using rule 130 (empty -> .)

    b1                             shift and go to state 26
    vars                           shift and go to state 27
    b2                             shift and go to state 28
    empty                          shift and go to state 29

state 16

    (4) program1 -> program1 vars global_vars .

    DAVINCI         reduce using rule 4 (program1 -> program1 vars global_vars .)
    FUNC            reduce using rule 4 (program1 -> program1 vars global_vars .)
    VAR             reduce using rule 4 (program1 -> program1 vars global_vars .)


state 17

    (54) funcs -> FUNC type . ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 30


state 18

    (55) funcs -> FUNC VOID . ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 31


state 19

    (76) type -> INT .

    ID              reduce using rule 76 (type -> INT .)


state 20

    (77) type -> FLOAT .

    ID              reduce using rule 77 (type -> FLOAT .)


state 21

    (78) type -> STRING .

    ID              reduce using rule 78 (type -> STRING .)


state 22

    (79) type -> BOOL .

    ID              reduce using rule 79 (type -> BOOL .)


state 23

    (13) vars -> VAR vars2 .

    DAVINCI         reduce using rule 13 (vars -> VAR vars2 .)
    FUNC            reduce using rule 13 (vars -> VAR vars2 .)
    VAR             reduce using rule 13 (vars -> VAR vars2 .)
    ID              reduce using rule 13 (vars -> VAR vars2 .)
    IF              reduce using rule 13 (vars -> VAR vars2 .)
    TRIANGLE        reduce using rule 13 (vars -> VAR vars2 .)
    RECTANGLE       reduce using rule 13 (vars -> VAR vars2 .)
    SQUARE          reduce using rule 13 (vars -> VAR vars2 .)
    CIRCLE          reduce using rule 13 (vars -> VAR vars2 .)
    POLIGON         reduce using rule 13 (vars -> VAR vars2 .)
    COLOR           reduce using rule 13 (vars -> VAR vars2 .)
    PENSIZE         reduce using rule 13 (vars -> VAR vars2 .)
    PENFORWARD      reduce using rule 13 (vars -> VAR vars2 .)
    PENBACK         reduce using rule 13 (vars -> VAR vars2 .)
    ROTATE          reduce using rule 13 (vars -> VAR vars2 .)
    WHILE           reduce using rule 13 (vars -> VAR vars2 .)
    RETURN          reduce using rule 13 (vars -> VAR vars2 .)
    PENON           reduce using rule 13 (vars -> VAR vars2 .)
    PENOFF          reduce using rule 13 (vars -> VAR vars2 .)
    RBRACE          reduce using rule 13 (vars -> VAR vars2 .)


state 24

    (14) vars2 -> type . vars3 SEMICOLON vars2
    (16) vars3 -> . ID ASSIGN expression vars4
    (17) vars3 -> . ID list vars4
    (18) vars3 -> . ID vars4

    ID              shift and go to state 33

    vars3                          shift and go to state 32

state 25

    (15) vars2 -> empty .

    DAVINCI         reduce using rule 15 (vars2 -> empty .)
    FUNC            reduce using rule 15 (vars2 -> empty .)
    VAR             reduce using rule 15 (vars2 -> empty .)
    ID              reduce using rule 15 (vars2 -> empty .)
    IF              reduce using rule 15 (vars2 -> empty .)
    TRIANGLE        reduce using rule 15 (vars2 -> empty .)
    RECTANGLE       reduce using rule 15 (vars2 -> empty .)
    SQUARE          reduce using rule 15 (vars2 -> empty .)
    CIRCLE          reduce using rule 15 (vars2 -> empty .)
    POLIGON         reduce using rule 15 (vars2 -> empty .)
    COLOR           reduce using rule 15 (vars2 -> empty .)
    PENSIZE         reduce using rule 15 (vars2 -> empty .)
    PENFORWARD      reduce using rule 15 (vars2 -> empty .)
    PENBACK         reduce using rule 15 (vars2 -> empty .)
    ROTATE          reduce using rule 15 (vars2 -> empty .)
    WHILE           reduce using rule 15 (vars2 -> empty .)
    RETURN          reduce using rule 15 (vars2 -> empty .)
    PENON           reduce using rule 15 (vars2 -> empty .)
    PENOFF          reduce using rule 15 (vars2 -> empty .)
    RBRACE          reduce using rule 15 (vars2 -> empty .)


state 26

    (7) block -> LBRACE b1 . RBRACE

    RBRACE          shift and go to state 34


state 27

    (8) b1 -> vars . local_vars b2
    (10) local_vars -> .

    ID              reduce using rule 10 (local_vars -> .)
    IF              reduce using rule 10 (local_vars -> .)
    TRIANGLE        reduce using rule 10 (local_vars -> .)
    RECTANGLE       reduce using rule 10 (local_vars -> .)
    SQUARE          reduce using rule 10 (local_vars -> .)
    CIRCLE          reduce using rule 10 (local_vars -> .)
    POLIGON         reduce using rule 10 (local_vars -> .)
    COLOR           reduce using rule 10 (local_vars -> .)
    PENSIZE         reduce using rule 10 (local_vars -> .)
    PENFORWARD      reduce using rule 10 (local_vars -> .)
    PENBACK         reduce using rule 10 (local_vars -> .)
    ROTATE          reduce using rule 10 (local_vars -> .)
    WHILE           reduce using rule 10 (local_vars -> .)
    RETURN          reduce using rule 10 (local_vars -> .)
    PENON           reduce using rule 10 (local_vars -> .)
    PENOFF          reduce using rule 10 (local_vars -> .)
    RBRACE          reduce using rule 10 (local_vars -> .)

    local_vars                     shift and go to state 35

state 28

    (9) b1 -> b2 .
    (11) b2 -> b2 . statute
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          reduce using rule 9 (b1 -> b2 .)
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    statute                        shift and go to state 36
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 29

    (12) b2 -> empty .

    ID              reduce using rule 12 (b2 -> empty .)
    IF              reduce using rule 12 (b2 -> empty .)
    TRIANGLE        reduce using rule 12 (b2 -> empty .)
    RECTANGLE       reduce using rule 12 (b2 -> empty .)
    SQUARE          reduce using rule 12 (b2 -> empty .)
    CIRCLE          reduce using rule 12 (b2 -> empty .)
    POLIGON         reduce using rule 12 (b2 -> empty .)
    COLOR           reduce using rule 12 (b2 -> empty .)
    PENSIZE         reduce using rule 12 (b2 -> empty .)
    PENFORWARD      reduce using rule 12 (b2 -> empty .)
    PENBACK         reduce using rule 12 (b2 -> empty .)
    ROTATE          reduce using rule 12 (b2 -> empty .)
    WHILE           reduce using rule 12 (b2 -> empty .)
    RETURN          reduce using rule 12 (b2 -> empty .)
    PENON           reduce using rule 12 (b2 -> empty .)
    PENOFF          reduce using rule 12 (b2 -> empty .)
    RBRACE          reduce using rule 12 (b2 -> empty .)


state 30

    (54) funcs -> FUNC type ID . LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    LPAREN          shift and go to state 70


state 31

    (55) funcs -> FUNC VOID ID . LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    LPAREN          shift and go to state 71


state 32

    (14) vars2 -> type vars3 . SEMICOLON vars2

    SEMICOLON       shift and go to state 72


state 33

    (16) vars3 -> ID . ASSIGN expression vars4
    (17) vars3 -> ID . list vars4
    (18) vars3 -> ID . vars4
    (22) list -> . LIST
    (19) vars4 -> . COMMA vars3
    (20) vars4 -> . empty
    (130) empty -> .

    ASSIGN          shift and go to state 73
    LIST            shift and go to state 76
    COMMA           shift and go to state 77
    SEMICOLON       reduce using rule 130 (empty -> .)

    vars4                          shift and go to state 74
    list                           shift and go to state 75
    empty                          shift and go to state 78

state 34

    (7) block -> LBRACE b1 RBRACE .

    $end            reduce using rule 7 (block -> LBRACE b1 RBRACE .)


state 35

    (8) b1 -> vars local_vars . b2
    (11) b2 -> . b2 statute
    (12) b2 -> . empty
    (130) empty -> .

    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)
    RBRACE          reduce using rule 130 (empty -> .)

    b2                             shift and go to state 79
    empty                          shift and go to state 29

state 36

    (11) b2 -> b2 statute .

    ID              reduce using rule 11 (b2 -> b2 statute .)
    IF              reduce using rule 11 (b2 -> b2 statute .)
    TRIANGLE        reduce using rule 11 (b2 -> b2 statute .)
    RECTANGLE       reduce using rule 11 (b2 -> b2 statute .)
    SQUARE          reduce using rule 11 (b2 -> b2 statute .)
    CIRCLE          reduce using rule 11 (b2 -> b2 statute .)
    POLIGON         reduce using rule 11 (b2 -> b2 statute .)
    COLOR           reduce using rule 11 (b2 -> b2 statute .)
    PENSIZE         reduce using rule 11 (b2 -> b2 statute .)
    PENFORWARD      reduce using rule 11 (b2 -> b2 statute .)
    PENBACK         reduce using rule 11 (b2 -> b2 statute .)
    ROTATE          reduce using rule 11 (b2 -> b2 statute .)
    WHILE           reduce using rule 11 (b2 -> b2 statute .)
    RETURN          reduce using rule 11 (b2 -> b2 statute .)
    PENON           reduce using rule 11 (b2 -> b2 statute .)
    PENOFF          reduce using rule 11 (b2 -> b2 statute .)
    RBRACE          reduce using rule 11 (b2 -> b2 statute .)


state 37

    (23) statute -> assignment .

    ID              reduce using rule 23 (statute -> assignment .)
    IF              reduce using rule 23 (statute -> assignment .)
    TRIANGLE        reduce using rule 23 (statute -> assignment .)
    RECTANGLE       reduce using rule 23 (statute -> assignment .)
    SQUARE          reduce using rule 23 (statute -> assignment .)
    CIRCLE          reduce using rule 23 (statute -> assignment .)
    POLIGON         reduce using rule 23 (statute -> assignment .)
    COLOR           reduce using rule 23 (statute -> assignment .)
    PENSIZE         reduce using rule 23 (statute -> assignment .)
    PENFORWARD      reduce using rule 23 (statute -> assignment .)
    PENBACK         reduce using rule 23 (statute -> assignment .)
    ROTATE          reduce using rule 23 (statute -> assignment .)
    WHILE           reduce using rule 23 (statute -> assignment .)
    RETURN          reduce using rule 23 (statute -> assignment .)
    PENON           reduce using rule 23 (statute -> assignment .)
    PENOFF          reduce using rule 23 (statute -> assignment .)
    RBRACE          reduce using rule 23 (statute -> assignment .)
    VAR             reduce using rule 23 (statute -> assignment .)


state 38

    (24) statute -> call .

    ID              reduce using rule 24 (statute -> call .)
    IF              reduce using rule 24 (statute -> call .)
    TRIANGLE        reduce using rule 24 (statute -> call .)
    RECTANGLE       reduce using rule 24 (statute -> call .)
    SQUARE          reduce using rule 24 (statute -> call .)
    CIRCLE          reduce using rule 24 (statute -> call .)
    POLIGON         reduce using rule 24 (statute -> call .)
    COLOR           reduce using rule 24 (statute -> call .)
    PENSIZE         reduce using rule 24 (statute -> call .)
    PENFORWARD      reduce using rule 24 (statute -> call .)
    PENBACK         reduce using rule 24 (statute -> call .)
    ROTATE          reduce using rule 24 (statute -> call .)
    WHILE           reduce using rule 24 (statute -> call .)
    RETURN          reduce using rule 24 (statute -> call .)
    PENON           reduce using rule 24 (statute -> call .)
    PENOFF          reduce using rule 24 (statute -> call .)
    RBRACE          reduce using rule 24 (statute -> call .)
    VAR             reduce using rule 24 (statute -> call .)


state 39

    (25) statute -> condition .

    ID              reduce using rule 25 (statute -> condition .)
    IF              reduce using rule 25 (statute -> condition .)
    TRIANGLE        reduce using rule 25 (statute -> condition .)
    RECTANGLE       reduce using rule 25 (statute -> condition .)
    SQUARE          reduce using rule 25 (statute -> condition .)
    CIRCLE          reduce using rule 25 (statute -> condition .)
    POLIGON         reduce using rule 25 (statute -> condition .)
    COLOR           reduce using rule 25 (statute -> condition .)
    PENSIZE         reduce using rule 25 (statute -> condition .)
    PENFORWARD      reduce using rule 25 (statute -> condition .)
    PENBACK         reduce using rule 25 (statute -> condition .)
    ROTATE          reduce using rule 25 (statute -> condition .)
    WHILE           reduce using rule 25 (statute -> condition .)
    RETURN          reduce using rule 25 (statute -> condition .)
    PENON           reduce using rule 25 (statute -> condition .)
    PENOFF          reduce using rule 25 (statute -> condition .)
    RBRACE          reduce using rule 25 (statute -> condition .)
    VAR             reduce using rule 25 (statute -> condition .)


state 40

    (26) statute -> triangle .

    ID              reduce using rule 26 (statute -> triangle .)
    IF              reduce using rule 26 (statute -> triangle .)
    TRIANGLE        reduce using rule 26 (statute -> triangle .)
    RECTANGLE       reduce using rule 26 (statute -> triangle .)
    SQUARE          reduce using rule 26 (statute -> triangle .)
    CIRCLE          reduce using rule 26 (statute -> triangle .)
    POLIGON         reduce using rule 26 (statute -> triangle .)
    COLOR           reduce using rule 26 (statute -> triangle .)
    PENSIZE         reduce using rule 26 (statute -> triangle .)
    PENFORWARD      reduce using rule 26 (statute -> triangle .)
    PENBACK         reduce using rule 26 (statute -> triangle .)
    ROTATE          reduce using rule 26 (statute -> triangle .)
    WHILE           reduce using rule 26 (statute -> triangle .)
    RETURN          reduce using rule 26 (statute -> triangle .)
    PENON           reduce using rule 26 (statute -> triangle .)
    PENOFF          reduce using rule 26 (statute -> triangle .)
    RBRACE          reduce using rule 26 (statute -> triangle .)
    VAR             reduce using rule 26 (statute -> triangle .)


state 41

    (27) statute -> rectangle .

    ID              reduce using rule 27 (statute -> rectangle .)
    IF              reduce using rule 27 (statute -> rectangle .)
    TRIANGLE        reduce using rule 27 (statute -> rectangle .)
    RECTANGLE       reduce using rule 27 (statute -> rectangle .)
    SQUARE          reduce using rule 27 (statute -> rectangle .)
    CIRCLE          reduce using rule 27 (statute -> rectangle .)
    POLIGON         reduce using rule 27 (statute -> rectangle .)
    COLOR           reduce using rule 27 (statute -> rectangle .)
    PENSIZE         reduce using rule 27 (statute -> rectangle .)
    PENFORWARD      reduce using rule 27 (statute -> rectangle .)
    PENBACK         reduce using rule 27 (statute -> rectangle .)
    ROTATE          reduce using rule 27 (statute -> rectangle .)
    WHILE           reduce using rule 27 (statute -> rectangle .)
    RETURN          reduce using rule 27 (statute -> rectangle .)
    PENON           reduce using rule 27 (statute -> rectangle .)
    PENOFF          reduce using rule 27 (statute -> rectangle .)
    RBRACE          reduce using rule 27 (statute -> rectangle .)
    VAR             reduce using rule 27 (statute -> rectangle .)


state 42

    (28) statute -> square .

    ID              reduce using rule 28 (statute -> square .)
    IF              reduce using rule 28 (statute -> square .)
    TRIANGLE        reduce using rule 28 (statute -> square .)
    RECTANGLE       reduce using rule 28 (statute -> square .)
    SQUARE          reduce using rule 28 (statute -> square .)
    CIRCLE          reduce using rule 28 (statute -> square .)
    POLIGON         reduce using rule 28 (statute -> square .)
    COLOR           reduce using rule 28 (statute -> square .)
    PENSIZE         reduce using rule 28 (statute -> square .)
    PENFORWARD      reduce using rule 28 (statute -> square .)
    PENBACK         reduce using rule 28 (statute -> square .)
    ROTATE          reduce using rule 28 (statute -> square .)
    WHILE           reduce using rule 28 (statute -> square .)
    RETURN          reduce using rule 28 (statute -> square .)
    PENON           reduce using rule 28 (statute -> square .)
    PENOFF          reduce using rule 28 (statute -> square .)
    RBRACE          reduce using rule 28 (statute -> square .)
    VAR             reduce using rule 28 (statute -> square .)


state 43

    (29) statute -> circle .

    ID              reduce using rule 29 (statute -> circle .)
    IF              reduce using rule 29 (statute -> circle .)
    TRIANGLE        reduce using rule 29 (statute -> circle .)
    RECTANGLE       reduce using rule 29 (statute -> circle .)
    SQUARE          reduce using rule 29 (statute -> circle .)
    CIRCLE          reduce using rule 29 (statute -> circle .)
    POLIGON         reduce using rule 29 (statute -> circle .)
    COLOR           reduce using rule 29 (statute -> circle .)
    PENSIZE         reduce using rule 29 (statute -> circle .)
    PENFORWARD      reduce using rule 29 (statute -> circle .)
    PENBACK         reduce using rule 29 (statute -> circle .)
    ROTATE          reduce using rule 29 (statute -> circle .)
    WHILE           reduce using rule 29 (statute -> circle .)
    RETURN          reduce using rule 29 (statute -> circle .)
    PENON           reduce using rule 29 (statute -> circle .)
    PENOFF          reduce using rule 29 (statute -> circle .)
    RBRACE          reduce using rule 29 (statute -> circle .)
    VAR             reduce using rule 29 (statute -> circle .)


state 44

    (30) statute -> poligon .

    ID              reduce using rule 30 (statute -> poligon .)
    IF              reduce using rule 30 (statute -> poligon .)
    TRIANGLE        reduce using rule 30 (statute -> poligon .)
    RECTANGLE       reduce using rule 30 (statute -> poligon .)
    SQUARE          reduce using rule 30 (statute -> poligon .)
    CIRCLE          reduce using rule 30 (statute -> poligon .)
    POLIGON         reduce using rule 30 (statute -> poligon .)
    COLOR           reduce using rule 30 (statute -> poligon .)
    PENSIZE         reduce using rule 30 (statute -> poligon .)
    PENFORWARD      reduce using rule 30 (statute -> poligon .)
    PENBACK         reduce using rule 30 (statute -> poligon .)
    ROTATE          reduce using rule 30 (statute -> poligon .)
    WHILE           reduce using rule 30 (statute -> poligon .)
    RETURN          reduce using rule 30 (statute -> poligon .)
    PENON           reduce using rule 30 (statute -> poligon .)
    PENOFF          reduce using rule 30 (statute -> poligon .)
    RBRACE          reduce using rule 30 (statute -> poligon .)
    VAR             reduce using rule 30 (statute -> poligon .)


state 45

    (31) statute -> color .

    ID              reduce using rule 31 (statute -> color .)
    IF              reduce using rule 31 (statute -> color .)
    TRIANGLE        reduce using rule 31 (statute -> color .)
    RECTANGLE       reduce using rule 31 (statute -> color .)
    SQUARE          reduce using rule 31 (statute -> color .)
    CIRCLE          reduce using rule 31 (statute -> color .)
    POLIGON         reduce using rule 31 (statute -> color .)
    COLOR           reduce using rule 31 (statute -> color .)
    PENSIZE         reduce using rule 31 (statute -> color .)
    PENFORWARD      reduce using rule 31 (statute -> color .)
    PENBACK         reduce using rule 31 (statute -> color .)
    ROTATE          reduce using rule 31 (statute -> color .)
    WHILE           reduce using rule 31 (statute -> color .)
    RETURN          reduce using rule 31 (statute -> color .)
    PENON           reduce using rule 31 (statute -> color .)
    PENOFF          reduce using rule 31 (statute -> color .)
    RBRACE          reduce using rule 31 (statute -> color .)
    VAR             reduce using rule 31 (statute -> color .)


state 46

    (32) statute -> pensize .

    ID              reduce using rule 32 (statute -> pensize .)
    IF              reduce using rule 32 (statute -> pensize .)
    TRIANGLE        reduce using rule 32 (statute -> pensize .)
    RECTANGLE       reduce using rule 32 (statute -> pensize .)
    SQUARE          reduce using rule 32 (statute -> pensize .)
    CIRCLE          reduce using rule 32 (statute -> pensize .)
    POLIGON         reduce using rule 32 (statute -> pensize .)
    COLOR           reduce using rule 32 (statute -> pensize .)
    PENSIZE         reduce using rule 32 (statute -> pensize .)
    PENFORWARD      reduce using rule 32 (statute -> pensize .)
    PENBACK         reduce using rule 32 (statute -> pensize .)
    ROTATE          reduce using rule 32 (statute -> pensize .)
    WHILE           reduce using rule 32 (statute -> pensize .)
    RETURN          reduce using rule 32 (statute -> pensize .)
    PENON           reduce using rule 32 (statute -> pensize .)
    PENOFF          reduce using rule 32 (statute -> pensize .)
    RBRACE          reduce using rule 32 (statute -> pensize .)
    VAR             reduce using rule 32 (statute -> pensize .)


state 47

    (33) statute -> penforward .

    ID              reduce using rule 33 (statute -> penforward .)
    IF              reduce using rule 33 (statute -> penforward .)
    TRIANGLE        reduce using rule 33 (statute -> penforward .)
    RECTANGLE       reduce using rule 33 (statute -> penforward .)
    SQUARE          reduce using rule 33 (statute -> penforward .)
    CIRCLE          reduce using rule 33 (statute -> penforward .)
    POLIGON         reduce using rule 33 (statute -> penforward .)
    COLOR           reduce using rule 33 (statute -> penforward .)
    PENSIZE         reduce using rule 33 (statute -> penforward .)
    PENFORWARD      reduce using rule 33 (statute -> penforward .)
    PENBACK         reduce using rule 33 (statute -> penforward .)
    ROTATE          reduce using rule 33 (statute -> penforward .)
    WHILE           reduce using rule 33 (statute -> penforward .)
    RETURN          reduce using rule 33 (statute -> penforward .)
    PENON           reduce using rule 33 (statute -> penforward .)
    PENOFF          reduce using rule 33 (statute -> penforward .)
    RBRACE          reduce using rule 33 (statute -> penforward .)
    VAR             reduce using rule 33 (statute -> penforward .)


state 48

    (34) statute -> penback .

    ID              reduce using rule 34 (statute -> penback .)
    IF              reduce using rule 34 (statute -> penback .)
    TRIANGLE        reduce using rule 34 (statute -> penback .)
    RECTANGLE       reduce using rule 34 (statute -> penback .)
    SQUARE          reduce using rule 34 (statute -> penback .)
    CIRCLE          reduce using rule 34 (statute -> penback .)
    POLIGON         reduce using rule 34 (statute -> penback .)
    COLOR           reduce using rule 34 (statute -> penback .)
    PENSIZE         reduce using rule 34 (statute -> penback .)
    PENFORWARD      reduce using rule 34 (statute -> penback .)
    PENBACK         reduce using rule 34 (statute -> penback .)
    ROTATE          reduce using rule 34 (statute -> penback .)
    WHILE           reduce using rule 34 (statute -> penback .)
    RETURN          reduce using rule 34 (statute -> penback .)
    PENON           reduce using rule 34 (statute -> penback .)
    PENOFF          reduce using rule 34 (statute -> penback .)
    RBRACE          reduce using rule 34 (statute -> penback .)
    VAR             reduce using rule 34 (statute -> penback .)


state 49

    (35) statute -> rotate .

    ID              reduce using rule 35 (statute -> rotate .)
    IF              reduce using rule 35 (statute -> rotate .)
    TRIANGLE        reduce using rule 35 (statute -> rotate .)
    RECTANGLE       reduce using rule 35 (statute -> rotate .)
    SQUARE          reduce using rule 35 (statute -> rotate .)
    CIRCLE          reduce using rule 35 (statute -> rotate .)
    POLIGON         reduce using rule 35 (statute -> rotate .)
    COLOR           reduce using rule 35 (statute -> rotate .)
    PENSIZE         reduce using rule 35 (statute -> rotate .)
    PENFORWARD      reduce using rule 35 (statute -> rotate .)
    PENBACK         reduce using rule 35 (statute -> rotate .)
    ROTATE          reduce using rule 35 (statute -> rotate .)
    WHILE           reduce using rule 35 (statute -> rotate .)
    RETURN          reduce using rule 35 (statute -> rotate .)
    PENON           reduce using rule 35 (statute -> rotate .)
    PENOFF          reduce using rule 35 (statute -> rotate .)
    RBRACE          reduce using rule 35 (statute -> rotate .)
    VAR             reduce using rule 35 (statute -> rotate .)


state 50

    (36) statute -> while .

    ID              reduce using rule 36 (statute -> while .)
    IF              reduce using rule 36 (statute -> while .)
    TRIANGLE        reduce using rule 36 (statute -> while .)
    RECTANGLE       reduce using rule 36 (statute -> while .)
    SQUARE          reduce using rule 36 (statute -> while .)
    CIRCLE          reduce using rule 36 (statute -> while .)
    POLIGON         reduce using rule 36 (statute -> while .)
    COLOR           reduce using rule 36 (statute -> while .)
    PENSIZE         reduce using rule 36 (statute -> while .)
    PENFORWARD      reduce using rule 36 (statute -> while .)
    PENBACK         reduce using rule 36 (statute -> while .)
    ROTATE          reduce using rule 36 (statute -> while .)
    WHILE           reduce using rule 36 (statute -> while .)
    RETURN          reduce using rule 36 (statute -> while .)
    PENON           reduce using rule 36 (statute -> while .)
    PENOFF          reduce using rule 36 (statute -> while .)
    RBRACE          reduce using rule 36 (statute -> while .)
    VAR             reduce using rule 36 (statute -> while .)


state 51

    (37) statute -> return .

    ID              reduce using rule 37 (statute -> return .)
    IF              reduce using rule 37 (statute -> return .)
    TRIANGLE        reduce using rule 37 (statute -> return .)
    RECTANGLE       reduce using rule 37 (statute -> return .)
    SQUARE          reduce using rule 37 (statute -> return .)
    CIRCLE          reduce using rule 37 (statute -> return .)
    POLIGON         reduce using rule 37 (statute -> return .)
    COLOR           reduce using rule 37 (statute -> return .)
    PENSIZE         reduce using rule 37 (statute -> return .)
    PENFORWARD      reduce using rule 37 (statute -> return .)
    PENBACK         reduce using rule 37 (statute -> return .)
    ROTATE          reduce using rule 37 (statute -> return .)
    WHILE           reduce using rule 37 (statute -> return .)
    RETURN          reduce using rule 37 (statute -> return .)
    PENON           reduce using rule 37 (statute -> return .)
    PENOFF          reduce using rule 37 (statute -> return .)
    RBRACE          reduce using rule 37 (statute -> return .)
    VAR             reduce using rule 37 (statute -> return .)


state 52

    (38) statute -> penon .

    ID              reduce using rule 38 (statute -> penon .)
    IF              reduce using rule 38 (statute -> penon .)
    TRIANGLE        reduce using rule 38 (statute -> penon .)
    RECTANGLE       reduce using rule 38 (statute -> penon .)
    SQUARE          reduce using rule 38 (statute -> penon .)
    CIRCLE          reduce using rule 38 (statute -> penon .)
    POLIGON         reduce using rule 38 (statute -> penon .)
    COLOR           reduce using rule 38 (statute -> penon .)
    PENSIZE         reduce using rule 38 (statute -> penon .)
    PENFORWARD      reduce using rule 38 (statute -> penon .)
    PENBACK         reduce using rule 38 (statute -> penon .)
    ROTATE          reduce using rule 38 (statute -> penon .)
    WHILE           reduce using rule 38 (statute -> penon .)
    RETURN          reduce using rule 38 (statute -> penon .)
    PENON           reduce using rule 38 (statute -> penon .)
    PENOFF          reduce using rule 38 (statute -> penon .)
    RBRACE          reduce using rule 38 (statute -> penon .)
    VAR             reduce using rule 38 (statute -> penon .)


state 53

    (39) statute -> penoff .

    ID              reduce using rule 39 (statute -> penoff .)
    IF              reduce using rule 39 (statute -> penoff .)
    TRIANGLE        reduce using rule 39 (statute -> penoff .)
    RECTANGLE       reduce using rule 39 (statute -> penoff .)
    SQUARE          reduce using rule 39 (statute -> penoff .)
    CIRCLE          reduce using rule 39 (statute -> penoff .)
    POLIGON         reduce using rule 39 (statute -> penoff .)
    COLOR           reduce using rule 39 (statute -> penoff .)
    PENSIZE         reduce using rule 39 (statute -> penoff .)
    PENFORWARD      reduce using rule 39 (statute -> penoff .)
    PENBACK         reduce using rule 39 (statute -> penoff .)
    ROTATE          reduce using rule 39 (statute -> penoff .)
    WHILE           reduce using rule 39 (statute -> penoff .)
    RETURN          reduce using rule 39 (statute -> penoff .)
    PENON           reduce using rule 39 (statute -> penoff .)
    PENOFF          reduce using rule 39 (statute -> penoff .)
    RBRACE          reduce using rule 39 (statute -> penoff .)
    VAR             reduce using rule 39 (statute -> penoff .)


state 54

    (43) assignment -> ID . cte_id ASSIGN expression SEMICOLON
    (44) assignment -> ID . cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> ID . check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (45) cte_id -> .
    (122) check_name -> .

    ASSIGN          reduce using rule 45 (cte_id -> .)
    LBRACKET        reduce using rule 45 (cte_id -> .)
    LPAREN          reduce using rule 122 (check_name -> .)

    cte_id                         shift and go to state 80
    check_name                     shift and go to state 81

state 55

    (88) condition -> IF . LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if

    LPAREN          shift and go to state 82


state 56

    (66) triangle -> TRIANGLE . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 83


state 57

    (67) rectangle -> RECTANGLE . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 84


state 58

    (65) square -> SQUARE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 85


state 59

    (64) circle -> CIRCLE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 60

    (68) poligon -> POLIGON . LPAREN exp COMMA exp RPAREN SEMICOLON

    LPAREN          shift and go to state 87


state 61

    (63) color -> COLOR . LPAREN color_cte RPAREN SEMICOLON

    LPAREN          shift and go to state 88


state 62

    (71) pensize -> PENSIZE . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 89


state 63

    (72) penforward -> PENFORWARD . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 90


state 64

    (73) penback -> PENBACK . LPAREN exp RPAREN SEMICOLON

    LPAREN          shift and go to state 91


state 65

    (69) rotate -> ROTATE . LPAREN exp RPAREN SEMICOLON
    (70) rotate -> ROTATE . LPAREN CTE_STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 92


state 66

    (40) while -> WHILE . while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (41) while_return -> .

    LPAREN          reduce using rule 41 (while_return -> .)

    while_return                   shift and go to state 93

state 67

    (128) return -> RETURN . var_cte SEMICOLON
    (129) return -> RETURN . st_cte SEMICOLON
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (52) st_cte -> . STRING
    (53) st_cte -> . cte_bool
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    ID              shift and go to state 96
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    STRING          shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    var_cte                        shift and go to state 94
    st_cte                         shift and go to state 95
    cte_bool                       shift and go to state 99
    call                           shift and go to state 100

state 68

    (74) penon -> PENON . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 104


state 69

    (75) penoff -> PENOFF . LPAREN RPAREN SEMICOLON

    LPAREN          shift and go to state 105


state 70

    (54) funcs -> FUNC type ID LPAREN . type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (76) type -> . INT
    (77) type -> . FLOAT
    (78) type -> . STRING
    (79) type -> . BOOL

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 106

state 71

    (55) funcs -> FUNC VOID ID LPAREN . type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (76) type -> . INT
    (77) type -> . FLOAT
    (78) type -> . STRING
    (79) type -> . BOOL

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 107

state 72

    (14) vars2 -> type vars3 SEMICOLON . vars2
    (14) vars2 -> . type vars3 SEMICOLON vars2
    (15) vars2 -> . empty
    (76) type -> . INT
    (77) type -> . FLOAT
    (78) type -> . STRING
    (79) type -> . BOOL
    (130) empty -> .

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22
    DAVINCI         reduce using rule 130 (empty -> .)
    FUNC            reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)
    RBRACE          reduce using rule 130 (empty -> .)

    type                           shift and go to state 24
    vars2                          shift and go to state 108
    empty                          shift and go to state 25

state 73

    (16) vars3 -> ID ASSIGN . expression vars4
    (94) expression -> . exp expression1
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    expression                     shift and go to state 110
    exp                            shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 74

    (18) vars3 -> ID vars4 .

    SEMICOLON       reduce using rule 18 (vars3 -> ID vars4 .)


state 75

    (17) vars3 -> ID list . vars4
    (19) vars4 -> . COMMA vars3
    (20) vars4 -> . empty
    (130) empty -> .

    COMMA           shift and go to state 77
    SEMICOLON       reduce using rule 130 (empty -> .)

    vars4                          shift and go to state 117
    empty                          shift and go to state 78

state 76

    (22) list -> LIST .

    COMMA           reduce using rule 22 (list -> LIST .)
    SEMICOLON       reduce using rule 22 (list -> LIST .)
    DIVIDE          reduce using rule 22 (list -> LIST .)
    TIMES           reduce using rule 22 (list -> LIST .)
    MINUS           reduce using rule 22 (list -> LIST .)
    PLUS            reduce using rule 22 (list -> LIST .)
    LESSER          reduce using rule 22 (list -> LIST .)
    GREATER         reduce using rule 22 (list -> LIST .)
    EQUAL           reduce using rule 22 (list -> LIST .)
    NOTEQUAL        reduce using rule 22 (list -> LIST .)
    GREATEROREQUAL  reduce using rule 22 (list -> LIST .)
    LESSEROREQUAL   reduce using rule 22 (list -> LIST .)
    RPAREN          reduce using rule 22 (list -> LIST .)
    RBRACKET        reduce using rule 22 (list -> LIST .)


state 77

    (19) vars4 -> COMMA . vars3
    (16) vars3 -> . ID ASSIGN expression vars4
    (17) vars3 -> . ID list vars4
    (18) vars3 -> . ID vars4

    ID              shift and go to state 33

    vars3                          shift and go to state 118

state 78

    (20) vars4 -> empty .

    SEMICOLON       reduce using rule 20 (vars4 -> empty .)


state 79

    (8) b1 -> vars local_vars b2 .
    (11) b2 -> b2 . statute
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          reduce using rule 8 (b1 -> vars local_vars b2 .)
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    statute                        shift and go to state 36
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 80

    (43) assignment -> ID cte_id . ASSIGN expression SEMICOLON
    (44) assignment -> ID cte_id . LBRACKET exp RBRACKET ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 119
    LBRACKET        shift and go to state 120


state 81

    (121) call -> ID check_name . LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 121


state 82

    (88) condition -> IF LPAREN . expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (94) expression -> . exp expression1
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    expression                     shift and go to state 122
    exp                            shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 83

    (66) triangle -> TRIANGLE LPAREN . exp COMMA exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 123
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 84

    (67) rectangle -> RECTANGLE LPAREN . exp COMMA exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 124
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 85

    (65) square -> SQUARE LPAREN . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 125
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 86

    (64) circle -> CIRCLE LPAREN . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 126
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 87

    (68) poligon -> POLIGON LPAREN . exp COMMA exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 127
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 88

    (63) color -> COLOR LPAREN . color_cte RPAREN SEMICOLON
    (46) color_cte -> . RED
    (47) color_cte -> . BLUE
    (48) color_cte -> . YELLOW
    (49) color_cte -> . GREEN
    (50) color_cte -> . PINK
    (51) color_cte -> . PURPLE

    RED             shift and go to state 129
    BLUE            shift and go to state 130
    YELLOW          shift and go to state 131
    GREEN           shift and go to state 132
    PINK            shift and go to state 133
    PURPLE          shift and go to state 134

    color_cte                      shift and go to state 128

state 89

    (71) pensize -> PENSIZE LPAREN . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 135
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 90

    (72) penforward -> PENFORWARD LPAREN . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 136
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 91

    (73) penback -> PENBACK LPAREN . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 137
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 92

    (69) rotate -> ROTATE LPAREN . exp RPAREN SEMICOLON
    (70) rotate -> ROTATE LPAREN . CTE_STRING RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    CTE_STRING      shift and go to state 139
    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 138
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 93

    (40) while -> WHILE while_return . LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while

    LPAREN          shift and go to state 140


state 94

    (128) return -> RETURN var_cte . SEMICOLON

    SEMICOLON       shift and go to state 141


state 95

    (129) return -> RETURN st_cte . SEMICOLON

    SEMICOLON       shift and go to state 142


state 96

    (80) var_cte -> ID .
    (84) var_cte -> ID . list
    (121) call -> ID . check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (22) list -> . LIST
    (122) check_name -> .

    SEMICOLON       reduce using rule 80 (var_cte -> ID .)
    LIST            shift and go to state 76
    LPAREN          reduce using rule 122 (check_name -> .)

    list                           shift and go to state 143
    check_name                     shift and go to state 81

state 97

    (81) var_cte -> CTE_INT .

    SEMICOLON       reduce using rule 81 (var_cte -> CTE_INT .)
    DIVIDE          reduce using rule 81 (var_cte -> CTE_INT .)
    TIMES           reduce using rule 81 (var_cte -> CTE_INT .)
    MINUS           reduce using rule 81 (var_cte -> CTE_INT .)
    PLUS            reduce using rule 81 (var_cte -> CTE_INT .)
    LESSER          reduce using rule 81 (var_cte -> CTE_INT .)
    GREATER         reduce using rule 81 (var_cte -> CTE_INT .)
    EQUAL           reduce using rule 81 (var_cte -> CTE_INT .)
    NOTEQUAL        reduce using rule 81 (var_cte -> CTE_INT .)
    GREATEROREQUAL  reduce using rule 81 (var_cte -> CTE_INT .)
    LESSEROREQUAL   reduce using rule 81 (var_cte -> CTE_INT .)
    COMMA           reduce using rule 81 (var_cte -> CTE_INT .)
    RPAREN          reduce using rule 81 (var_cte -> CTE_INT .)
    RBRACKET        reduce using rule 81 (var_cte -> CTE_INT .)


state 98

    (82) var_cte -> CTE_FLOAT .

    SEMICOLON       reduce using rule 82 (var_cte -> CTE_FLOAT .)
    DIVIDE          reduce using rule 82 (var_cte -> CTE_FLOAT .)
    TIMES           reduce using rule 82 (var_cte -> CTE_FLOAT .)
    MINUS           reduce using rule 82 (var_cte -> CTE_FLOAT .)
    PLUS            reduce using rule 82 (var_cte -> CTE_FLOAT .)
    LESSER          reduce using rule 82 (var_cte -> CTE_FLOAT .)
    GREATER         reduce using rule 82 (var_cte -> CTE_FLOAT .)
    EQUAL           reduce using rule 82 (var_cte -> CTE_FLOAT .)
    NOTEQUAL        reduce using rule 82 (var_cte -> CTE_FLOAT .)
    GREATEROREQUAL  reduce using rule 82 (var_cte -> CTE_FLOAT .)
    LESSEROREQUAL   reduce using rule 82 (var_cte -> CTE_FLOAT .)
    COMMA           reduce using rule 82 (var_cte -> CTE_FLOAT .)
    RPAREN          reduce using rule 82 (var_cte -> CTE_FLOAT .)
    RBRACKET        reduce using rule 82 (var_cte -> CTE_FLOAT .)


state 99

    (83) var_cte -> cte_bool .
    (53) st_cte -> cte_bool .

  ! reduce/reduce conflict for SEMICOLON resolved using rule 53 (st_cte -> cte_bool .)
    SEMICOLON       reduce using rule 53 (st_cte -> cte_bool .)

  ! SEMICOLON       [ reduce using rule 83 (var_cte -> cte_bool .) ]


state 100

    (85) var_cte -> call .

    SEMICOLON       reduce using rule 85 (var_cte -> call .)
    DIVIDE          reduce using rule 85 (var_cte -> call .)
    TIMES           reduce using rule 85 (var_cte -> call .)
    MINUS           reduce using rule 85 (var_cte -> call .)
    PLUS            reduce using rule 85 (var_cte -> call .)
    LESSER          reduce using rule 85 (var_cte -> call .)
    GREATER         reduce using rule 85 (var_cte -> call .)
    EQUAL           reduce using rule 85 (var_cte -> call .)
    NOTEQUAL        reduce using rule 85 (var_cte -> call .)
    GREATEROREQUAL  reduce using rule 85 (var_cte -> call .)
    LESSEROREQUAL   reduce using rule 85 (var_cte -> call .)
    COMMA           reduce using rule 85 (var_cte -> call .)
    RPAREN          reduce using rule 85 (var_cte -> call .)
    RBRACKET        reduce using rule 85 (var_cte -> call .)


state 101

    (52) st_cte -> STRING .

    SEMICOLON       reduce using rule 52 (st_cte -> STRING .)
    RPAREN          reduce using rule 52 (st_cte -> STRING .)


state 102

    (86) cte_bool -> TRUE .

    SEMICOLON       reduce using rule 86 (cte_bool -> TRUE .)
    DIVIDE          reduce using rule 86 (cte_bool -> TRUE .)
    TIMES           reduce using rule 86 (cte_bool -> TRUE .)
    MINUS           reduce using rule 86 (cte_bool -> TRUE .)
    PLUS            reduce using rule 86 (cte_bool -> TRUE .)
    LESSER          reduce using rule 86 (cte_bool -> TRUE .)
    GREATER         reduce using rule 86 (cte_bool -> TRUE .)
    EQUAL           reduce using rule 86 (cte_bool -> TRUE .)
    NOTEQUAL        reduce using rule 86 (cte_bool -> TRUE .)
    GREATEROREQUAL  reduce using rule 86 (cte_bool -> TRUE .)
    LESSEROREQUAL   reduce using rule 86 (cte_bool -> TRUE .)
    COMMA           reduce using rule 86 (cte_bool -> TRUE .)
    RPAREN          reduce using rule 86 (cte_bool -> TRUE .)
    RBRACKET        reduce using rule 86 (cte_bool -> TRUE .)


state 103

    (87) cte_bool -> FALSE .

    SEMICOLON       reduce using rule 87 (cte_bool -> FALSE .)
    DIVIDE          reduce using rule 87 (cte_bool -> FALSE .)
    TIMES           reduce using rule 87 (cte_bool -> FALSE .)
    MINUS           reduce using rule 87 (cte_bool -> FALSE .)
    PLUS            reduce using rule 87 (cte_bool -> FALSE .)
    LESSER          reduce using rule 87 (cte_bool -> FALSE .)
    GREATER         reduce using rule 87 (cte_bool -> FALSE .)
    EQUAL           reduce using rule 87 (cte_bool -> FALSE .)
    NOTEQUAL        reduce using rule 87 (cte_bool -> FALSE .)
    GREATEROREQUAL  reduce using rule 87 (cte_bool -> FALSE .)
    LESSEROREQUAL   reduce using rule 87 (cte_bool -> FALSE .)
    COMMA           reduce using rule 87 (cte_bool -> FALSE .)
    RPAREN          reduce using rule 87 (cte_bool -> FALSE .)
    RBRACKET        reduce using rule 87 (cte_bool -> FALSE .)


state 104

    (74) penon -> PENON LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 144


state 105

    (75) penoff -> PENOFF LPAREN . RPAREN SEMICOLON

    RPAREN          shift and go to state 145


state 106

    (54) funcs -> FUNC type ID LPAREN type . ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 146


state 107

    (55) funcs -> FUNC VOID ID LPAREN type . ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3

    ID              shift and go to state 147


state 108

    (14) vars2 -> type vars3 SEMICOLON vars2 .

    DAVINCI         reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    FUNC            reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    VAR             reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    ID              reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    IF              reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    TRIANGLE        reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    RECTANGLE       reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    SQUARE          reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    CIRCLE          reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    POLIGON         reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    COLOR           reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    PENSIZE         reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    PENFORWARD      reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    PENBACK         reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    ROTATE          reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    WHILE           reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    RETURN          reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    PENON           reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    PENOFF          reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)
    RBRACE          reduce using rule 14 (vars2 -> type vars3 SEMICOLON vars2 .)


state 109

    (113) factor -> ID . push_id
    (80) var_cte -> ID .
    (84) var_cte -> ID . list
    (121) call -> ID . check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (116) push_id -> .
    (22) list -> . LIST
    (122) check_name -> .

  ! reduce/reduce conflict for DIVIDE resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for LESSER resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for GREATER resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for EQUAL resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for NOTEQUAL resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for GREATEROREQUAL resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for LESSEROREQUAL resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 80 (var_cte -> ID .)
    DIVIDE          reduce using rule 80 (var_cte -> ID .)
    TIMES           reduce using rule 80 (var_cte -> ID .)
    MINUS           reduce using rule 80 (var_cte -> ID .)
    PLUS            reduce using rule 80 (var_cte -> ID .)
    LESSER          reduce using rule 80 (var_cte -> ID .)
    GREATER         reduce using rule 80 (var_cte -> ID .)
    EQUAL           reduce using rule 80 (var_cte -> ID .)
    NOTEQUAL        reduce using rule 80 (var_cte -> ID .)
    GREATEROREQUAL  reduce using rule 80 (var_cte -> ID .)
    LESSEROREQUAL   reduce using rule 80 (var_cte -> ID .)
    COMMA           reduce using rule 80 (var_cte -> ID .)
    SEMICOLON       reduce using rule 80 (var_cte -> ID .)
    RPAREN          reduce using rule 80 (var_cte -> ID .)
    RBRACKET        reduce using rule 80 (var_cte -> ID .)
    LIST            shift and go to state 76
    LPAREN          reduce using rule 122 (check_name -> .)

  ! DIVIDE          [ reduce using rule 116 (push_id -> .) ]
  ! TIMES           [ reduce using rule 116 (push_id -> .) ]
  ! MINUS           [ reduce using rule 116 (push_id -> .) ]
  ! PLUS            [ reduce using rule 116 (push_id -> .) ]
  ! LESSER          [ reduce using rule 116 (push_id -> .) ]
  ! GREATER         [ reduce using rule 116 (push_id -> .) ]
  ! EQUAL           [ reduce using rule 116 (push_id -> .) ]
  ! NOTEQUAL        [ reduce using rule 116 (push_id -> .) ]
  ! GREATEROREQUAL  [ reduce using rule 116 (push_id -> .) ]
  ! LESSEROREQUAL   [ reduce using rule 116 (push_id -> .) ]
  ! COMMA           [ reduce using rule 116 (push_id -> .) ]
  ! SEMICOLON       [ reduce using rule 116 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 116 (push_id -> .) ]
  ! RBRACKET        [ reduce using rule 116 (push_id -> .) ]

    push_id                        shift and go to state 148
    list                           shift and go to state 143
    check_name                     shift and go to state 81

state 110

    (16) vars3 -> ID ASSIGN expression . vars4
    (19) vars4 -> . COMMA vars3
    (20) vars4 -> . empty
    (130) empty -> .

    COMMA           shift and go to state 77
    SEMICOLON       reduce using rule 130 (empty -> .)

    vars4                          shift and go to state 149
    empty                          shift and go to state 78

state 111

    (94) expression -> exp . expression1
    (95) expression1 -> . LESSER relop exp top_relop
    (96) expression1 -> . GREATER relop exp top_relop
    (97) expression1 -> . EQUAL relop exp top_relop
    (98) expression1 -> . NOTEQUAL relop exp top_relop
    (99) expression1 -> . GREATEROREQUAL relop exp top_relop
    (100) expression1 -> . LESSEROREQUAL relop exp top_relop
    (101) expression1 -> . empty
    (130) empty -> .

    LESSER          shift and go to state 151
    GREATER         shift and go to state 152
    EQUAL           shift and go to state 153
    NOTEQUAL        shift and go to state 154
    GREATEROREQUAL  shift and go to state 155
    LESSEROREQUAL   shift and go to state 156
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    RPAREN          reduce using rule 130 (empty -> .)

    expression1                    shift and go to state 150
    empty                          shift and go to state 157

state 112

    (104) exp -> term . top_exp exp1
    (108) top_exp -> .

    MINUS           reduce using rule 108 (top_exp -> .)
    PLUS            reduce using rule 108 (top_exp -> .)
    LESSER          reduce using rule 108 (top_exp -> .)
    GREATER         reduce using rule 108 (top_exp -> .)
    EQUAL           reduce using rule 108 (top_exp -> .)
    NOTEQUAL        reduce using rule 108 (top_exp -> .)
    GREATEROREQUAL  reduce using rule 108 (top_exp -> .)
    LESSEROREQUAL   reduce using rule 108 (top_exp -> .)
    COMMA           reduce using rule 108 (top_exp -> .)
    SEMICOLON       reduce using rule 108 (top_exp -> .)
    RPAREN          reduce using rule 108 (top_exp -> .)
    RBRACKET        reduce using rule 108 (top_exp -> .)

    top_exp                        shift and go to state 158

state 113

    (117) term -> factor . top_factor term1
    (110) top_factor -> .

    DIVIDE          reduce using rule 110 (top_factor -> .)
    TIMES           reduce using rule 110 (top_factor -> .)
    MINUS           reduce using rule 110 (top_factor -> .)
    PLUS            reduce using rule 110 (top_factor -> .)
    LESSER          reduce using rule 110 (top_factor -> .)
    GREATER         reduce using rule 110 (top_factor -> .)
    EQUAL           reduce using rule 110 (top_factor -> .)
    NOTEQUAL        reduce using rule 110 (top_factor -> .)
    GREATEROREQUAL  reduce using rule 110 (top_factor -> .)
    LESSEROREQUAL   reduce using rule 110 (top_factor -> .)
    COMMA           reduce using rule 110 (top_factor -> .)
    SEMICOLON       reduce using rule 110 (top_factor -> .)
    RPAREN          reduce using rule 110 (top_factor -> .)
    RBRACKET        reduce using rule 110 (top_factor -> .)

    top_factor                     shift and go to state 159

state 114

    (111) factor -> LPAREN . false_bottom expression RPAREN end_par
    (114) false_bottom -> .

    LPAREN          reduce using rule 114 (false_bottom -> .)
    ID              reduce using rule 114 (false_bottom -> .)
    CTE_INT         reduce using rule 114 (false_bottom -> .)
    CTE_FLOAT       reduce using rule 114 (false_bottom -> .)
    TRUE            reduce using rule 114 (false_bottom -> .)
    FALSE           reduce using rule 114 (false_bottom -> .)

    false_bottom                   shift and go to state 160

state 115

    (112) factor -> var_cte .

    DIVIDE          reduce using rule 112 (factor -> var_cte .)
    TIMES           reduce using rule 112 (factor -> var_cte .)
    MINUS           reduce using rule 112 (factor -> var_cte .)
    PLUS            reduce using rule 112 (factor -> var_cte .)
    LESSER          reduce using rule 112 (factor -> var_cte .)
    GREATER         reduce using rule 112 (factor -> var_cte .)
    EQUAL           reduce using rule 112 (factor -> var_cte .)
    NOTEQUAL        reduce using rule 112 (factor -> var_cte .)
    GREATEROREQUAL  reduce using rule 112 (factor -> var_cte .)
    LESSEROREQUAL   reduce using rule 112 (factor -> var_cte .)
    COMMA           reduce using rule 112 (factor -> var_cte .)
    SEMICOLON       reduce using rule 112 (factor -> var_cte .)
    RPAREN          reduce using rule 112 (factor -> var_cte .)
    RBRACKET        reduce using rule 112 (factor -> var_cte .)


state 116

    (83) var_cte -> cte_bool .

    DIVIDE          reduce using rule 83 (var_cte -> cte_bool .)
    TIMES           reduce using rule 83 (var_cte -> cte_bool .)
    MINUS           reduce using rule 83 (var_cte -> cte_bool .)
    PLUS            reduce using rule 83 (var_cte -> cte_bool .)
    LESSER          reduce using rule 83 (var_cte -> cte_bool .)
    GREATER         reduce using rule 83 (var_cte -> cte_bool .)
    EQUAL           reduce using rule 83 (var_cte -> cte_bool .)
    NOTEQUAL        reduce using rule 83 (var_cte -> cte_bool .)
    GREATEROREQUAL  reduce using rule 83 (var_cte -> cte_bool .)
    LESSEROREQUAL   reduce using rule 83 (var_cte -> cte_bool .)
    COMMA           reduce using rule 83 (var_cte -> cte_bool .)
    SEMICOLON       reduce using rule 83 (var_cte -> cte_bool .)
    RPAREN          reduce using rule 83 (var_cte -> cte_bool .)
    RBRACKET        reduce using rule 83 (var_cte -> cte_bool .)


state 117

    (17) vars3 -> ID list vars4 .

    SEMICOLON       reduce using rule 17 (vars3 -> ID list vars4 .)


state 118

    (19) vars4 -> COMMA vars3 .

    SEMICOLON       reduce using rule 19 (vars4 -> COMMA vars3 .)


state 119

    (43) assignment -> ID cte_id ASSIGN . expression SEMICOLON
    (94) expression -> . exp expression1
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    expression                     shift and go to state 161
    exp                            shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 120

    (44) assignment -> ID cte_id LBRACKET . exp RBRACKET ASSIGN expression SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 162
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 121

    (121) call -> ID check_name LPAREN . create_era call1 RPAREN SEMICOLON gosub
    (123) create_era -> .

    ID              reduce using rule 123 (create_era -> .)
    STRING          reduce using rule 123 (create_era -> .)
    TRUE            reduce using rule 123 (create_era -> .)
    FALSE           reduce using rule 123 (create_era -> .)
    LPAREN          reduce using rule 123 (create_era -> .)
    CTE_INT         reduce using rule 123 (create_era -> .)
    CTE_FLOAT       reduce using rule 123 (create_era -> .)

    create_era                     shift and go to state 163

state 122

    (88) condition -> IF LPAREN expression . RPAREN type_check LBRACE b2 RBRACE condition1 end_if

    RPAREN          shift and go to state 164


state 123

    (66) triangle -> TRIANGLE LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 165


state 124

    (67) rectangle -> RECTANGLE LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 166


state 125

    (65) square -> SQUARE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 167


state 126

    (64) circle -> CIRCLE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 168


state 127

    (68) poligon -> POLIGON LPAREN exp . COMMA exp RPAREN SEMICOLON

    COMMA           shift and go to state 169


state 128

    (63) color -> COLOR LPAREN color_cte . RPAREN SEMICOLON

    RPAREN          shift and go to state 170


state 129

    (46) color_cte -> RED .

    RPAREN          reduce using rule 46 (color_cte -> RED .)


state 130

    (47) color_cte -> BLUE .

    RPAREN          reduce using rule 47 (color_cte -> BLUE .)


state 131

    (48) color_cte -> YELLOW .

    RPAREN          reduce using rule 48 (color_cte -> YELLOW .)


state 132

    (49) color_cte -> GREEN .

    RPAREN          reduce using rule 49 (color_cte -> GREEN .)


state 133

    (50) color_cte -> PINK .

    RPAREN          reduce using rule 50 (color_cte -> PINK .)


state 134

    (51) color_cte -> PURPLE .

    RPAREN          reduce using rule 51 (color_cte -> PURPLE .)


state 135

    (71) pensize -> PENSIZE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 171


state 136

    (72) penforward -> PENFORWARD LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 172


state 137

    (73) penback -> PENBACK LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 173


state 138

    (69) rotate -> ROTATE LPAREN exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 174


state 139

    (70) rotate -> ROTATE LPAREN CTE_STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 175


state 140

    (40) while -> WHILE while_return LPAREN . type_check expression RPAREN LBRACE b2 RBRACE end_while
    (91) type_check -> .

    LPAREN          reduce using rule 91 (type_check -> .)
    ID              reduce using rule 91 (type_check -> .)
    CTE_INT         reduce using rule 91 (type_check -> .)
    CTE_FLOAT       reduce using rule 91 (type_check -> .)
    TRUE            reduce using rule 91 (type_check -> .)
    FALSE           reduce using rule 91 (type_check -> .)

    type_check                     shift and go to state 176

state 141

    (128) return -> RETURN var_cte SEMICOLON .

    ID              reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    IF              reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    TRIANGLE        reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    RECTANGLE       reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    SQUARE          reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    CIRCLE          reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    POLIGON         reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    COLOR           reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    PENSIZE         reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    PENFORWARD      reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    PENBACK         reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    ROTATE          reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    WHILE           reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    RETURN          reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    PENON           reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    PENOFF          reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    RBRACE          reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)
    VAR             reduce using rule 128 (return -> RETURN var_cte SEMICOLON .)


state 142

    (129) return -> RETURN st_cte SEMICOLON .

    ID              reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    IF              reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    TRIANGLE        reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    RECTANGLE       reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    SQUARE          reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    CIRCLE          reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    POLIGON         reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    COLOR           reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    PENSIZE         reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    PENFORWARD      reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    PENBACK         reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    ROTATE          reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    WHILE           reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    RETURN          reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    PENON           reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    PENOFF          reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    RBRACE          reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)
    VAR             reduce using rule 129 (return -> RETURN st_cte SEMICOLON .)


state 143

    (84) var_cte -> ID list .

    SEMICOLON       reduce using rule 84 (var_cte -> ID list .)
    DIVIDE          reduce using rule 84 (var_cte -> ID list .)
    TIMES           reduce using rule 84 (var_cte -> ID list .)
    MINUS           reduce using rule 84 (var_cte -> ID list .)
    PLUS            reduce using rule 84 (var_cte -> ID list .)
    LESSER          reduce using rule 84 (var_cte -> ID list .)
    GREATER         reduce using rule 84 (var_cte -> ID list .)
    EQUAL           reduce using rule 84 (var_cte -> ID list .)
    NOTEQUAL        reduce using rule 84 (var_cte -> ID list .)
    GREATEROREQUAL  reduce using rule 84 (var_cte -> ID list .)
    LESSEROREQUAL   reduce using rule 84 (var_cte -> ID list .)
    COMMA           reduce using rule 84 (var_cte -> ID list .)
    RPAREN          reduce using rule 84 (var_cte -> ID list .)
    RBRACKET        reduce using rule 84 (var_cte -> ID list .)


state 144

    (74) penon -> PENON LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 177


state 145

    (75) penoff -> PENOFF LPAREN RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 178


state 146

    (54) funcs -> FUNC type ID LPAREN type ID . funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (56) funcs1 -> . funcs1 COMMA type ID
    (57) funcs1 -> . empty
    (130) empty -> .

    RPAREN          reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)

    funcs1                         shift and go to state 179
    empty                          shift and go to state 180

state 147

    (55) funcs -> FUNC VOID ID LPAREN type ID . funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (56) funcs1 -> . funcs1 COMMA type ID
    (57) funcs1 -> . empty
    (130) empty -> .

    RPAREN          reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)

    funcs1                         shift and go to state 181
    empty                          shift and go to state 180

state 148

    (113) factor -> ID push_id .

    DIVIDE          reduce using rule 113 (factor -> ID push_id .)
    TIMES           reduce using rule 113 (factor -> ID push_id .)
    MINUS           reduce using rule 113 (factor -> ID push_id .)
    PLUS            reduce using rule 113 (factor -> ID push_id .)
    LESSER          reduce using rule 113 (factor -> ID push_id .)
    GREATER         reduce using rule 113 (factor -> ID push_id .)
    EQUAL           reduce using rule 113 (factor -> ID push_id .)
    NOTEQUAL        reduce using rule 113 (factor -> ID push_id .)
    GREATEROREQUAL  reduce using rule 113 (factor -> ID push_id .)
    LESSEROREQUAL   reduce using rule 113 (factor -> ID push_id .)
    COMMA           reduce using rule 113 (factor -> ID push_id .)
    SEMICOLON       reduce using rule 113 (factor -> ID push_id .)
    RPAREN          reduce using rule 113 (factor -> ID push_id .)
    RBRACKET        reduce using rule 113 (factor -> ID push_id .)


state 149

    (16) vars3 -> ID ASSIGN expression vars4 .

    SEMICOLON       reduce using rule 16 (vars3 -> ID ASSIGN expression vars4 .)


state 150

    (94) expression -> exp expression1 .

    COMMA           reduce using rule 94 (expression -> exp expression1 .)
    SEMICOLON       reduce using rule 94 (expression -> exp expression1 .)
    RPAREN          reduce using rule 94 (expression -> exp expression1 .)


state 151

    (95) expression1 -> LESSER . relop exp top_relop
    (102) relop -> .

    LPAREN          reduce using rule 102 (relop -> .)
    ID              reduce using rule 102 (relop -> .)
    CTE_INT         reduce using rule 102 (relop -> .)
    CTE_FLOAT       reduce using rule 102 (relop -> .)
    TRUE            reduce using rule 102 (relop -> .)
    FALSE           reduce using rule 102 (relop -> .)

    relop                          shift and go to state 182

state 152

    (96) expression1 -> GREATER . relop exp top_relop
    (102) relop -> .

    LPAREN          reduce using rule 102 (relop -> .)
    ID              reduce using rule 102 (relop -> .)
    CTE_INT         reduce using rule 102 (relop -> .)
    CTE_FLOAT       reduce using rule 102 (relop -> .)
    TRUE            reduce using rule 102 (relop -> .)
    FALSE           reduce using rule 102 (relop -> .)

    relop                          shift and go to state 183

state 153

    (97) expression1 -> EQUAL . relop exp top_relop
    (102) relop -> .

    LPAREN          reduce using rule 102 (relop -> .)
    ID              reduce using rule 102 (relop -> .)
    CTE_INT         reduce using rule 102 (relop -> .)
    CTE_FLOAT       reduce using rule 102 (relop -> .)
    TRUE            reduce using rule 102 (relop -> .)
    FALSE           reduce using rule 102 (relop -> .)

    relop                          shift and go to state 184

state 154

    (98) expression1 -> NOTEQUAL . relop exp top_relop
    (102) relop -> .

    LPAREN          reduce using rule 102 (relop -> .)
    ID              reduce using rule 102 (relop -> .)
    CTE_INT         reduce using rule 102 (relop -> .)
    CTE_FLOAT       reduce using rule 102 (relop -> .)
    TRUE            reduce using rule 102 (relop -> .)
    FALSE           reduce using rule 102 (relop -> .)

    relop                          shift and go to state 185

state 155

    (99) expression1 -> GREATEROREQUAL . relop exp top_relop
    (102) relop -> .

    LPAREN          reduce using rule 102 (relop -> .)
    ID              reduce using rule 102 (relop -> .)
    CTE_INT         reduce using rule 102 (relop -> .)
    CTE_FLOAT       reduce using rule 102 (relop -> .)
    TRUE            reduce using rule 102 (relop -> .)
    FALSE           reduce using rule 102 (relop -> .)

    relop                          shift and go to state 186

state 156

    (100) expression1 -> LESSEROREQUAL . relop exp top_relop
    (102) relop -> .

    LPAREN          reduce using rule 102 (relop -> .)
    ID              reduce using rule 102 (relop -> .)
    CTE_INT         reduce using rule 102 (relop -> .)
    CTE_FLOAT       reduce using rule 102 (relop -> .)
    TRUE            reduce using rule 102 (relop -> .)
    FALSE           reduce using rule 102 (relop -> .)

    relop                          shift and go to state 187

state 157

    (101) expression1 -> empty .

    COMMA           reduce using rule 101 (expression1 -> empty .)
    SEMICOLON       reduce using rule 101 (expression1 -> empty .)
    RPAREN          reduce using rule 101 (expression1 -> empty .)


state 158

    (104) exp -> term top_exp . exp1
    (105) exp1 -> . MINUS push_sign exp
    (106) exp1 -> . PLUS push_sign exp
    (107) exp1 -> . empty
    (130) empty -> .

    MINUS           shift and go to state 189
    PLUS            shift and go to state 190
    LESSER          reduce using rule 130 (empty -> .)
    GREATER         reduce using rule 130 (empty -> .)
    EQUAL           reduce using rule 130 (empty -> .)
    NOTEQUAL        reduce using rule 130 (empty -> .)
    GREATEROREQUAL  reduce using rule 130 (empty -> .)
    LESSEROREQUAL   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    RPAREN          reduce using rule 130 (empty -> .)
    RBRACKET        reduce using rule 130 (empty -> .)

    exp1                           shift and go to state 188
    empty                          shift and go to state 191

state 159

    (117) term -> factor top_factor . term1
    (118) term1 -> . DIVIDE push_sign term
    (119) term1 -> . TIMES push_sign term
    (120) term1 -> . empty
    (130) empty -> .

    DIVIDE          shift and go to state 193
    TIMES           shift and go to state 194
    MINUS           reduce using rule 130 (empty -> .)
    PLUS            reduce using rule 130 (empty -> .)
    LESSER          reduce using rule 130 (empty -> .)
    GREATER         reduce using rule 130 (empty -> .)
    EQUAL           reduce using rule 130 (empty -> .)
    NOTEQUAL        reduce using rule 130 (empty -> .)
    GREATEROREQUAL  reduce using rule 130 (empty -> .)
    LESSEROREQUAL   reduce using rule 130 (empty -> .)
    COMMA           reduce using rule 130 (empty -> .)
    SEMICOLON       reduce using rule 130 (empty -> .)
    RPAREN          reduce using rule 130 (empty -> .)
    RBRACKET        reduce using rule 130 (empty -> .)

    term1                          shift and go to state 192
    empty                          shift and go to state 195

state 160

    (111) factor -> LPAREN false_bottom . expression RPAREN end_par
    (94) expression -> . exp expression1
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    expression                     shift and go to state 196
    exp                            shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 161

    (43) assignment -> ID cte_id ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 197


state 162

    (44) assignment -> ID cte_id LBRACKET exp . RBRACKET ASSIGN expression SEMICOLON

    RBRACKET        shift and go to state 198


state 163

    (121) call -> ID check_name LPAREN create_era . call1 RPAREN SEMICOLON gosub
    (125) call1 -> . ID COMMA call1
    (126) call1 -> . exp
    (127) call1 -> . st_cte
    (104) exp -> . term top_exp exp1
    (52) st_cte -> . STRING
    (53) st_cte -> . cte_bool
    (117) term -> . factor top_factor term1
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    ID              shift and go to state 199
    STRING          shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    LPAREN          shift and go to state 114
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98

    call1                          shift and go to state 200
    exp                            shift and go to state 201
    st_cte                         shift and go to state 202
    term                           shift and go to state 112
    cte_bool                       shift and go to state 203
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    call                           shift and go to state 100

state 164

    (88) condition -> IF LPAREN expression RPAREN . type_check LBRACE b2 RBRACE condition1 end_if
    (91) type_check -> .

    LBRACE          reduce using rule 91 (type_check -> .)

    type_check                     shift and go to state 204

state 165

    (66) triangle -> TRIANGLE LPAREN exp COMMA . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 205
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 166

    (67) rectangle -> RECTANGLE LPAREN exp COMMA . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 206
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 167

    (65) square -> SQUARE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 207


state 168

    (64) circle -> CIRCLE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 208


state 169

    (68) poligon -> POLIGON LPAREN exp COMMA . exp RPAREN SEMICOLON
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 209
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 170

    (63) color -> COLOR LPAREN color_cte RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 210


state 171

    (71) pensize -> PENSIZE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 211


state 172

    (72) penforward -> PENFORWARD LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 212


state 173

    (73) penback -> PENBACK LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 213


state 174

    (69) rotate -> ROTATE LPAREN exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 214


state 175

    (70) rotate -> ROTATE LPAREN CTE_STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 215


state 176

    (40) while -> WHILE while_return LPAREN type_check . expression RPAREN LBRACE b2 RBRACE end_while
    (94) expression -> . exp expression1
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    expression                     shift and go to state 216
    exp                            shift and go to state 111
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 177

    (74) penon -> PENON LPAREN RPAREN SEMICOLON .

    ID              reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    SQUARE          reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    POLIGON         reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    COLOR           reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENBACK         reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    ROTATE          reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENON           reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    PENOFF          reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 74 (penon -> PENON LPAREN RPAREN SEMICOLON .)


state 178

    (75) penoff -> PENOFF LPAREN RPAREN SEMICOLON .

    ID              reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    IF              reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    SQUARE          reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    POLIGON         reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    COLOR           reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENBACK         reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    ROTATE          reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    WHILE           reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    RETURN          reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENON           reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    PENOFF          reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    RBRACE          reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)
    VAR             reduce using rule 75 (penoff -> PENOFF LPAREN RPAREN SEMICOLON .)


state 179

    (54) funcs -> FUNC type ID LPAREN type ID funcs1 . RPAREN LBRACE funcs2 RBRACE funcs3
    (56) funcs1 -> funcs1 . COMMA type ID

    RPAREN          shift and go to state 217
    COMMA           shift and go to state 218


state 180

    (57) funcs1 -> empty .

    RPAREN          reduce using rule 57 (funcs1 -> empty .)
    COMMA           reduce using rule 57 (funcs1 -> empty .)


state 181

    (55) funcs -> FUNC VOID ID LPAREN type ID funcs1 . RPAREN LBRACE funcs2 RBRACE funcs3
    (56) funcs1 -> funcs1 . COMMA type ID

    RPAREN          shift and go to state 219
    COMMA           shift and go to state 218


state 182

    (95) expression1 -> LESSER relop . exp top_relop
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 220
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 183

    (96) expression1 -> GREATER relop . exp top_relop
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 221
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 184

    (97) expression1 -> EQUAL relop . exp top_relop
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 222
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 185

    (98) expression1 -> NOTEQUAL relop . exp top_relop
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 223
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 186

    (99) expression1 -> GREATEROREQUAL relop . exp top_relop
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 224
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 187

    (100) expression1 -> LESSEROREQUAL relop . exp top_relop
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 225
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 188

    (104) exp -> term top_exp exp1 .

    LESSER          reduce using rule 104 (exp -> term top_exp exp1 .)
    GREATER         reduce using rule 104 (exp -> term top_exp exp1 .)
    EQUAL           reduce using rule 104 (exp -> term top_exp exp1 .)
    NOTEQUAL        reduce using rule 104 (exp -> term top_exp exp1 .)
    GREATEROREQUAL  reduce using rule 104 (exp -> term top_exp exp1 .)
    LESSEROREQUAL   reduce using rule 104 (exp -> term top_exp exp1 .)
    COMMA           reduce using rule 104 (exp -> term top_exp exp1 .)
    SEMICOLON       reduce using rule 104 (exp -> term top_exp exp1 .)
    RPAREN          reduce using rule 104 (exp -> term top_exp exp1 .)
    RBRACKET        reduce using rule 104 (exp -> term top_exp exp1 .)


state 189

    (105) exp1 -> MINUS . push_sign exp
    (109) push_sign -> .

    LPAREN          reduce using rule 109 (push_sign -> .)
    ID              reduce using rule 109 (push_sign -> .)
    CTE_INT         reduce using rule 109 (push_sign -> .)
    CTE_FLOAT       reduce using rule 109 (push_sign -> .)
    TRUE            reduce using rule 109 (push_sign -> .)
    FALSE           reduce using rule 109 (push_sign -> .)

    push_sign                      shift and go to state 226

state 190

    (106) exp1 -> PLUS . push_sign exp
    (109) push_sign -> .

    LPAREN          reduce using rule 109 (push_sign -> .)
    ID              reduce using rule 109 (push_sign -> .)
    CTE_INT         reduce using rule 109 (push_sign -> .)
    CTE_FLOAT       reduce using rule 109 (push_sign -> .)
    TRUE            reduce using rule 109 (push_sign -> .)
    FALSE           reduce using rule 109 (push_sign -> .)

    push_sign                      shift and go to state 227

state 191

    (107) exp1 -> empty .

    LESSER          reduce using rule 107 (exp1 -> empty .)
    GREATER         reduce using rule 107 (exp1 -> empty .)
    EQUAL           reduce using rule 107 (exp1 -> empty .)
    NOTEQUAL        reduce using rule 107 (exp1 -> empty .)
    GREATEROREQUAL  reduce using rule 107 (exp1 -> empty .)
    LESSEROREQUAL   reduce using rule 107 (exp1 -> empty .)
    COMMA           reduce using rule 107 (exp1 -> empty .)
    SEMICOLON       reduce using rule 107 (exp1 -> empty .)
    RPAREN          reduce using rule 107 (exp1 -> empty .)
    RBRACKET        reduce using rule 107 (exp1 -> empty .)


state 192

    (117) term -> factor top_factor term1 .

    MINUS           reduce using rule 117 (term -> factor top_factor term1 .)
    PLUS            reduce using rule 117 (term -> factor top_factor term1 .)
    LESSER          reduce using rule 117 (term -> factor top_factor term1 .)
    GREATER         reduce using rule 117 (term -> factor top_factor term1 .)
    EQUAL           reduce using rule 117 (term -> factor top_factor term1 .)
    NOTEQUAL        reduce using rule 117 (term -> factor top_factor term1 .)
    GREATEROREQUAL  reduce using rule 117 (term -> factor top_factor term1 .)
    LESSEROREQUAL   reduce using rule 117 (term -> factor top_factor term1 .)
    COMMA           reduce using rule 117 (term -> factor top_factor term1 .)
    SEMICOLON       reduce using rule 117 (term -> factor top_factor term1 .)
    RPAREN          reduce using rule 117 (term -> factor top_factor term1 .)
    RBRACKET        reduce using rule 117 (term -> factor top_factor term1 .)


state 193

    (118) term1 -> DIVIDE . push_sign term
    (109) push_sign -> .

    LPAREN          reduce using rule 109 (push_sign -> .)
    ID              reduce using rule 109 (push_sign -> .)
    CTE_INT         reduce using rule 109 (push_sign -> .)
    CTE_FLOAT       reduce using rule 109 (push_sign -> .)
    TRUE            reduce using rule 109 (push_sign -> .)
    FALSE           reduce using rule 109 (push_sign -> .)

    push_sign                      shift and go to state 228

state 194

    (119) term1 -> TIMES . push_sign term
    (109) push_sign -> .

    LPAREN          reduce using rule 109 (push_sign -> .)
    ID              reduce using rule 109 (push_sign -> .)
    CTE_INT         reduce using rule 109 (push_sign -> .)
    CTE_FLOAT       reduce using rule 109 (push_sign -> .)
    TRUE            reduce using rule 109 (push_sign -> .)
    FALSE           reduce using rule 109 (push_sign -> .)

    push_sign                      shift and go to state 229

state 195

    (120) term1 -> empty .

    MINUS           reduce using rule 120 (term1 -> empty .)
    PLUS            reduce using rule 120 (term1 -> empty .)
    LESSER          reduce using rule 120 (term1 -> empty .)
    GREATER         reduce using rule 120 (term1 -> empty .)
    EQUAL           reduce using rule 120 (term1 -> empty .)
    NOTEQUAL        reduce using rule 120 (term1 -> empty .)
    GREATEROREQUAL  reduce using rule 120 (term1 -> empty .)
    LESSEROREQUAL   reduce using rule 120 (term1 -> empty .)
    COMMA           reduce using rule 120 (term1 -> empty .)
    SEMICOLON       reduce using rule 120 (term1 -> empty .)
    RPAREN          reduce using rule 120 (term1 -> empty .)
    RBRACKET        reduce using rule 120 (term1 -> empty .)


state 196

    (111) factor -> LPAREN false_bottom expression . RPAREN end_par

    RPAREN          shift and go to state 230


state 197

    (43) assignment -> ID cte_id ASSIGN expression SEMICOLON .

    ID              reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    IF              reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    TRIANGLE        reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    RECTANGLE       reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    SQUARE          reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    CIRCLE          reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    POLIGON         reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    COLOR           reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENSIZE         reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENFORWARD      reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENBACK         reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    ROTATE          reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENON           reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    PENOFF          reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 43 (assignment -> ID cte_id ASSIGN expression SEMICOLON .)


state 198

    (44) assignment -> ID cte_id LBRACKET exp RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 231


state 199

    (125) call1 -> ID . COMMA call1
    (113) factor -> ID . push_id
    (80) var_cte -> ID .
    (84) var_cte -> ID . list
    (121) call -> ID . check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (116) push_id -> .
    (22) list -> . LIST
    (122) check_name -> .

  ! reduce/reduce conflict for DIVIDE resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for PLUS resolved using rule 80 (var_cte -> ID .)
  ! reduce/reduce conflict for RPAREN resolved using rule 80 (var_cte -> ID .)
    COMMA           shift and go to state 232
    DIVIDE          reduce using rule 80 (var_cte -> ID .)
    TIMES           reduce using rule 80 (var_cte -> ID .)
    MINUS           reduce using rule 80 (var_cte -> ID .)
    PLUS            reduce using rule 80 (var_cte -> ID .)
    RPAREN          reduce using rule 80 (var_cte -> ID .)
    LIST            shift and go to state 76
    LPAREN          reduce using rule 122 (check_name -> .)

  ! DIVIDE          [ reduce using rule 116 (push_id -> .) ]
  ! TIMES           [ reduce using rule 116 (push_id -> .) ]
  ! MINUS           [ reduce using rule 116 (push_id -> .) ]
  ! PLUS            [ reduce using rule 116 (push_id -> .) ]
  ! RPAREN          [ reduce using rule 116 (push_id -> .) ]

    push_id                        shift and go to state 148
    list                           shift and go to state 143
    check_name                     shift and go to state 81

state 200

    (121) call -> ID check_name LPAREN create_era call1 . RPAREN SEMICOLON gosub

    RPAREN          shift and go to state 233


state 201

    (126) call1 -> exp .

    RPAREN          reduce using rule 126 (call1 -> exp .)


state 202

    (127) call1 -> st_cte .

    RPAREN          reduce using rule 127 (call1 -> st_cte .)


state 203

    (53) st_cte -> cte_bool .
    (83) var_cte -> cte_bool .

  ! reduce/reduce conflict for RPAREN resolved using rule 53 (st_cte -> cte_bool .)
    RPAREN          reduce using rule 53 (st_cte -> cte_bool .)
    DIVIDE          reduce using rule 83 (var_cte -> cte_bool .)
    TIMES           reduce using rule 83 (var_cte -> cte_bool .)
    MINUS           reduce using rule 83 (var_cte -> cte_bool .)
    PLUS            reduce using rule 83 (var_cte -> cte_bool .)

  ! RPAREN          [ reduce using rule 83 (var_cte -> cte_bool .) ]


state 204

    (88) condition -> IF LPAREN expression RPAREN type_check . LBRACE b2 RBRACE condition1 end_if

    LBRACE          shift and go to state 234


state 205

    (66) triangle -> TRIANGLE LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 235


state 206

    (67) rectangle -> RECTANGLE LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 236


state 207

    (65) square -> SQUARE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 65 (square -> SQUARE LPAREN exp RPAREN SEMICOLON .)


state 208

    (64) circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 64 (circle -> CIRCLE LPAREN exp RPAREN SEMICOLON .)


state 209

    (68) poligon -> POLIGON LPAREN exp COMMA exp . RPAREN SEMICOLON

    RPAREN          shift and go to state 237


state 210

    (63) color -> COLOR LPAREN color_cte RPAREN SEMICOLON .

    ID              reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    IF              reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    SQUARE          reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    POLIGON         reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    COLOR           reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENBACK         reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    ROTATE          reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    WHILE           reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    RETURN          reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENON           reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    PENOFF          reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    RBRACE          reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)
    VAR             reduce using rule 63 (color -> COLOR LPAREN color_cte RPAREN SEMICOLON .)


state 211

    (71) pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 71 (pensize -> PENSIZE LPAREN exp RPAREN SEMICOLON .)


state 212

    (72) penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 72 (penforward -> PENFORWARD LPAREN exp RPAREN SEMICOLON .)


state 213

    (73) penback -> PENBACK LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 73 (penback -> PENBACK LPAREN exp RPAREN SEMICOLON .)


state 214

    (69) rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .

    ID              reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    IF              reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENON           reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)
    VAR             reduce using rule 69 (rotate -> ROTATE LPAREN exp RPAREN SEMICOLON .)


state 215

    (70) rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .

    ID              reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    IF              reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    SQUARE          reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    POLIGON         reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    COLOR           reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENBACK         reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    ROTATE          reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENON           reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    PENOFF          reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    RBRACE          reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)
    VAR             reduce using rule 70 (rotate -> ROTATE LPAREN CTE_STRING RPAREN SEMICOLON .)


state 216

    (40) while -> WHILE while_return LPAREN type_check expression . RPAREN LBRACE b2 RBRACE end_while

    RPAREN          shift and go to state 238


state 217

    (54) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN . LBRACE funcs2 RBRACE funcs3

    LBRACE          shift and go to state 239


state 218

    (56) funcs1 -> funcs1 COMMA . type ID
    (76) type -> . INT
    (77) type -> . FLOAT
    (78) type -> . STRING
    (79) type -> . BOOL

    INT             shift and go to state 19
    FLOAT           shift and go to state 20
    STRING          shift and go to state 21
    BOOL            shift and go to state 22

    type                           shift and go to state 240

state 219

    (55) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN . LBRACE funcs2 RBRACE funcs3

    LBRACE          shift and go to state 241


state 220

    (95) expression1 -> LESSER relop exp . top_relop
    (103) top_relop -> .

    COMMA           reduce using rule 103 (top_relop -> .)
    SEMICOLON       reduce using rule 103 (top_relop -> .)
    RPAREN          reduce using rule 103 (top_relop -> .)

    top_relop                      shift and go to state 242

state 221

    (96) expression1 -> GREATER relop exp . top_relop
    (103) top_relop -> .

    COMMA           reduce using rule 103 (top_relop -> .)
    SEMICOLON       reduce using rule 103 (top_relop -> .)
    RPAREN          reduce using rule 103 (top_relop -> .)

    top_relop                      shift and go to state 243

state 222

    (97) expression1 -> EQUAL relop exp . top_relop
    (103) top_relop -> .

    COMMA           reduce using rule 103 (top_relop -> .)
    SEMICOLON       reduce using rule 103 (top_relop -> .)
    RPAREN          reduce using rule 103 (top_relop -> .)

    top_relop                      shift and go to state 244

state 223

    (98) expression1 -> NOTEQUAL relop exp . top_relop
    (103) top_relop -> .

    COMMA           reduce using rule 103 (top_relop -> .)
    SEMICOLON       reduce using rule 103 (top_relop -> .)
    RPAREN          reduce using rule 103 (top_relop -> .)

    top_relop                      shift and go to state 245

state 224

    (99) expression1 -> GREATEROREQUAL relop exp . top_relop
    (103) top_relop -> .

    COMMA           reduce using rule 103 (top_relop -> .)
    SEMICOLON       reduce using rule 103 (top_relop -> .)
    RPAREN          reduce using rule 103 (top_relop -> .)

    top_relop                      shift and go to state 246

state 225

    (100) expression1 -> LESSEROREQUAL relop exp . top_relop
    (103) top_relop -> .

    COMMA           reduce using rule 103 (top_relop -> .)
    SEMICOLON       reduce using rule 103 (top_relop -> .)
    RPAREN          reduce using rule 103 (top_relop -> .)

    top_relop                      shift and go to state 247

state 226

    (105) exp1 -> MINUS push_sign . exp
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 248
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 227

    (106) exp1 -> PLUS push_sign . exp
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 249
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 228

    (118) term1 -> DIVIDE push_sign . term
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    term                           shift and go to state 250
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 229

    (119) term1 -> TIMES push_sign . term
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    term                           shift and go to state 251
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 230

    (111) factor -> LPAREN false_bottom expression RPAREN . end_par
    (115) end_par -> .

    DIVIDE          reduce using rule 115 (end_par -> .)
    TIMES           reduce using rule 115 (end_par -> .)
    MINUS           reduce using rule 115 (end_par -> .)
    PLUS            reduce using rule 115 (end_par -> .)
    LESSER          reduce using rule 115 (end_par -> .)
    GREATER         reduce using rule 115 (end_par -> .)
    EQUAL           reduce using rule 115 (end_par -> .)
    NOTEQUAL        reduce using rule 115 (end_par -> .)
    GREATEROREQUAL  reduce using rule 115 (end_par -> .)
    LESSEROREQUAL   reduce using rule 115 (end_par -> .)
    COMMA           reduce using rule 115 (end_par -> .)
    SEMICOLON       reduce using rule 115 (end_par -> .)
    RPAREN          reduce using rule 115 (end_par -> .)
    RBRACKET        reduce using rule 115 (end_par -> .)

    end_par                        shift and go to state 252

state 231

    (44) assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN . expression SEMICOLON
    (94) expression -> . exp expression1
    (104) exp -> . term top_exp exp1
    (117) term -> . factor top_factor term1
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    LPAREN          shift and go to state 114
    ID              shift and go to state 109
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103

    exp                            shift and go to state 111
    expression                     shift and go to state 253
    term                           shift and go to state 112
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    cte_bool                       shift and go to state 116
    call                           shift and go to state 100

state 232

    (125) call1 -> ID COMMA . call1
    (125) call1 -> . ID COMMA call1
    (126) call1 -> . exp
    (127) call1 -> . st_cte
    (104) exp -> . term top_exp exp1
    (52) st_cte -> . STRING
    (53) st_cte -> . cte_bool
    (117) term -> . factor top_factor term1
    (86) cte_bool -> . TRUE
    (87) cte_bool -> . FALSE
    (111) factor -> . LPAREN false_bottom expression RPAREN end_par
    (112) factor -> . var_cte
    (113) factor -> . ID push_id
    (80) var_cte -> . ID
    (81) var_cte -> . CTE_INT
    (82) var_cte -> . CTE_FLOAT
    (83) var_cte -> . cte_bool
    (84) var_cte -> . ID list
    (85) var_cte -> . call
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub

    ID              shift and go to state 199
    STRING          shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    LPAREN          shift and go to state 114
    CTE_INT         shift and go to state 97
    CTE_FLOAT       shift and go to state 98

    call1                          shift and go to state 254
    exp                            shift and go to state 201
    st_cte                         shift and go to state 202
    term                           shift and go to state 112
    cte_bool                       shift and go to state 203
    factor                         shift and go to state 113
    var_cte                        shift and go to state 115
    call                           shift and go to state 100

state 233

    (121) call -> ID check_name LPAREN create_era call1 RPAREN . SEMICOLON gosub

    SEMICOLON       shift and go to state 255


state 234

    (88) condition -> IF LPAREN expression RPAREN type_check LBRACE . b2 RBRACE condition1 end_if
    (11) b2 -> . b2 statute
    (12) b2 -> . empty
    (130) empty -> .

    RBRACE          reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)

    b2                             shift and go to state 256
    empty                          shift and go to state 29

state 235

    (66) triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 257


state 236

    (67) rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 258


state 237

    (68) poligon -> POLIGON LPAREN exp COMMA exp RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 259


state 238

    (40) while -> WHILE while_return LPAREN type_check expression RPAREN . LBRACE b2 RBRACE end_while

    LBRACE          shift and go to state 260


state 239

    (54) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE . funcs2 RBRACE funcs3
    (58) funcs2 -> . funcs2 vars
    (59) funcs2 -> . funcs2 statute
    (60) funcs2 -> . empty
    (130) empty -> .

    RBRACE          reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)

    funcs2                         shift and go to state 261
    empty                          shift and go to state 262

state 240

    (56) funcs1 -> funcs1 COMMA type . ID

    ID              shift and go to state 263


state 241

    (55) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE . funcs2 RBRACE funcs3
    (58) funcs2 -> . funcs2 vars
    (59) funcs2 -> . funcs2 statute
    (60) funcs2 -> . empty
    (130) empty -> .

    RBRACE          reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)

    funcs2                         shift and go to state 264
    empty                          shift and go to state 262

state 242

    (95) expression1 -> LESSER relop exp top_relop .

    COMMA           reduce using rule 95 (expression1 -> LESSER relop exp top_relop .)
    SEMICOLON       reduce using rule 95 (expression1 -> LESSER relop exp top_relop .)
    RPAREN          reduce using rule 95 (expression1 -> LESSER relop exp top_relop .)


state 243

    (96) expression1 -> GREATER relop exp top_relop .

    COMMA           reduce using rule 96 (expression1 -> GREATER relop exp top_relop .)
    SEMICOLON       reduce using rule 96 (expression1 -> GREATER relop exp top_relop .)
    RPAREN          reduce using rule 96 (expression1 -> GREATER relop exp top_relop .)


state 244

    (97) expression1 -> EQUAL relop exp top_relop .

    COMMA           reduce using rule 97 (expression1 -> EQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 97 (expression1 -> EQUAL relop exp top_relop .)
    RPAREN          reduce using rule 97 (expression1 -> EQUAL relop exp top_relop .)


state 245

    (98) expression1 -> NOTEQUAL relop exp top_relop .

    COMMA           reduce using rule 98 (expression1 -> NOTEQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 98 (expression1 -> NOTEQUAL relop exp top_relop .)
    RPAREN          reduce using rule 98 (expression1 -> NOTEQUAL relop exp top_relop .)


state 246

    (99) expression1 -> GREATEROREQUAL relop exp top_relop .

    COMMA           reduce using rule 99 (expression1 -> GREATEROREQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 99 (expression1 -> GREATEROREQUAL relop exp top_relop .)
    RPAREN          reduce using rule 99 (expression1 -> GREATEROREQUAL relop exp top_relop .)


state 247

    (100) expression1 -> LESSEROREQUAL relop exp top_relop .

    COMMA           reduce using rule 100 (expression1 -> LESSEROREQUAL relop exp top_relop .)
    SEMICOLON       reduce using rule 100 (expression1 -> LESSEROREQUAL relop exp top_relop .)
    RPAREN          reduce using rule 100 (expression1 -> LESSEROREQUAL relop exp top_relop .)


state 248

    (105) exp1 -> MINUS push_sign exp .

    LESSER          reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    GREATER         reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    EQUAL           reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    NOTEQUAL        reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    GREATEROREQUAL  reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    LESSEROREQUAL   reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    COMMA           reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    SEMICOLON       reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    RPAREN          reduce using rule 105 (exp1 -> MINUS push_sign exp .)
    RBRACKET        reduce using rule 105 (exp1 -> MINUS push_sign exp .)


state 249

    (106) exp1 -> PLUS push_sign exp .

    LESSER          reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    GREATER         reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    EQUAL           reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    NOTEQUAL        reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    GREATEROREQUAL  reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    LESSEROREQUAL   reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    COMMA           reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    SEMICOLON       reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    RPAREN          reduce using rule 106 (exp1 -> PLUS push_sign exp .)
    RBRACKET        reduce using rule 106 (exp1 -> PLUS push_sign exp .)


state 250

    (118) term1 -> DIVIDE push_sign term .

    MINUS           reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    PLUS            reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    LESSER          reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    GREATER         reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    EQUAL           reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    NOTEQUAL        reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    GREATEROREQUAL  reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    LESSEROREQUAL   reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    COMMA           reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    SEMICOLON       reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    RPAREN          reduce using rule 118 (term1 -> DIVIDE push_sign term .)
    RBRACKET        reduce using rule 118 (term1 -> DIVIDE push_sign term .)


state 251

    (119) term1 -> TIMES push_sign term .

    MINUS           reduce using rule 119 (term1 -> TIMES push_sign term .)
    PLUS            reduce using rule 119 (term1 -> TIMES push_sign term .)
    LESSER          reduce using rule 119 (term1 -> TIMES push_sign term .)
    GREATER         reduce using rule 119 (term1 -> TIMES push_sign term .)
    EQUAL           reduce using rule 119 (term1 -> TIMES push_sign term .)
    NOTEQUAL        reduce using rule 119 (term1 -> TIMES push_sign term .)
    GREATEROREQUAL  reduce using rule 119 (term1 -> TIMES push_sign term .)
    LESSEROREQUAL   reduce using rule 119 (term1 -> TIMES push_sign term .)
    COMMA           reduce using rule 119 (term1 -> TIMES push_sign term .)
    SEMICOLON       reduce using rule 119 (term1 -> TIMES push_sign term .)
    RPAREN          reduce using rule 119 (term1 -> TIMES push_sign term .)
    RBRACKET        reduce using rule 119 (term1 -> TIMES push_sign term .)


state 252

    (111) factor -> LPAREN false_bottom expression RPAREN end_par .

    DIVIDE          reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    TIMES           reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    MINUS           reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    PLUS            reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    LESSER          reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    GREATER         reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    EQUAL           reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    NOTEQUAL        reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    GREATEROREQUAL  reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    LESSEROREQUAL   reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    COMMA           reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    SEMICOLON       reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    RPAREN          reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)
    RBRACKET        reduce using rule 111 (factor -> LPAREN false_bottom expression RPAREN end_par .)


state 253

    (44) assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression . SEMICOLON

    SEMICOLON       shift and go to state 265


state 254

    (125) call1 -> ID COMMA call1 .

    RPAREN          reduce using rule 125 (call1 -> ID COMMA call1 .)


state 255

    (121) call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON . gosub
    (124) gosub -> .

    ID              reduce using rule 124 (gosub -> .)
    IF              reduce using rule 124 (gosub -> .)
    TRIANGLE        reduce using rule 124 (gosub -> .)
    RECTANGLE       reduce using rule 124 (gosub -> .)
    SQUARE          reduce using rule 124 (gosub -> .)
    CIRCLE          reduce using rule 124 (gosub -> .)
    POLIGON         reduce using rule 124 (gosub -> .)
    COLOR           reduce using rule 124 (gosub -> .)
    PENSIZE         reduce using rule 124 (gosub -> .)
    PENFORWARD      reduce using rule 124 (gosub -> .)
    PENBACK         reduce using rule 124 (gosub -> .)
    ROTATE          reduce using rule 124 (gosub -> .)
    WHILE           reduce using rule 124 (gosub -> .)
    RETURN          reduce using rule 124 (gosub -> .)
    PENON           reduce using rule 124 (gosub -> .)
    PENOFF          reduce using rule 124 (gosub -> .)
    RBRACE          reduce using rule 124 (gosub -> .)
    SEMICOLON       reduce using rule 124 (gosub -> .)
    DIVIDE          reduce using rule 124 (gosub -> .)
    TIMES           reduce using rule 124 (gosub -> .)
    MINUS           reduce using rule 124 (gosub -> .)
    PLUS            reduce using rule 124 (gosub -> .)
    LESSER          reduce using rule 124 (gosub -> .)
    GREATER         reduce using rule 124 (gosub -> .)
    EQUAL           reduce using rule 124 (gosub -> .)
    NOTEQUAL        reduce using rule 124 (gosub -> .)
    GREATEROREQUAL  reduce using rule 124 (gosub -> .)
    LESSEROREQUAL   reduce using rule 124 (gosub -> .)
    COMMA           reduce using rule 124 (gosub -> .)
    RPAREN          reduce using rule 124 (gosub -> .)
    RBRACKET        reduce using rule 124 (gosub -> .)
    VAR             reduce using rule 124 (gosub -> .)

    gosub                          shift and go to state 266

state 256

    (88) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 . RBRACE condition1 end_if
    (11) b2 -> b2 . statute
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 267
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    statute                        shift and go to state 36
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 257

    (66) triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .

    ID              reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENON           reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    VAR             reduce using rule 66 (triangle -> TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 258

    (67) rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .

    ID              reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENON           reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)
    VAR             reduce using rule 67 (rectangle -> RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 259

    (68) poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .

    ID              reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    IF              reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    TRIANGLE        reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RECTANGLE       reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    SQUARE          reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    CIRCLE          reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    POLIGON         reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    COLOR           reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENSIZE         reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENFORWARD      reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENBACK         reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    ROTATE          reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    WHILE           reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RETURN          reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENON           reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    PENOFF          reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    RBRACE          reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)
    VAR             reduce using rule 68 (poligon -> POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON .)


state 260

    (40) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE . b2 RBRACE end_while
    (11) b2 -> . b2 statute
    (12) b2 -> . empty
    (130) empty -> .

    RBRACE          reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)

    b2                             shift and go to state 268
    empty                          shift and go to state 29

state 261

    (54) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 . RBRACE funcs3
    (58) funcs2 -> funcs2 . vars
    (59) funcs2 -> funcs2 . statute
    (13) vars -> . VAR vars2
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 269
    VAR             shift and go to state 13
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    vars                           shift and go to state 270
    statute                        shift and go to state 271
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 262

    (60) funcs2 -> empty .

    RBRACE          reduce using rule 60 (funcs2 -> empty .)
    VAR             reduce using rule 60 (funcs2 -> empty .)
    ID              reduce using rule 60 (funcs2 -> empty .)
    IF              reduce using rule 60 (funcs2 -> empty .)
    TRIANGLE        reduce using rule 60 (funcs2 -> empty .)
    RECTANGLE       reduce using rule 60 (funcs2 -> empty .)
    SQUARE          reduce using rule 60 (funcs2 -> empty .)
    CIRCLE          reduce using rule 60 (funcs2 -> empty .)
    POLIGON         reduce using rule 60 (funcs2 -> empty .)
    COLOR           reduce using rule 60 (funcs2 -> empty .)
    PENSIZE         reduce using rule 60 (funcs2 -> empty .)
    PENFORWARD      reduce using rule 60 (funcs2 -> empty .)
    PENBACK         reduce using rule 60 (funcs2 -> empty .)
    ROTATE          reduce using rule 60 (funcs2 -> empty .)
    WHILE           reduce using rule 60 (funcs2 -> empty .)
    RETURN          reduce using rule 60 (funcs2 -> empty .)
    PENON           reduce using rule 60 (funcs2 -> empty .)
    PENOFF          reduce using rule 60 (funcs2 -> empty .)


state 263

    (56) funcs1 -> funcs1 COMMA type ID .

    RPAREN          reduce using rule 56 (funcs1 -> funcs1 COMMA type ID .)
    COMMA           reduce using rule 56 (funcs1 -> funcs1 COMMA type ID .)


state 264

    (55) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 . RBRACE funcs3
    (58) funcs2 -> funcs2 . vars
    (59) funcs2 -> funcs2 . statute
    (13) vars -> . VAR vars2
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 272
    VAR             shift and go to state 13
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    vars                           shift and go to state 270
    statute                        shift and go to state 271
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 265

    (44) assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .

    ID              reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    TRIANGLE        reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    RECTANGLE       reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    SQUARE          reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    CIRCLE          reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    POLIGON         reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    COLOR           reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENSIZE         reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENFORWARD      reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENBACK         reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    ROTATE          reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENON           reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    PENOFF          reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)
    VAR             reduce using rule 44 (assignment -> ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON .)


state 266

    (121) call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .

    ID              reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    IF              reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    TRIANGLE        reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    RECTANGLE       reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    SQUARE          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    CIRCLE          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    POLIGON         reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    COLOR           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    PENSIZE         reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    PENFORWARD      reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    PENBACK         reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    ROTATE          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    WHILE           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    RETURN          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    PENON           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    PENOFF          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    RBRACE          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    SEMICOLON       reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    DIVIDE          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    TIMES           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    MINUS           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    PLUS            reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    LESSER          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    GREATER         reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    EQUAL           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    NOTEQUAL        reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    GREATEROREQUAL  reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    LESSEROREQUAL   reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    COMMA           reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    RPAREN          reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    RBRACKET        reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)
    VAR             reduce using rule 121 (call -> ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub .)


state 267

    (88) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE . condition1 end_if
    (89) condition1 -> . gotoElse ELSE LBRACE b2 RBRACE
    (90) condition1 -> . empty
    (92) gotoElse -> .
    (130) empty -> .

    ELSE            reduce using rule 92 (gotoElse -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)
    RBRACE          reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)

    condition1                     shift and go to state 273
    gotoElse                       shift and go to state 274
    empty                          shift and go to state 275

state 268

    (40) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 . RBRACE end_while
    (11) b2 -> b2 . statute
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 276
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    statute                        shift and go to state 36
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 269

    (54) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE . funcs3
    (61) funcs3 -> . funcs
    (62) funcs3 -> . empty
    (54) funcs -> . FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs -> . FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (130) empty -> .

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 12
    DAVINCI         reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)

  ! FUNC            [ reduce using rule 130 (empty -> .) ]

    funcs3                         shift and go to state 277
    funcs                          shift and go to state 278
    empty                          shift and go to state 279

state 270

    (58) funcs2 -> funcs2 vars .

    RBRACE          reduce using rule 58 (funcs2 -> funcs2 vars .)
    VAR             reduce using rule 58 (funcs2 -> funcs2 vars .)
    ID              reduce using rule 58 (funcs2 -> funcs2 vars .)
    IF              reduce using rule 58 (funcs2 -> funcs2 vars .)
    TRIANGLE        reduce using rule 58 (funcs2 -> funcs2 vars .)
    RECTANGLE       reduce using rule 58 (funcs2 -> funcs2 vars .)
    SQUARE          reduce using rule 58 (funcs2 -> funcs2 vars .)
    CIRCLE          reduce using rule 58 (funcs2 -> funcs2 vars .)
    POLIGON         reduce using rule 58 (funcs2 -> funcs2 vars .)
    COLOR           reduce using rule 58 (funcs2 -> funcs2 vars .)
    PENSIZE         reduce using rule 58 (funcs2 -> funcs2 vars .)
    PENFORWARD      reduce using rule 58 (funcs2 -> funcs2 vars .)
    PENBACK         reduce using rule 58 (funcs2 -> funcs2 vars .)
    ROTATE          reduce using rule 58 (funcs2 -> funcs2 vars .)
    WHILE           reduce using rule 58 (funcs2 -> funcs2 vars .)
    RETURN          reduce using rule 58 (funcs2 -> funcs2 vars .)
    PENON           reduce using rule 58 (funcs2 -> funcs2 vars .)
    PENOFF          reduce using rule 58 (funcs2 -> funcs2 vars .)


state 271

    (59) funcs2 -> funcs2 statute .

    RBRACE          reduce using rule 59 (funcs2 -> funcs2 statute .)
    VAR             reduce using rule 59 (funcs2 -> funcs2 statute .)
    ID              reduce using rule 59 (funcs2 -> funcs2 statute .)
    IF              reduce using rule 59 (funcs2 -> funcs2 statute .)
    TRIANGLE        reduce using rule 59 (funcs2 -> funcs2 statute .)
    RECTANGLE       reduce using rule 59 (funcs2 -> funcs2 statute .)
    SQUARE          reduce using rule 59 (funcs2 -> funcs2 statute .)
    CIRCLE          reduce using rule 59 (funcs2 -> funcs2 statute .)
    POLIGON         reduce using rule 59 (funcs2 -> funcs2 statute .)
    COLOR           reduce using rule 59 (funcs2 -> funcs2 statute .)
    PENSIZE         reduce using rule 59 (funcs2 -> funcs2 statute .)
    PENFORWARD      reduce using rule 59 (funcs2 -> funcs2 statute .)
    PENBACK         reduce using rule 59 (funcs2 -> funcs2 statute .)
    ROTATE          reduce using rule 59 (funcs2 -> funcs2 statute .)
    WHILE           reduce using rule 59 (funcs2 -> funcs2 statute .)
    RETURN          reduce using rule 59 (funcs2 -> funcs2 statute .)
    PENON           reduce using rule 59 (funcs2 -> funcs2 statute .)
    PENOFF          reduce using rule 59 (funcs2 -> funcs2 statute .)


state 272

    (55) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE . funcs3
    (61) funcs3 -> . funcs
    (62) funcs3 -> . empty
    (54) funcs -> . FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (55) funcs -> . FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3
    (130) empty -> .

  ! shift/reduce conflict for FUNC resolved as shift
    FUNC            shift and go to state 12
    DAVINCI         reduce using rule 130 (empty -> .)
    VAR             reduce using rule 130 (empty -> .)

  ! FUNC            [ reduce using rule 130 (empty -> .) ]

    funcs3                         shift and go to state 280
    funcs                          shift and go to state 278
    empty                          shift and go to state 279

state 273

    (88) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 . end_if
    (93) end_if -> .

    ID              reduce using rule 93 (end_if -> .)
    IF              reduce using rule 93 (end_if -> .)
    TRIANGLE        reduce using rule 93 (end_if -> .)
    RECTANGLE       reduce using rule 93 (end_if -> .)
    SQUARE          reduce using rule 93 (end_if -> .)
    CIRCLE          reduce using rule 93 (end_if -> .)
    POLIGON         reduce using rule 93 (end_if -> .)
    COLOR           reduce using rule 93 (end_if -> .)
    PENSIZE         reduce using rule 93 (end_if -> .)
    PENFORWARD      reduce using rule 93 (end_if -> .)
    PENBACK         reduce using rule 93 (end_if -> .)
    ROTATE          reduce using rule 93 (end_if -> .)
    WHILE           reduce using rule 93 (end_if -> .)
    RETURN          reduce using rule 93 (end_if -> .)
    PENON           reduce using rule 93 (end_if -> .)
    PENOFF          reduce using rule 93 (end_if -> .)
    RBRACE          reduce using rule 93 (end_if -> .)
    VAR             reduce using rule 93 (end_if -> .)

    end_if                         shift and go to state 281

state 274

    (89) condition1 -> gotoElse . ELSE LBRACE b2 RBRACE

    ELSE            shift and go to state 282


state 275

    (90) condition1 -> empty .

    ID              reduce using rule 90 (condition1 -> empty .)
    IF              reduce using rule 90 (condition1 -> empty .)
    TRIANGLE        reduce using rule 90 (condition1 -> empty .)
    RECTANGLE       reduce using rule 90 (condition1 -> empty .)
    SQUARE          reduce using rule 90 (condition1 -> empty .)
    CIRCLE          reduce using rule 90 (condition1 -> empty .)
    POLIGON         reduce using rule 90 (condition1 -> empty .)
    COLOR           reduce using rule 90 (condition1 -> empty .)
    PENSIZE         reduce using rule 90 (condition1 -> empty .)
    PENFORWARD      reduce using rule 90 (condition1 -> empty .)
    PENBACK         reduce using rule 90 (condition1 -> empty .)
    ROTATE          reduce using rule 90 (condition1 -> empty .)
    WHILE           reduce using rule 90 (condition1 -> empty .)
    RETURN          reduce using rule 90 (condition1 -> empty .)
    PENON           reduce using rule 90 (condition1 -> empty .)
    PENOFF          reduce using rule 90 (condition1 -> empty .)
    RBRACE          reduce using rule 90 (condition1 -> empty .)
    VAR             reduce using rule 90 (condition1 -> empty .)


state 276

    (40) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE . end_while
    (42) end_while -> .

    ID              reduce using rule 42 (end_while -> .)
    IF              reduce using rule 42 (end_while -> .)
    TRIANGLE        reduce using rule 42 (end_while -> .)
    RECTANGLE       reduce using rule 42 (end_while -> .)
    SQUARE          reduce using rule 42 (end_while -> .)
    CIRCLE          reduce using rule 42 (end_while -> .)
    POLIGON         reduce using rule 42 (end_while -> .)
    COLOR           reduce using rule 42 (end_while -> .)
    PENSIZE         reduce using rule 42 (end_while -> .)
    PENFORWARD      reduce using rule 42 (end_while -> .)
    PENBACK         reduce using rule 42 (end_while -> .)
    ROTATE          reduce using rule 42 (end_while -> .)
    WHILE           reduce using rule 42 (end_while -> .)
    RETURN          reduce using rule 42 (end_while -> .)
    PENON           reduce using rule 42 (end_while -> .)
    PENOFF          reduce using rule 42 (end_while -> .)
    RBRACE          reduce using rule 42 (end_while -> .)
    VAR             reduce using rule 42 (end_while -> .)

    end_while                      shift and go to state 283

state 277

    (54) funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .

    DAVINCI         reduce using rule 54 (funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    FUNC            reduce using rule 54 (funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    VAR             reduce using rule 54 (funcs -> FUNC type ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)


state 278

    (61) funcs3 -> funcs .

    DAVINCI         reduce using rule 61 (funcs3 -> funcs .)
    FUNC            reduce using rule 61 (funcs3 -> funcs .)
    VAR             reduce using rule 61 (funcs3 -> funcs .)


state 279

    (62) funcs3 -> empty .

    DAVINCI         reduce using rule 62 (funcs3 -> empty .)
    FUNC            reduce using rule 62 (funcs3 -> empty .)
    VAR             reduce using rule 62 (funcs3 -> empty .)


state 280

    (55) funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .

    DAVINCI         reduce using rule 55 (funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    FUNC            reduce using rule 55 (funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)
    VAR             reduce using rule 55 (funcs -> FUNC VOID ID LPAREN type ID funcs1 RPAREN LBRACE funcs2 RBRACE funcs3 .)


state 281

    (88) condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .

    ID              reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    IF              reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    TRIANGLE        reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    RECTANGLE       reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    SQUARE          reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    CIRCLE          reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    POLIGON         reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    COLOR           reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENSIZE         reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENFORWARD      reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENBACK         reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    ROTATE          reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    WHILE           reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    RETURN          reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENON           reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    PENOFF          reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    RBRACE          reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)
    VAR             reduce using rule 88 (condition -> IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if .)


state 282

    (89) condition1 -> gotoElse ELSE . LBRACE b2 RBRACE

    LBRACE          shift and go to state 284


state 283

    (40) while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .

    ID              reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    IF              reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    TRIANGLE        reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    RECTANGLE       reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    SQUARE          reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    CIRCLE          reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    POLIGON         reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    COLOR           reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENSIZE         reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENFORWARD      reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENBACK         reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    ROTATE          reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    WHILE           reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    RETURN          reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENON           reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    PENOFF          reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    RBRACE          reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)
    VAR             reduce using rule 40 (while -> WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while .)


state 284

    (89) condition1 -> gotoElse ELSE LBRACE . b2 RBRACE
    (11) b2 -> . b2 statute
    (12) b2 -> . empty
    (130) empty -> .

    RBRACE          reduce using rule 130 (empty -> .)
    ID              reduce using rule 130 (empty -> .)
    IF              reduce using rule 130 (empty -> .)
    TRIANGLE        reduce using rule 130 (empty -> .)
    RECTANGLE       reduce using rule 130 (empty -> .)
    SQUARE          reduce using rule 130 (empty -> .)
    CIRCLE          reduce using rule 130 (empty -> .)
    POLIGON         reduce using rule 130 (empty -> .)
    COLOR           reduce using rule 130 (empty -> .)
    PENSIZE         reduce using rule 130 (empty -> .)
    PENFORWARD      reduce using rule 130 (empty -> .)
    PENBACK         reduce using rule 130 (empty -> .)
    ROTATE          reduce using rule 130 (empty -> .)
    WHILE           reduce using rule 130 (empty -> .)
    RETURN          reduce using rule 130 (empty -> .)
    PENON           reduce using rule 130 (empty -> .)
    PENOFF          reduce using rule 130 (empty -> .)

    b2                             shift and go to state 285
    empty                          shift and go to state 29

state 285

    (89) condition1 -> gotoElse ELSE LBRACE b2 . RBRACE
    (11) b2 -> b2 . statute
    (23) statute -> . assignment
    (24) statute -> . call
    (25) statute -> . condition
    (26) statute -> . triangle
    (27) statute -> . rectangle
    (28) statute -> . square
    (29) statute -> . circle
    (30) statute -> . poligon
    (31) statute -> . color
    (32) statute -> . pensize
    (33) statute -> . penforward
    (34) statute -> . penback
    (35) statute -> . rotate
    (36) statute -> . while
    (37) statute -> . return
    (38) statute -> . penon
    (39) statute -> . penoff
    (43) assignment -> . ID cte_id ASSIGN expression SEMICOLON
    (44) assignment -> . ID cte_id LBRACKET exp RBRACKET ASSIGN expression SEMICOLON
    (121) call -> . ID check_name LPAREN create_era call1 RPAREN SEMICOLON gosub
    (88) condition -> . IF LPAREN expression RPAREN type_check LBRACE b2 RBRACE condition1 end_if
    (66) triangle -> . TRIANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (67) rectangle -> . RECTANGLE LPAREN exp COMMA exp RPAREN SEMICOLON
    (65) square -> . SQUARE LPAREN exp RPAREN SEMICOLON
    (64) circle -> . CIRCLE LPAREN exp RPAREN SEMICOLON
    (68) poligon -> . POLIGON LPAREN exp COMMA exp RPAREN SEMICOLON
    (63) color -> . COLOR LPAREN color_cte RPAREN SEMICOLON
    (71) pensize -> . PENSIZE LPAREN exp RPAREN SEMICOLON
    (72) penforward -> . PENFORWARD LPAREN exp RPAREN SEMICOLON
    (73) penback -> . PENBACK LPAREN exp RPAREN SEMICOLON
    (69) rotate -> . ROTATE LPAREN exp RPAREN SEMICOLON
    (70) rotate -> . ROTATE LPAREN CTE_STRING RPAREN SEMICOLON
    (40) while -> . WHILE while_return LPAREN type_check expression RPAREN LBRACE b2 RBRACE end_while
    (128) return -> . RETURN var_cte SEMICOLON
    (129) return -> . RETURN st_cte SEMICOLON
    (74) penon -> . PENON LPAREN RPAREN SEMICOLON
    (75) penoff -> . PENOFF LPAREN RPAREN SEMICOLON

    RBRACE          shift and go to state 286
    ID              shift and go to state 54
    IF              shift and go to state 55
    TRIANGLE        shift and go to state 56
    RECTANGLE       shift and go to state 57
    SQUARE          shift and go to state 58
    CIRCLE          shift and go to state 59
    POLIGON         shift and go to state 60
    COLOR           shift and go to state 61
    PENSIZE         shift and go to state 62
    PENFORWARD      shift and go to state 63
    PENBACK         shift and go to state 64
    ROTATE          shift and go to state 65
    WHILE           shift and go to state 66
    RETURN          shift and go to state 67
    PENON           shift and go to state 68
    PENOFF          shift and go to state 69

    statute                        shift and go to state 36
    assignment                     shift and go to state 37
    call                           shift and go to state 38
    condition                      shift and go to state 39
    triangle                       shift and go to state 40
    rectangle                      shift and go to state 41
    square                         shift and go to state 42
    circle                         shift and go to state 43
    poligon                        shift and go to state 44
    color                          shift and go to state 45
    pensize                        shift and go to state 46
    penforward                     shift and go to state 47
    penback                        shift and go to state 48
    rotate                         shift and go to state 49
    while                          shift and go to state 50
    return                         shift and go to state 51
    penon                          shift and go to state 52
    penoff                         shift and go to state 53

state 286

    (89) condition1 -> gotoElse ELSE LBRACE b2 RBRACE .

    ID              reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    IF              reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    TRIANGLE        reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    RECTANGLE       reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    SQUARE          reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    CIRCLE          reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    POLIGON         reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    COLOR           reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENSIZE         reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENFORWARD      reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENBACK         reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    ROTATE          reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    WHILE           reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    RETURN          reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENON           reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    PENOFF          reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    RBRACE          reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)
    VAR             reduce using rule 89 (condition1 -> gotoElse ELSE LBRACE b2 RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for FUNC in state 269 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 272 resolved as shift
WARNING: reduce/reduce conflict in state 99 resolved using rule (st_cte -> cte_bool)
WARNING: rejected rule (var_cte -> cte_bool) in state 99
WARNING: reduce/reduce conflict in state 109 resolved using rule (var_cte -> ID)
WARNING: rejected rule (push_id -> <empty>) in state 109
WARNING: reduce/reduce conflict in state 199 resolved using rule (var_cte -> ID)
WARNING: rejected rule (push_id -> <empty>) in state 199
WARNING: reduce/reduce conflict in state 203 resolved using rule (st_cte -> cte_bool)
WARNING: rejected rule (var_cte -> cte_bool) in state 203
WARNING: Rule (push_id -> <empty>) is never reduced
