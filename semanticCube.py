from quads import Operations
class SemanticCube  :  

	def __init__(self) :  
		self.cube = {
            "Int" :  {
              "Int" :  {
                Operations.PLUS : "Int",
                Operations.MINUS : "Int",
                Operations.TIMES : "Int",
                Operations.DIVIDE : "Float",
                Operations.GREATER : "Bool",
                Operations.GREATEROREQUAL : "Bool",
                Operations.LESSEROREQUAL : "Bool",
                Operations.LESSER : "Bool",
                Operations.ASSIGN : "Int",
                Operations.EQUAL :  "Bool",
                Operations.NOTEQUAL : "Bool",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Float" :  {
                Operations.PLUS : "Float",
                Operations.MINUS : "Float",
                Operations.TIMES : "Float",
                Operations.DIVIDE : "Float",
                Operations.GREATER : "Bool",
                Operations.GREATEROREQUAL : "Bool",
                Operations.LESSEROREQUAL : "Bool",
                Operations.LESSER : "Bool",
                Operations.ASSIGN : "Int",
                Operations.EQUAL :  "Bool",
                Operations.NOTEQUAL : "Bool",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "String" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Bool" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              },
            "Float" : {
              "Int" :  {
                Operations.PLUS : "Float",
                Operations.MINUS : "Float",
                Operations.TIMES : "Float",
                Operations.DIVIDE : "Float",
                Operations.GREATER : "Bool",
                Operations.GREATEROREQUAL : "Bool",
                Operations.LESSEROREQUAL : "Bool",
                Operations.LESSER : "Bool",
                Operations.ASSIGN : "Float",
                Operations.EQUAL :  "Bool",
                Operations.NOTEQUAL : "Bool",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Float" :  {
                Operations.PLUS : "Float",
                Operations.MINUS : "Float",
                Operations.TIMES : "Float",
                Operations.DIVIDE : "Float",
                Operations.GREATER : "Bool",
                Operations.GREATEROREQUAL : "Bool",
                Operations.LESSEROREQUAL : "Bool",
                Operations.LESSER : "Bool",
                Operations.ASSIGN : "Float",
                Operations.EQUAL :  "Bool",
                Operations.NOTEQUAL : "Bool",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "String" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Bool" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              },
            "String" : {
              "Int" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Float" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "String" :  {
                Operations.PLUS : "String",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "String",
                Operations.EQUAL :  "Bool",
                Operations.NOTEQUAL : "Bool",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Bool" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              },
            "Bool" : {
              "Int" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Float" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL :  "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "String" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Error",
                Operations.EQUAL : "Error",
                Operations.NOTEQUAL : "Error",
                Operations.AND : "Error",
                Operations.OR : "Error",
                },
              "Bool" :  {
                Operations.PLUS : "Error",
                Operations.MINUS : "Error",
                Operations.TIMES : "Error",
                Operations.DIVIDE : "Error",
                Operations.GREATER : "Error",
                Operations.GREATEROREQUAL : "Error",
                Operations.LESSEROREQUAL : "Error",
                Operations.LESSER : "Error",
                Operations.ASSIGN : "Bool",
                Operations.EQUAL : "Bool",
                Operations.NOTEQUAL : "Bool",
                Operations.AND : "Bool",
                Operations.OR : "Bool",
                },
              },
            }

def getType(self, type1, type2, operator): 
    return self.cube[type1][type2][operator]
